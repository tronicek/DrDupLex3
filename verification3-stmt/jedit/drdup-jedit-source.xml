<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<clones>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2207" startcolumn="3" endline="2216" endcolumn="3">
try
		{
			writeLock();

			undoMgr.beginCompoundEdit();
		}
		finally
		{
			writeUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="173" startcolumn="3" endline="182" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			bsh.eval(view,script);
		}
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2207" startcolumn="3" endline="2216" endcolumn="3">
try
		{
			writeLock();

			undoMgr.beginCompoundEdit();
		}
		finally
		{
			writeUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="411" startcolumn="3" endline="421" endcolumn="3">
try
		{
			readLock();

			return getLineEndOffset(line)
				- getLineStartOffset(line) - 1;
		}
		finally
		{
			readUnlock();
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2207" startcolumn="3" endline="2216" endcolumn="3">
try
		{
			writeLock();

			undoMgr.beginCompoundEdit();
		}
		finally
		{
			writeUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="1038" startcolumn="9" endline="1047" endcolumn="4">
if(evt.getSource() == synchronize)
			{
				synchronizeMultiFileSettings();
			}
			else // source is directory or filter field
			{
				// just as if Enter was pressed in another
				// text field
				ok();
			}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/bufferio/BufferIORequest.java" startline="213" startcolumn="6" endline="224" endcolumn="6">
if(lastWasCR)
					{
						CROnly = true;
						CRLF = false;
					}
					// Otherwise set a flag,
					// so that \n knows that last
					// was a \r
					else
					{
						lastWasCR = true;
					}
</source>
        <source file="installer/CBZip2InputStream.java" startline="217" startcolumn="9" endline="226" endcolumn="9">
if( m_blockRandomised )
        {
            m_rNToGo = 0;
            m_rTPos = 0;
            setupRandPartA();
        }
        else
        {
            setupNoRandPartA();
        }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="1038" startcolumn="9" endline="1047" endcolumn="4">
if(evt.getSource() == synchronize)
			{
				synchronizeMultiFileSettings();
			}
			else // source is directory or filter field
			{
				// just as if Enter was pressed in another
				// text field
				ok();
			}
</source>
        <source file="installer/CBZip2InputStream.java" startline="217" startcolumn="9" endline="226" endcolumn="9">
if( m_blockRandomised )
        {
            m_rNToGo = 0;
            m_rTPos = 0;
            setupRandPartA();
        }
        else
        {
            setupNoRandPartA();
        }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="1038" startcolumn="9" endline="1047" endcolumn="4">
if(evt.getSource() == synchronize)
			{
				synchronizeMultiFileSettings();
			}
			else // source is directory or filter field
			{
				// just as if Enter was pressed in another
				// text field
				ok();
			}
</source>
        <source file="org/gjt/sp/jedit/PluginJAR.java" startline="948" startcolumn="3" endline="957" endcolumn="3">
if (jEdit.isMainThread()
			|| SwingUtilities.isEventDispatchThread())
		{
			startPlugin();
		}
		else
		{
			// for thread safety
			startPluginLater();
		}
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/util/IOUtilities.java" startline="202" startcolumn="3" endline="212" endcolumn="3">
if (in != null)
		{
			try
			{
				in.close();
			}
			catch (IOException e)
			{
				// ignore
		}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/StandaloneTextArea.java" startline="192" startcolumn="3" endline="201" endcolumn="3">
if (property != null)
		{
			try
			{
				undoCount = Integer.parseInt(property);
			}
			catch (NumberFormatException e)
			{
			}
		}
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/util/IOUtilities.java" startline="223" startcolumn="3" endline="233" endcolumn="3">
if (out != null)
		{
			try
			{
				out.close();
			}
			catch (IOException e)
			{
				// ignore
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/StandaloneTextArea.java" startline="192" startcolumn="3" endline="201" endcolumn="3">
if (property != null)
		{
			try
			{
				undoCount = Integer.parseInt(property);
			}
			catch (NumberFormatException e)
			{
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/util/IOUtilities.java" startline="202" startcolumn="3" endline="212" endcolumn="3">
if (in != null)
		{
			try
			{
				in.close();
			}
			catch (IOException e)
			{
				// ignore
		}
		}
</source>
        <source file="org/gjt/sp/util/Log.java" startline="216" startcolumn="3" endline="226" endcolumn="3">
if(stream != null)
		{
			try
			{
				stream.flush();
			}
			catch(IOException io)
			{
				io.printStackTrace(realErr);
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/util/IOUtilities.java" startline="223" startcolumn="3" endline="233" endcolumn="3">
if (out != null)
		{
			try
			{
				out.close();
			}
			catch (IOException e)
			{
				// ignore
			}
		}
</source>
        <source file="org/gjt/sp/util/Log.java" startline="216" startcolumn="3" endline="226" endcolumn="3">
if(stream != null)
		{
			try
			{
				stream.flush();
			}
			catch(IOException io)
			{
				io.printStackTrace(realErr);
			}
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/RolloverButton.java" startline="95" startcolumn="3" endline="104" endcolumn="3">
try
		{
			revalidateBlocked = true;
			super.setBorderPainted(b);
			setContentAreaFilled(b);
		}
		finally
		{
			revalidateBlocked = false;
		}
</source>
        <source file="org/gjt/sp/jedit/gui/CloseDialog.java" startline="164" startcolumn="5" endline="174" endcolumn="5">
try
				{
					selectAllFlag = true;

					bufferList.setSelectionInterval(0,
						bufferModel.getSize() - 1);
				}
				finally
				{
					selectAllFlag = false;
				}
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="173" startcolumn="3" endline="182" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			bsh.eval(view,script);
		}
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2018" startcolumn="3" endline="2029" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			moveCaretPosition(s.setText(buffer,selectedText));
		}
		// No matter what happends... stops us from leaving buffer
		// in a bad state
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="173" startcolumn="3" endline="182" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			bsh.eval(view,script);
		}
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="78" startcolumn="4" endline="88" endcolumn="4">
try
			{
				buffer.beginCompoundEdit();

				for (String path : paths)
					runScript(view, path, false);
			}
			finally
			{
				buffer.endCompoundEdit();
			}
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="173" startcolumn="3" endline="182" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			bsh.eval(view,script);
		}
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="2939" startcolumn="3" endline="2950" endcolumn="3">
try
		{
			PerspectiveManager.setPerspectiveEnabled(false);

			// Close all buffers
			if(!closeAllBuffers(view,reallyExit))
				return;
		}
		finally
		{
			PerspectiveManager.setPerspectiveEnabled(true);
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="411" startcolumn="3" endline="421" endcolumn="3">
try
		{
			readLock();

			return getLineEndOffset(line)
				- getLineStartOffset(line) - 1;
		}
		finally
		{
			readUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="958" startcolumn="3" endline="967" endcolumn="3">
try
		{
			beginCompoundEdit();
			for (int line : lines)
				indentLine(line, true);
		}
		finally
		{
			endCompoundEdit();
		}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="958" startcolumn="3" endline="967" endcolumn="3">
try
		{
			beginCompoundEdit();
			for (int line : lines)
				indentLine(line, true);
		}
		finally
		{
			endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="78" startcolumn="4" endline="88" endcolumn="4">
try
			{
				buffer.beginCompoundEdit();

				for (String path : paths)
					runScript(view, path, false);
			}
			finally
			{
				buffer.endCompoundEdit();
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="958" startcolumn="3" endline="967" endcolumn="3">
try
		{
			beginCompoundEdit();
			for (int line : lines)
				indentLine(line, true);
		}
		finally
		{
			endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="939" startcolumn="3" endline="948" endcolumn="3">
try
		{
			beginCompoundEdit();
			for(int i = start; i &lt;= end; i++)
				indentLine(i,true);
		}
		finally
		{
			endCompoundEdit();
		}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2018" startcolumn="3" endline="2029" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			moveCaretPosition(s.setText(buffer,selectedText));
		}
		// No matter what happends... stops us from leaving buffer
		// in a bad state
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="78" startcolumn="4" endline="88" endcolumn="4">
try
			{
				buffer.beginCompoundEdit();

				for (String path : paths)
					runScript(view, path, false);
			}
			finally
			{
				buffer.endCompoundEdit();
			}
</source>
    </clone>
    <clone nlines="12" distance="6">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2018" startcolumn="3" endline="2029" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();

			moveCaretPosition(s.setText(buffer,selectedText));
		}
		// No matter what happends... stops us from leaving buffer
		// in a bad state
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="2939" startcolumn="3" endline="2950" endcolumn="3">
try
		{
			PerspectiveManager.setPerspectiveEnabled(false);

			// Close all buffers
			if(!closeAllBuffers(view,reallyExit))
				return;
		}
		finally
		{
			PerspectiveManager.setPerspectiveEnabled(true);
		}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/util/Log.java" startline="216" startcolumn="3" endline="226" endcolumn="3">
if(stream != null)
		{
			try
			{
				stream.flush();
			}
			catch(IOException io)
			{
				io.printStackTrace(realErr);
			}
		}
</source>
        <source file="org/gjt/sp/util/Log.java" startline="236" startcolumn="3" endline="247" endcolumn="3">
if(stream != null)
		{
			try
			{
				stream.close();
				stream = null;
			}
			catch(IOException io)
			{
				io.printStackTrace(realErr);
			}
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="213" startcolumn="3" endline="222" endcolumn="3">
if(current == entry)
		{
			current = null;
			show(current);
		}
		else
		{
			wm.revalidate();
			dockablePanel.repaint();
		}
</source>
        <source file="org/gjt/sp/jedit/gui/CloseDialog.java" startline="192" startcolumn="5" endline="201" endcolumn="5">
if(bufferModel.getSize() == 0)
				{
					ok = true;
					dispose();
				}
				else
				{
					bufferList.setSelectedIndex(0);
					bufferList.requestFocus();
				}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="213" startcolumn="3" endline="222" endcolumn="3">
if(current == entry)
		{
			current = null;
			show(current);
		}
		else
		{
			wm.revalidate();
			dockablePanel.repaint();
		}
</source>
        <source file="org/gjt/sp/jedit/gui/CloseDialog.java" startline="215" startcolumn="5" endline="224" endcolumn="5">
if(bufferModel.getSize() == 0)
				{
					ok = true;
					dispose();
				}
				else
				{
					bufferList.setSelectedIndex(0);
					bufferList.requestFocus();
				}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="213" startcolumn="3" endline="222" endcolumn="3">
if(current == entry)
		{
			current = null;
			show(current);
		}
		else
		{
			wm.revalidate();
			dockablePanel.repaint();
		}
</source>
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="188" startcolumn="3" endline="198" endcolumn="3">
if(current == entry)
		{
			current = null;
			show(current);
		}
		else
		{
			wm.revalidate();
			dockablePanel.repaint();
			buttonPanel.repaint();
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="213" startcolumn="3" endline="222" endcolumn="3">
if(current == entry)
		{
			current = null;
			show(current);
		}
		else
		{
			wm.revalidate();
			dockablePanel.repaint();
		}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/bsh/BSHTryStatement.java" startline="122" startcolumn="6" endline="134" endcolumn="6">
try {
						thrown = (Throwable)Types.castObject(
							thrown/*rsh*/, fp.type/*lhsType*/, Types.ASSIGNMENT );
					} catch( UtilEvalError e ) {
						/*
							Catch the mismatch and continue to try the next
							Note: this is innefficient, should have an
							isAssignableFrom() that doesn't throw
							// TODO: we do now have a way to test assignment
							// 	in castObject(), use it?
						*/
						continue;
					}
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHTryStatement.java" startline="121" startcolumn="5" endline="134" endcolumn="6">
if ( fp.type != null ) 
					try {
						thrown = (Throwable)Types.castObject(
							thrown/*rsh*/, fp.type/*lhsType*/, Types.ASSIGNMENT );
					} catch( UtilEvalError e ) {
						/*
							Catch the mismatch and continue to try the next
							Note: this is innefficient, should have an
							isAssignableFrom() that doesn't throw
							// TODO: we do now have a way to test assignment
							// 	in castObject(), use it?
						*/
						continue;
					}
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="612" startcolumn="9" endline="621" endcolumn="9">
label_2:
        while (true) {
          if (jj_2_4(2)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="792" startcolumn="7" endline="802" endcolumn="7">
label_4:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="612" startcolumn="9" endline="621" endcolumn="9">
label_2:
        while (true) {
          if (jj_2_4(2)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2508" startcolumn="9" endline="2518" endcolumn="9">
label_20:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Modifiers.java" startline="37" startcolumn="3" endline="48" endcolumn="3">
switch( context ) 
		{
		case CLASS:
			validateForClass();
			break;
		case METHOD:
			validateForMethod();
			break;
		case FIELD:
			validateForField();
			break;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/MouseHandler.java" startline="126" startcolumn="4" endline="137" endcolumn="4">
switch(clickCount)
			{
			case 1:
				doSingleClick(evt);
				break;
			case 2:
				doDoubleClick();
				break;
			default: //case 3:
				doTripleClick();
				break;
			}
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Modifiers.java" startline="37" startcolumn="3" endline="48" endcolumn="3">
switch( context ) 
		{
		case CLASS:
			validateForClass();
			break;
		case METHOD:
			validateForMethod();
			break;
		case FIELD:
			validateForField();
			break;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="113" startcolumn="4" endline="124" endcolumn="4">
switch(clickCount)
			{
			case 1:
				doSingleClick(evt);
				break;
			case 2:
				doDoubleClick();
				break;
			default: //case 3:
				doTripleClick();
				break;
			}
</source>
    </clone>
    <clone nlines="12" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Modifiers.java" startline="37" startcolumn="3" endline="48" endcolumn="3">
switch( context ) 
		{
		case CLASS:
			validateForClass();
			break;
		case METHOD:
			validateForMethod();
			break;
		case FIELD:
			validateForField();
			break;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="313" startcolumn="3" endline="324" endcolumn="3">
switch(clickCount)
		{
		case 1:
			doSingleDrag(evt);
			break;
		case 2:
			doDoubleDrag(evt);
			break;
		default: //case 3:
			doTripleDrag(evt);
			break;
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/textarea/MouseHandler.java" startline="126" startcolumn="4" endline="137" endcolumn="4">
switch(clickCount)
			{
			case 1:
				doSingleClick(evt);
				break;
			case 2:
				doDoubleClick();
				break;
			default: //case 3:
				doTripleClick();
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="3035" startcolumn="3" endline="3046" endcolumn="3">
switch(getInputHandler().getLastActionCount())
		{
		case 1:
			goToStartOfWhiteSpace(select);
			break;
		case 2:
			goToStartOfLine(select);
			break;
		default: //case 3:
			goToFirstVisibleLine(select);
			break;
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="113" startcolumn="4" endline="124" endcolumn="4">
switch(clickCount)
			{
			case 1:
				doSingleClick(evt);
				break;
			case 2:
				doDoubleClick();
				break;
			default: //case 3:
				doTripleClick();
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="3035" startcolumn="3" endline="3046" endcolumn="3">
switch(getInputHandler().getLastActionCount())
		{
		case 1:
			goToStartOfWhiteSpace(select);
			break;
		case 2:
			goToStartOfLine(select);
			break;
		default: //case 3:
			goToFirstVisibleLine(select);
			break;
		}
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/jedit/textarea/MouseHandler.java" startline="126" startcolumn="4" endline="137" endcolumn="4">
switch(clickCount)
			{
			case 1:
				doSingleClick(evt);
				break;
			case 2:
				doDoubleClick();
				break;
			default: //case 3:
				doTripleClick();
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="313" startcolumn="3" endline="324" endcolumn="3">
switch(clickCount)
		{
		case 1:
			doSingleDrag(evt);
			break;
		case 2:
			doDoubleDrag(evt);
			break;
		default: //case 3:
			doTripleDrag(evt);
			break;
		}
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="113" startcolumn="4" endline="124" endcolumn="4">
switch(clickCount)
			{
			case 1:
				doSingleClick(evt);
				break;
			case 2:
				doDoubleClick();
				break;
			default: //case 3:
				doTripleClick();
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="313" startcolumn="3" endline="324" endcolumn="3">
switch(clickCount)
		{
		case 1:
			doSingleDrag(evt);
			break;
		case 2:
			doDoubleDrag(evt);
			break;
		default: //case 3:
			doTripleDrag(evt);
			break;
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/bsh/BSHWhileStatement.java" startline="77" startcolumn="5" endline="88" endcolumn="5">
switch(((ReturnControl)ret).kind )
				{
					case RETURN:
						return ret;

					case CONTINUE:
						continue;

					case BREAK:
						breakout = true;
						break;
				}
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHWhileStatement.java" startline="75" startcolumn="4" endline="89" endcolumn="4">
if(ret instanceof ReturnControl)
			{
				switch(((ReturnControl)ret).kind )
				{
					case RETURN:
						return ret;

					case CONTINUE:
						continue;

					case BREAK:
						breakout = true;
						break;
				}
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/textarea/Gutter.java" startline="780" startcolumn="10" endline="790" endcolumn="5">
if(textArea.displayManager.isLineVisible(
						match.startLine))
				{
					structScreenLine = textArea
						.getScreenLineOfOffset(
						match.start);
				}
				else
				{
					structScreenLine = -1;
				}
</source>
        <source file="org/gjt/sp/jedit/textarea/Gutter.java" startline="765" startcolumn="10" endline="775" endcolumn="5">
if(textArea.displayManager.isLineVisible(
						textArea.getCaretLine()))
				{
					caretScreenLine = textArea
						.getScreenLineOfOffset(
						textArea.getCaretPosition());
				}
				else
				{
					caretScreenLine = -1;
				}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/textarea/ColumnBlock.java" startline="293" startcolumn="5" endline="304" endcolumn="5">
if (currentSearchIndex &gt; 0)
				{
					return searchChildren(line, startIndex,
						currentSearchIndex - 1);
				}
				else
				{
					// no exact match found return the
					// nearest column block just below this
					// line
					return (ColumnBlock) children.get(0);
				}
</source>
        <source file="org/gjt/sp/jedit/textarea/ColumnBlock.java" startline="291" startcolumn="9" endline="305" endcolumn="4">
if (found &lt; 0)
			{
				if (currentSearchIndex &gt; 0)
				{
					return searchChildren(line, startIndex,
						currentSearchIndex - 1);
				}
				else
				{
					// no exact match found return the
					// nearest column block just below this
					// line
					return (ColumnBlock) children.get(0);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/gui/SplashScreen.java" startline="114" startcolumn="3" endline="126" endcolumn="3">
if(realSplash == null)
		{
			// wait for it to be painted to ensure progress is updated
			// continuously
			try
			{
				wait();
			}
			catch(InterruptedException ie)
			{
				Log.log(Log.ERROR,this,ie);
			}
		}
</source>
        <source file="org/gjt/sp/util/TaskManager.java" startline="189" startcolumn="4" endline="198" endcolumn="4">
while(countIoTasks() &gt; 0)
			{
				try
				{
					ioWaitLock.wait();
				} catch (InterruptedException e)
				{
					Log.log(Log.ERROR,this,e);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/gui/SplashScreen.java" startline="136" startcolumn="3" endline="148" endcolumn="3">
if(realSplash == null)
		{
			// wait for it to be painted to ensure progress is updated
			// continuously
			try
			{
				wait();
			}
			catch(InterruptedException ie)
			{
				Log.log(Log.ERROR,this,ie);
			}
		}
</source>
        <source file="org/gjt/sp/util/TaskManager.java" startline="189" startcolumn="4" endline="198" endcolumn="4">
while(countIoTasks() &gt; 0)
			{
				try
				{
					ioWaitLock.wait();
				} catch (InterruptedException e)
				{
					Log.log(Log.ERROR,this,e);
				}
			}
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="395" startcolumn="5" endline="407" endcolumn="5">
try
				{
					data = (BufferTransferableData) t
							.getTransferData(BufferSwitcher.BufferDataFlavor);
				}
				catch (UnsupportedFlavorException e)
				{
					return;
				}
				catch (IOException e)
				{
					return;
				}
</source>
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="300" startcolumn="4" endline="312" endcolumn="4">
try
			{
				data = (BufferTransferableData) t
						.getTransferData(BufferSwitcher.BufferDataFlavor);
			}
			catch (UnsupportedFlavorException e)
			{
				return false;
			}
			catch (IOException e)
			{
				return false;
			}
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="395" startcolumn="5" endline="407" endcolumn="5">
try
				{
					data = (BufferTransferableData) t
							.getTransferData(BufferSwitcher.BufferDataFlavor);
				}
				catch (UnsupportedFlavorException e)
				{
					return;
				}
				catch (IOException e)
				{
					return;
				}
</source>
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="348" startcolumn="4" endline="360" endcolumn="4">
try
			{
				data = (BufferTransferableData) t
						.getTransferData(BufferSwitcher.BufferDataFlavor);
			}
			catch (UnsupportedFlavorException e)
			{
				return false;
			}
			catch (IOException e)
			{
				return false;
			}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="313" startcolumn="3" endline="324" endcolumn="3">
switch(clickCount)
		{
		case 1:
			doSingleDrag(evt);
			break;
		case 2:
			doDoubleDrag(evt);
			break;
		default: //case 3:
			doTripleDrag(evt);
			break;
		}
</source>
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="1106" startcolumn="5" endline="1117" endcolumn="5">
switch(c)
				{
				case 'n':
					buf.append('\n');
					break;
				case 't':
					buf.append('\t');
					break;
				default:
					buf.append(c);
					break;
				}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="313" startcolumn="3" endline="324" endcolumn="3">
switch(clickCount)
		{
		case 1:
			doSingleDrag(evt);
			break;
		case 2:
			doDoubleDrag(evt);
			break;
		default: //case 3:
			doTripleDrag(evt);
			break;
		}
</source>
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="1392" startcolumn="5" endline="1403" endcolumn="5">
switch(ch)
				{
				case 'n':
					buf.append('\n');
					break;
				case 't':
					buf.append('\t');
					break;
				default:
					buf.append(ch);
					break;
				}
</source>
    </clone>
    <clone nlines="12" distance="6">
        <source file="org/gjt/sp/jedit/textarea/TextAreaMouseHandler.java" startline="313" startcolumn="3" endline="324" endcolumn="3">
switch(clickCount)
		{
		case 1:
			doSingleDrag(evt);
			break;
		case 2:
			doDoubleDrag(evt);
			break;
		default: //case 3:
			doTripleDrag(evt);
			break;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="3035" startcolumn="3" endline="3046" endcolumn="3">
switch(getInputHandler().getLastActionCount())
		{
		case 1:
			goToStartOfWhiteSpace(select);
			break;
		case 2:
			goToStartOfLine(select);
			break;
		default: //case 3:
			goToFirstVisibleLine(select);
			break;
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/CloseDialog.java" startline="192" startcolumn="5" endline="201" endcolumn="5">
if(bufferModel.getSize() == 0)
				{
					ok = true;
					dispose();
				}
				else
				{
					bufferList.setSelectedIndex(0);
					bufferList.requestFocus();
				}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/CloseDialog.java" startline="215" startcolumn="5" endline="224" endcolumn="5">
if(bufferModel.getSize() == 0)
				{
					ok = true;
					dispose();
				}
				else
				{
					bufferList.setSelectedIndex(0);
					bufferList.requestFocus();
				}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="org/gjt/sp/jedit/gui/DockableWindowManagerImpl.java" startline="171" startcolumn="4" endline="183" endcolumn="4">
try
			{
				// no need to close the stream it is closed by XMLUtilities.parseXML() method
				XMLUtilities.parseXML(new FileInputStream(filename), handler);
			}
			catch (FileNotFoundException e)
			{
				return false;
			}
			catch (IOException e)
			{
				return false;
			}
</source>
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="300" startcolumn="4" endline="312" endcolumn="4">
try
			{
				data = (BufferTransferableData) t
						.getTransferData(BufferSwitcher.BufferDataFlavor);
			}
			catch (UnsupportedFlavorException e)
			{
				return false;
			}
			catch (IOException e)
			{
				return false;
			}
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="org/gjt/sp/jedit/gui/DockableWindowManagerImpl.java" startline="171" startcolumn="4" endline="183" endcolumn="4">
try
			{
				// no need to close the stream it is closed by XMLUtilities.parseXML() method
				XMLUtilities.parseXML(new FileInputStream(filename), handler);
			}
			catch (FileNotFoundException e)
			{
				return false;
			}
			catch (IOException e)
			{
				return false;
			}
</source>
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="348" startcolumn="4" endline="360" endcolumn="4">
try
			{
				data = (BufferTransferableData) t
						.getTransferData(BufferSwitcher.BufferDataFlavor);
			}
			catch (UnsupportedFlavorException e)
			{
				return false;
			}
			catch (IOException e)
			{
				return false;
			}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/ServiceManager.java" startline="341" startcolumn="9" endline="353" endcolumn="4">
if(instance == null)
			{
				// lazy instantiation
				instance = BeanShell.eval(null,
					BeanShell.getNameSpace(),
					code);
				if(instance == null)
				{
					// avoid re-running script if it gives
					// us null
					instanceIsNull = true;
				}
			}
</source>
        <source file="org/gjt/sp/jedit/ServiceManager.java" startline="339" startcolumn="4" endline="353" endcolumn="4">
if(instanceIsNull)
				return null;
			else if(instance == null)
			{
				// lazy instantiation
				instance = BeanShell.eval(null,
					BeanShell.getNameSpace(),
					code);
				if(instance == null)
				{
					// avoid re-running script if it gives
					// us null
					instanceIsNull = true;
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="87" startcolumn="5" endline="96" endcolumn="5">
if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="87" startcolumn="8" endline="96" endcolumn="8">
if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="582" startcolumn="4" endline="591" endcolumn="4">
if (file.exists())
			{
				GUIUtilities.advanceSplashProgress("run startup scripts");
				runStartupScripts(file);
			}
			else
			{
				GUIUtilities.advanceSplashProgress();
				file.mkdirs();
			}
</source>
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="935" startcolumn="3" endline="944" endcolumn="3">
if(SearchAndReplace.getBeanShellReplace())
		{
			replace.setModel("replace.script");
			beanShellReplace.setSelected(true);
		}
		else
		{
			replace.setModel("replace");
			stringReplace.setSelected(true);
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/DockablePanel.java" startline="219" startcolumn="5" endline="228" endcolumn="5">
if(canDrag)
				{
					wm.setCursor(Cursor.getPredefinedCursor(
						getAppropriateCursor()));
				}
				else
				{
					wm.setCursor(Cursor.getPredefinedCursor(
						Cursor.DEFAULT_CURSOR));
				}
</source>
        <source file="org/gjt/sp/jedit/gui/DockablePanel.java" startline="217" startcolumn="4" endline="229" endcolumn="4">
if (dragStart == null)
			{
				if(canDrag)
				{
					wm.setCursor(Cursor.getPredefinedCursor(
						getAppropriateCursor()));
				}
				else
				{
					wm.setCursor(Cursor.getPredefinedCursor(
						Cursor.DEFAULT_CURSOR));
				}
			}
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/gjt/sp/jedit/JEditActionSet.java" startline="380" startcolumn="4" endline="394" endcolumn="4">
try
			{
				in = uri.openStream();
			}
			catch(FileNotFoundException e)
			{
				in = null;
				// this happened when calling generateCache() in the context of 'find orphan jars'
				// in org.gjt.sp.jedit.pluginmgr.ManagePanel.FindOrphan.actionPerformed(ActionEvent)
				// because for not loaded plugins, the plugin will not be added to the list of pluginJars
				// so the org.gjt.sp.jedit.proto.jeditresource.PluginResURLConnection will not find the plugin
				// to read the resource from.
				// Better log a small error message than a big stack trace
				Log.log(Log.WARNING, this, "Unable to open: " + uri);
			}
</source>
        <source file="org/gjt/sp/jedit/ServiceManager.java" startline="113" startcolumn="4" endline="127" endcolumn="4">
try
			{
				in = uri.openStream();
			}
			catch(FileNotFoundException e)
			{
				in = null;
				// this happened when calling generateCache() in the context of 'find orphan jars'
				// in org.gjt.sp.jedit.pluginmgr.ManagePanel.FindOrphan.actionPerformed(ActionEvent)
				// because for not loaded plugins, the plugin will not be added to the list of pluginJars
				// so the org.gjt.sp.jedit.proto.jeditresource.PluginResURLConnection will not find the plugin
				// to read the resource from.
				// Better log a small error message than a big stack trace
				Log.log(Log.WARNING, ServiceManager.class, "Unable to open: " + uri);
			}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="195" startcolumn="4" endline="206" endcolumn="4">
switch(str.charAt(i))
			{
				case ' ':
					whitespace++;
					break;
				case '\t':
					whitespace += tabSize -
						whitespace % tabSize;
					break;
				default:
					break loop;
			}
</source>
        <source file="org/gjt/sp/jedit/buffer/IndentFoldHandler.java" startline="53" startcolumn="4" endline="63" endcolumn="4">
switch(seg.array[offset + i])
			{
			case ' ':
				whitespace++;
				break;
			case '\t':
				whitespace += (tabSize - whitespace % tabSize);
				break;
			default:
				return whitespace;
			}
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/jedit/io/Native2ASCIIEncoding.java" startline="227" startcolumn="4" endline="238" endcolumn="4">
if (read == 0)
			{
				if (permissive)
				{
					escaped = true;
					in.unread('u');
					return result;
				} else
				{
					throw new MalformedInputException(1);
				}
			}
</source>
        <source file="org/jedit/io/Native2ASCIIEncoding.java" startline="246" startcolumn="5" endline="257" endcolumn="5">
if (read2 == -1)
				{
					if (permissive)
					{
						escaped = true;
						in.unread(escape, 0, read);
						return result;
					} else
					{
						throw new MalformedInputException(1);
					}
				}
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/search/PatternSearchMatcher.java" startline="201" startcolumn="6" endline="210" endcolumn="6">
if (previous != null)
					{
						returnValue.start = previous.start;
						returnValue.end = previous.end;
						returnValue.substitutions = previous.substitutions;
					}
					else
					{
						return null;
					}
</source>
        <source file="org/gjt/sp/jedit/search/PatternSearchMatcher.java" startline="159" startcolumn="5" endline="169" endcolumn="5">
if (previous != null)
				{
					returnValue.start = previous.start;
					returnValue.end = previous.end;
					returnValue.substitutions = previous.substitutions;
					break;
				}
				else
				{
					return null;
				}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="163" startcolumn="4" endline="177" endcolumn="4">
try
			{
				EventQueue.invokeAndWait(new Runnable()
				{
					@Override
					public void run()
					{
						message(comp, message);
					}
				});
			}
			catch (Exception e)
			{
				// ignored
			}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="703" startcolumn="25" endline="717" endcolumn="25">
try
                        {
                            EventQueue.invokeAndWait(new Runnable()
                            {
                                    @Override
                                    public void run()
                                    {
                                            message(comp, name, args);
                                    }
                            });
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="163" startcolumn="4" endline="177" endcolumn="4">
try
			{
				EventQueue.invokeAndWait(new Runnable()
				{
					@Override
					public void run()
					{
						message(comp, message);
					}
				});
			}
			catch (Exception e)
			{
				// ignored
			}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="747" startcolumn="25" endline="761" endcolumn="25">
try
                        {
                                EventQueue.invokeAndWait(new Runnable()
                                {
                                        @Override
                                        public void run()
                                        {
                                                error(comp, name, args);
                                        }
                                });
                        }
                        catch (Exception e)
                        {
                                // ignored
                        }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="203" startcolumn="4" endline="217" endcolumn="4">
try
			{
				EventQueue.invokeAndWait(new Runnable()
				{
					@Override
					public void run()
					{
						message(comp, message);
					}
				});
			}
			catch (Exception e)
			{
				// ignored
			}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="703" startcolumn="25" endline="717" endcolumn="25">
try
                        {
                            EventQueue.invokeAndWait(new Runnable()
                            {
                                    @Override
                                    public void run()
                                    {
                                            message(comp, name, args);
                                    }
                            });
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="203" startcolumn="4" endline="217" endcolumn="4">
try
			{
				EventQueue.invokeAndWait(new Runnable()
				{
					@Override
					public void run()
					{
						message(comp, message);
					}
				});
			}
			catch (Exception e)
			{
				// ignored
			}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="747" startcolumn="25" endline="761" endcolumn="25">
try
                        {
                                EventQueue.invokeAndWait(new Runnable()
                                {
                                        @Override
                                        public void run()
                                        {
                                                error(comp, name, args);
                                        }
                                });
                        }
                        catch (Exception e)
                        {
                                // ignored
                        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="793" startcolumn="7" endline="802" endcolumn="7">
while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="792" startcolumn="7" endline="802" endcolumn="7">
label_4:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="793" startcolumn="7" endline="802" endcolumn="7">
while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2508" startcolumn="9" endline="2518" endcolumn="9">
label_20:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2509" startcolumn="9" endline="2518" endcolumn="9">
while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="792" startcolumn="7" endline="802" endcolumn="7">
label_4:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2509" startcolumn="9" endline="2518" endcolumn="9">
while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2508" startcolumn="9" endline="2518" endcolumn="9">
label_20:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="793" startcolumn="7" endline="802" endcolumn="7">
while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="967" startcolumn="7" endline="976" endcolumn="7">
while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                        s.append("."+t.image);
      }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2509" startcolumn="9" endline="2518" endcolumn="9">
while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="967" startcolumn="7" endline="976" endcolumn="7">
while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                        s.append("."+t.image);
      }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/pluginmgr/InstallPanel.java" startline="225" startcolumn="3" endline="234" endcolumn="5">
hideInstalledCB.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent e)
			{
				InstallPanel.this.hideInstalled = hideInstalledCB.isSelected();
				updateModel();
			}
		});
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/IndentWidgetFactory.java" startline="62" startcolumn="4" endline="71" endcolumn="6">
indent.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{	
					Buffer buffer = view.getBuffer();
					buffer.toggleAutoIndent(view);
					update();
				}
			});
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="925" startcolumn="5" endline="935" endcolumn="5">
try
				{
					buffer.beginCompoundEdit();
					retVal = _replace(view,buffer,matcher,
						0,buffer.getLength(),
						smartCaseReplace);
				}
				finally
				{
					buffer.endCompoundEdit();
				}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="1414" startcolumn="3" endline="1423" endcolumn="3">
try
		{
			buffer.beginCompoundEdit();
			buffer.remove(0,buffer.getLength());
			buffer.insert(0,text);
		}
		finally
		{
			buffer.endCompoundEdit();
		}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/util/TaskManager.java" startline="189" startcolumn="4" endline="198" endcolumn="4">
while(countIoTasks() &gt; 0)
			{
				try
				{
					ioWaitLock.wait();
				} catch (InterruptedException e)
				{
					Log.log(Log.ERROR,this,e);
				}
			}
</source>
        <source file="org/gjt/sp/util/TaskManager.java" startline="187" startcolumn="3" endline="199" endcolumn="3">
synchronized (ioWaitLock)
		{
			while(countIoTasks() &gt; 0)
			{
				try
				{
					ioWaitLock.wait();
				} catch (InterruptedException e)
				{
					Log.log(Log.ERROR,this,e);
				}
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="792" startcolumn="7" endline="802" endcolumn="7">
label_4:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 jjtn000.addArrayDimension();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="966" startcolumn="7" endline="976" endcolumn="7">
label_5:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                        s.append("."+t.image);
      }
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2508" startcolumn="9" endline="2518" endcolumn="9">
label_20:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                           jjtn000.addUndefinedDimension();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="966" startcolumn="7" endline="976" endcolumn="7">
label_5:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                        s.append("."+t.image);
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2800" startcolumn="3" endline="2810" endcolumn="3">
if(newCaret == -1)
		{
			int start = getLineStartOffset(caretLine);
			if(caret == start)
			{
				getToolkit().beep();
				return;
			}
			else
				newCaret = start;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2503" startcolumn="3" endline="2513" endcolumn="3">
if(newCaret == -1)
		{
			int end = getLineEndOffset(caretLine) - 1;
			if(caret == end)
			{
				getToolkit().beep();
				return;
			}
			else
				newCaret = end;
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/tray/JTrayIconManager.java" startline="82" startcolumn="4" endline="91" endcolumn="4">
try
			{
				systemTray.add(trayIcon);
			}
			catch (AWTException e)
			{
				Log.log(Log.ERROR, JEditSwingTrayIcon.class, "Unable to add Tray icon", e);
				trayIcon = null;
				return;
			}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="3963" startcolumn="5" endline="3973" endcolumn="5">
try
				{
					SwingUtilities.updateComponentTreeUI(window);
				}
				catch(Exception e)
				{
					Log.log(Log.ERROR, jEdit.class,
						"Window " + iWindow
						+ ": " + window, e);
					break;
				}
</source>
    </clone>
    <clone nlines="15" distance="8">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="703" startcolumn="25" endline="717" endcolumn="25">
try
                        {
                            EventQueue.invokeAndWait(new Runnable()
                            {
                                    @Override
                                    public void run()
                                    {
                                            message(comp, name, args);
                                    }
                            });
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
    </clone>
    <clone nlines="15" distance="8">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="747" startcolumn="25" endline="761" endcolumn="25">
try
                        {
                                EventQueue.invokeAndWait(new Runnable()
                                {
                                        @Override
                                        public void run()
                                        {
                                                error(comp, name, args);
                                        }
                                });
                        }
                        catch (Exception e)
                        {
                                // ignored
                        }
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/bsh/BSHEnhancedForStatement.java" startline="82" startcolumn="21" endline="95" endcolumn="21">
switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHEnhancedForStatement.java" startline="80" startcolumn="17" endline="96" endcolumn="17">
if (ret instanceof ReturnControl)
                {
                    switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
                }
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/bsh/BSHEnhancedForStatement.java" startline="82" startcolumn="21" endline="95" endcolumn="21">
switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHForStatement.java" startline="113" startcolumn="17" endline="129" endcolumn="17">
if (ret instanceof ReturnControl)
                {
                    switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
                }
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/bsh/BSHForStatement.java" startline="115" startcolumn="21" endline="128" endcolumn="21">
switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHEnhancedForStatement.java" startline="80" startcolumn="17" endline="96" endcolumn="17">
if (ret instanceof ReturnControl)
                {
                    switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
                }
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/bsh/BSHForStatement.java" startline="115" startcolumn="21" endline="128" endcolumn="21">
switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHForStatement.java" startline="113" startcolumn="17" endline="129" endcolumn="17">
if (ret instanceof ReturnControl)
                {
                    switch(((ReturnControl)ret).kind)
                    {
                        case RETURN:
							returnControl = ret;
							breakout = true;
                            break;

                        case CONTINUE:
                            break;

                        case BREAK:
                            breakout = true;
                            break;
                    }
                }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/PluginJAR.java" startline="2076" startcolumn="4" endline="2085" endcolumn="4">
if(str == null)
			{
				dout.writeInt(0);
			}
			else
			{
				dout.writeInt(str.length);
				for (String s : str)
					writeString(dout, s);
			}
</source>
        <source file="org/gjt/sp/jedit/PluginJAR.java" startline="2092" startcolumn="4" endline="2101" endcolumn="4">
if(bools == null)
			{
				dout.writeInt(0);
			}
			else
			{
				dout.writeInt(bools.length);
				for (boolean bool : bools)
					dout.writeBoolean(bool);
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="87" startcolumn="5" endline="96" endcolumn="5">
if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="87" startcolumn="8" endline="96" endcolumn="8">
if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
</source>
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="935" startcolumn="3" endline="944" endcolumn="3">
if(SearchAndReplace.getBeanShellReplace())
		{
			replace.setModel("replace.script");
			beanShellReplace.setSelected(true);
		}
		else
		{
			replace.setModel("replace");
			stringReplace.setSelected(true);
		}
</source>
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="87" startcolumn="5" endline="96" endcolumn="5">
if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="85" startcolumn="4" endline="97" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="87" startcolumn="5" endline="96" endcolumn="5">
if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="89" startcolumn="4" endline="101" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="87" startcolumn="5" endline="96" endcolumn="5">
if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="85" startcolumn="7" endline="97" endcolumn="7">
if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="85" startcolumn="4" endline="97" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="89" startcolumn="4" endline="101" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="85" startcolumn="7" endline="97" endcolumn="7">
if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="87" startcolumn="8" endline="96" endcolumn="8">
if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="85" startcolumn="4" endline="97" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="87" startcolumn="8" endline="96" endcolumn="8">
if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="89" startcolumn="4" endline="101" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="87" startcolumn="8" endline="96" endcolumn="8">
if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="85" startcolumn="7" endline="97" endcolumn="7">
if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="935" startcolumn="3" endline="944" endcolumn="3">
if(SearchAndReplace.getBeanShellReplace())
		{
			replace.setModel("replace.script");
			beanShellReplace.setSelected(true);
		}
		else
		{
			replace.setModel("replace");
			stringReplace.setSelected(true);
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="85" startcolumn="4" endline="97" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="935" startcolumn="3" endline="944" endcolumn="3">
if(SearchAndReplace.getBeanShellReplace())
		{
			replace.setModel("replace.script");
			beanShellReplace.setSelected(true);
		}
		else
		{
			replace.setModel("replace");
			stringReplace.setSelected(true);
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="89" startcolumn="4" endline="101" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/search/SearchDialog.java" startline="935" startcolumn="3" endline="944" endcolumn="3">
if(SearchAndReplace.getBeanShellReplace())
		{
			replace.setModel("replace.script");
			beanShellReplace.setSelected(true);
		}
		else
		{
			replace.setModel("replace");
			stringReplace.setSelected(true);
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="85" startcolumn="7" endline="97" endcolumn="7">
if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="4387" startcolumn="5" endline="4396" endcolumn="5">
if(sortByName)
				{
					str11 = buffer.getName();
					str12 = buffer.getDirectory();
				}
				else
				{
					str11 = buffer.getDirectory();
					str12 = buffer.getName();
				}
</source>
        <source file="org/gjt/sp/jedit/options/BrowserColorsOptionPane.java" startline="388" startcolumn="4" endline="397" endcolumn="4">
if (isSelected)
			{
				setBackground(table.getSelectionBackground());
				setForeground(table.getSelectionForeground());
			}
			else
			{
				setBackground(table.getBackground());
				setForeground(table.getForeground());
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="4402" startcolumn="6" endline="4411" endcolumn="6">
if(sortByName)
					{
						str21 = _buffer.getName();
						str22 = _buffer.getDirectory();
					}
					else
					{
						str21 = _buffer.getDirectory();
						str22 = _buffer.getName();
					}
</source>
        <source file="org/gjt/sp/jedit/options/BrowserColorsOptionPane.java" startline="388" startcolumn="4" endline="397" endcolumn="4">
if (isSelected)
			{
				setBackground(table.getSelectionBackground());
				setForeground(table.getSelectionForeground());
			}
			else
			{
				setBackground(table.getBackground());
				setForeground(table.getForeground());
			}
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="331" startcolumn="3" endline="343" endcolumn="3">
try
		{
			readLock();

			if(offset &lt; 0 || offset &gt; getLength())
				throw new ArrayIndexOutOfBoundsException(offset);

			return lineMgr.getLineOfOffset(offset);
		}
		finally
		{
			readUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="1425" startcolumn="3" endline="1437" endcolumn="3">
try
		{
			readLock();

			if(offset &lt; 0 || offset &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(offset);

			return positionMgr.createPosition(offset);
		}
		finally
		{
			readUnlock();
		}
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="331" startcolumn="3" endline="343" endcolumn="3">
try
		{
			readLock();

			if(offset &lt; 0 || offset &gt; getLength())
				throw new ArrayIndexOutOfBoundsException(offset);

			return lineMgr.getLineOfOffset(offset);
		}
		finally
		{
			readUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="387" startcolumn="3" endline="399" endcolumn="3">
try
		{
			readLock();

			if(line &lt; 0 || line &gt;= lineMgr.getLineCount())
				throw new ArrayIndexOutOfBoundsException(line);

			return lineMgr.getLineEndOffset(line);
		}
		finally
		{
			readUnlock();
		}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="installer/CBZip2OutputStream.java" startline="1744" startcolumn="13" endline="1754" endcolumn="13">
for( i = 0; i &lt; 16; i++ )
            {
                if( inUse16[ i ] )
                {
                    bsW( 1, 1 );
                }
                else
                {
                    bsW( 1, 0 );
                }
            }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="1760" startcolumn="21" endline="1770" endcolumn="21">
for( j = 0; j &lt; 16; j++ )
                    {
                        if( m_inUse[ i * 16 + j ] )
                        {
                            bsW( 1, 1 );
                        }
                        else
                        {
                            bsW( 1, 0 );
                        }
                    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="132" startcolumn="8" endline="143" endcolumn="3">
for(;whitespace &lt; str.length();)
		{
			switch(str.charAt(whitespace))
			{
			case ' ':
			case '\t':
				whitespace++;
				break;
			default:
				break loop;
			}
		}
</source>
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="132" startcolumn="1" endline="143" endcolumn="3">
loop:		for(;whitespace &lt; str.length();)
		{
			switch(str.charAt(whitespace))
			{
			case ' ':
			case '\t':
				whitespace++;
				break;
			default:
				break loop;
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Capabilities.java" startline="115" startcolumn="3" endline="127" endcolumn="3">
if ( c == null ) {
			try {
				/*
					Note: do *not* change this to 
					BshClassManager plainClassForName() or equivalent.
					This class must not touch any other bsh classes.
				*/
				c = Class.forName( name );
			} catch ( ClassNotFoundException e ) { }

			if ( c != null )
				classes.put(c,"unused");
		}
</source>
        <source file="org/gjt/sp/jedit/bsh/classpath/ClassManagerImpl.java" startline="168" startcolumn="3" endline="181" endcolumn="3">
if ( overlayLoader != null )
		{
			try {
				c = overlayLoader.loadClass(name);
			} catch ( Exception e ) {
			// used to squeltch this... changed for 1.3
			// see BshClassManager
			} catch ( NoClassDefFoundError e2 ) {
				throw noClassDefFound( name, e2 );
			}

			// Should be there since it was explicitly mapped
			// throw an error?
		}
</source>
    </clone>
    <clone nlines="18" distance="8">
        <source file="org/gjt/sp/jedit/browser/VFSBrowser.java" startline="1646" startcolumn="4" endline="1663" endcolumn="4">
try
			{
				maybeReloadRequestRunning = true;

				browserView.maybeReloadDirectory(dir);
			}
			finally
			{
				// Do not change this until all VFS Browser tasks are
				// done in ThreadUtilities
				AwtRunnableQueue.INSTANCE.runAfterIoTasks(new Runnable()
				{
					public void run()
					{
						maybeReloadRequestRunning = false;
					}
				});
			}
</source>
        <source file="org/gjt/sp/jedit/browser/VFSBrowser.java" startline="1644" startcolumn="3" endline="1664" endcolumn="3">
if(path != null)
		{
			try
			{
				maybeReloadRequestRunning = true;

				browserView.maybeReloadDirectory(dir);
			}
			finally
			{
				// Do not change this until all VFS Browser tasks are
				// done in ThreadUtilities
				AwtRunnableQueue.INSTANCE.runAfterIoTasks(new Runnable()
				{
					public void run()
					{
						maybeReloadRequestRunning = false;
					}
				});
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2497" startcolumn="9" endline="2507" endcolumn="9">
while (true) {
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
                                        jjtn000.addDefinedDimension();
          if (jj_2_19(2)) {
            ;
          } else {
            break label_19;
          }
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2496" startcolumn="9" endline="2507" endcolumn="9">
label_19:
        while (true) {
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
                                        jjtn000.addDefinedDimension();
          if (jj_2_19(2)) {
            ;
          } else {
            break label_19;
          }
        }
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/gui/statusbar/IndentWidgetFactory.java" startline="62" startcolumn="4" endline="71" endcolumn="6">
indent.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{	
					Buffer buffer = view.getBuffer();
					buffer.toggleAutoIndent(view);
					update();
				}
			});
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="63" startcolumn="4" endline="72" endcolumn="6">
multiSelect.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent e)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleMultipleSelectionEnabled();
				}
			});
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/gui/statusbar/IndentWidgetFactory.java" startline="62" startcolumn="4" endline="71" endcolumn="6">
indent.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{	
					Buffer buffer = view.getBuffer();
					buffer.toggleAutoIndent(view);
					update();
				}
			});
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="66" startcolumn="4" endline="75" endcolumn="6">
overwrite.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleOverwriteEnabled();
				}
			});
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/gui/statusbar/IndentWidgetFactory.java" startline="62" startcolumn="4" endline="71" endcolumn="6">
indent.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{	
					Buffer buffer = view.getBuffer();
					buffer.toggleAutoIndent(view);
					update();
				}
			});
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="65" startcolumn="7" endline="74" endcolumn="9">
rectSelect.addMouseListener(new MouseAdapter()
		    {
			    @Override
			    public void mouseClicked(MouseEvent evt)
			    {
				    JEditTextArea textArea = view.getTextArea();
				    if (textArea != null)
				    	textArea.toggleRectangularSelectionEnabled();
			    }
		    });
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/io/EncodingWithBOM.java" startline="122" startcolumn="5" endline="133" endcolumn="5">
if (mark[0] == low &amp;&amp; mark[1] == high)
				{
					return "x-UTF-16LE-BOM";
				}
				else if (mark[0] == high &amp;&amp; mark[1] == low)
				{
					// "x-UTF-16BE-BOM" does not available.
					// But an encoder for "UTF-16" actually uses
					// big endian with corresponding BOM. It just
					// works as "UTF-16BE with BOM".
					return "UTF-16";
				}
</source>
        <source file="org/gjt/sp/jedit/io/EncodingWithBOM.java" startline="120" startcolumn="4" endline="134" endcolumn="4">
if (count &gt;= 2)
			{
				if (mark[0] == low &amp;&amp; mark[1] == high)
				{
					return "x-UTF-16LE-BOM";
				}
				else if (mark[0] == high &amp;&amp; mark[1] == low)
				{
					// "x-UTF-16BE-BOM" does not available.
					// But an encoder for "UTF-16" actually uses
					// big endian with corresponding BOM. It just
					// works as "UTF-16BE with BOM".
					return "UTF-16";
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="3219" startcolumn="3" endline="3228" endcolumn="3">
if(select || s == null)
		{
			line = caretLine;
			offset = caret - getLineStartOffset(line);
		}
		else
		{
			line = s.endLine;
			offset = s.end - getLineStartOffset(line);
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="3179" startcolumn="3" endline="3188" endcolumn="3">
if(select || s == null)
		{
			line = caretLine;
			offset = caret - buffer.getLineStartOffset(line);
		}
		else
		{
			line = s.startLine;
			offset = s.start - buffer.getLineStartOffset(line);
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/browser/RenameBrowserTask.java" startline="77" startcolumn="6" endline="89" endcolumn="6">
if ((OperatingSystem.isCaseInsensitiveFS())
							&amp;&amp; path.equalsIgnoreCase(path2))
					{
						// allow user to change name
						// case
					}
					else
					{
						VFSManager.error(browser, path,
								"ioerror.rename-exists",
								new String[]{path2});
						return;
					}
</source>
        <source file="org/gjt/sp/jedit/browser/RenameBrowserTask.java" startline="75" startcolumn="5" endline="90" endcolumn="5">
if (file != null)
				{
					if ((OperatingSystem.isCaseInsensitiveFS())
							&amp;&amp; path.equalsIgnoreCase(path2))
					{
						// allow user to change name
						// case
					}
					else
					{
						VFSManager.error(browser, path,
								"ioerror.rename-exists",
								new String[]{path2});
						return;
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="1425" startcolumn="3" endline="1437" endcolumn="3">
try
		{
			readLock();

			if(offset &lt; 0 || offset &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(offset);

			return positionMgr.createPosition(offset);
		}
		finally
		{
			readUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="387" startcolumn="3" endline="399" endcolumn="3">
try
		{
			readLock();

			if(line &lt; 0 || line &gt;= lineMgr.getLineCount())
				throw new ArrayIndexOutOfBoundsException(line);

			return lineMgr.getLineEndOffset(line);
		}
		finally
		{
			readUnlock();
		}
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="676" startcolumn="9" endline="686" endcolumn="9">
while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2415" startcolumn="5" endline="2425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3248" startcolumn="7" endline="3258" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3294" startcolumn="7" endline="3304" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="676" startcolumn="9" endline="686" endcolumn="9">
while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2415" startcolumn="5" endline="2425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3248" startcolumn="7" endline="3258" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3294" startcolumn="7" endline="3304" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="676" startcolumn="9" endline="686" endcolumn="9">
while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="675" startcolumn="9" endline="686" endcolumn="9">
label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="676" startcolumn="9" endline="686" endcolumn="9">
while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2414" startcolumn="5" endline="2425" endcolumn="5">
label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="676" startcolumn="9" endline="686" endcolumn="9">
while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3247" startcolumn="7" endline="3258" endcolumn="7">
label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="676" startcolumn="9" endline="686" endcolumn="9">
while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3293" startcolumn="7" endline="3304" endcolumn="7">
label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2415" startcolumn="5" endline="2425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="675" startcolumn="9" endline="686" endcolumn="9">
label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2415" startcolumn="5" endline="2425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2414" startcolumn="5" endline="2425" endcolumn="5">
label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2415" startcolumn="5" endline="2425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3247" startcolumn="7" endline="3258" endcolumn="7">
label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2415" startcolumn="5" endline="2425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3293" startcolumn="7" endline="3304" endcolumn="7">
label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3248" startcolumn="7" endline="3258" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="675" startcolumn="9" endline="686" endcolumn="9">
label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3248" startcolumn="7" endline="3258" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2414" startcolumn="5" endline="2425" endcolumn="5">
label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3248" startcolumn="7" endline="3258" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3247" startcolumn="7" endline="3258" endcolumn="7">
label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3248" startcolumn="7" endline="3258" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3293" startcolumn="7" endline="3304" endcolumn="7">
label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3294" startcolumn="7" endline="3304" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="675" startcolumn="9" endline="686" endcolumn="9">
label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3294" startcolumn="7" endline="3304" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2414" startcolumn="5" endline="2425" endcolumn="5">
label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3294" startcolumn="7" endline="3304" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3247" startcolumn="7" endline="3258" endcolumn="7">
label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3294" startcolumn="7" endline="3304" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3293" startcolumn="7" endline="3304" endcolumn="7">
label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
    </clone>
    <clone nlines="12" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1528" startcolumn="7" endline="1539" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case LSHIFTX:
      case RSIGNEDSHIFT:
      case RSIGNEDSHIFTX:
      case RUNSIGNEDSHIFT:
      case RUNSIGNEDSHIFTX:
        ;
        break;
      default:
        break label_14;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1461" startcolumn="7" endline="1474" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GTX:
      case LT:
      case LTX:
      case LE:
      case LEX:
      case GE:
      case GEX:
        ;
        break;
      default:
        break label_13;
      }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="63" startcolumn="4" endline="72" endcolumn="6">
multiSelect.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent e)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleMultipleSelectionEnabled();
				}
			});
</source>
        <source file="org/gjt/sp/jedit/bufferset/BufferSetManager.java" startline="116" startcolumn="5" endline="127" endcolumn="7">
jEdit.visit(new JEditVisitorAdapter()
				{
					@Override
					public void visit(EditPane editPane)
					{
						BufferSet bufferSet = editPane.getBufferSet();
						for (Buffer buffer : buffers)
						{
							bufferSet.addBuffer(buffer);
						}
					}
				});
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="66" startcolumn="4" endline="75" endcolumn="6">
overwrite.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleOverwriteEnabled();
				}
			});
</source>
        <source file="org/gjt/sp/jedit/bufferset/BufferSetManager.java" startline="116" startcolumn="5" endline="127" endcolumn="7">
jEdit.visit(new JEditVisitorAdapter()
				{
					@Override
					public void visit(EditPane editPane)
					{
						BufferSet bufferSet = editPane.getBufferSet();
						for (Buffer buffer : buffers)
						{
							bufferSet.addBuffer(buffer);
						}
					}
				});
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="65" startcolumn="7" endline="74" endcolumn="9">
rectSelect.addMouseListener(new MouseAdapter()
		    {
			    @Override
			    public void mouseClicked(MouseEvent evt)
			    {
				    JEditTextArea textArea = view.getTextArea();
				    if (textArea != null)
				    	textArea.toggleRectangularSelectionEnabled();
			    }
		    });
</source>
        <source file="org/gjt/sp/jedit/bufferset/BufferSetManager.java" startline="116" startcolumn="5" endline="127" endcolumn="7">
jEdit.visit(new JEditVisitorAdapter()
				{
					@Override
					public void visit(EditPane editPane)
					{
						BufferSet bufferSet = editPane.getBufferSet();
						for (Buffer buffer : buffers)
						{
							bufferSet.addBuffer(buffer);
						}
					}
				});
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/textarea/FirstLine.java" startline="307" startcolumn="4" endline="316" endcolumn="4">
if(nextPhysicalLine == -1)
				break;
			else if(nextPhysicalLine &gt; currentPhysicalLine + amount)
				break;
			else
			{
				scrollLines += getDisplayManager().getScreenLineCount(currentPhysicalLine);
				amount -= nextPhysicalLine - currentPhysicalLine;
				currentPhysicalLine = nextPhysicalLine;
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/FirstLine.java" startline="365" startcolumn="4" endline="374" endcolumn="4">
if(prevPhysicalLine == -1)
				break;
			else if(prevPhysicalLine &lt; currentPhysicalLine - amount)
				break;
			else
			{
				scrollLines -= getDisplayManager().getScreenLineCount(prevPhysicalLine);
				amount -= currentPhysicalLine - prevPhysicalLine;
				currentPhysicalLine = prevPhysicalLine;
			}
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="6711" startcolumn="5" endline="6720" endcolumn="5">
if(e.isShiftDown())
				{
					_setHorizontalOffset(getHorizontalOffset()
						+ (-charWidth * e.getUnitsToScroll()));
				}
				else
				{
					setFirstLine(getFirstLine()
						+ e.getUnitsToScroll());
				}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="6724" startcolumn="5" endline="6733" endcolumn="5">
if(e.isShiftDown())
				{
					_setHorizontalOffset(getHorizontalOffset()
						+ (-charWidth * e.getWheelRotation()));
				}
				else
				{
					setFirstLine(getFirstLine()
						+ 3 * e.getWheelRotation());
				}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/bufferio/BufferAutosaveRequest.java" startline="110" startcolumn="4" endline="119" endcolumn="4">
try
			{
				out.close();
				out = null;
				vfs._delete(session,path,view);
			}
			catch(IOException ioe)
			{
				Log.log(Log.ERROR,this,ioe);
			}
</source>
        <source file="org/gjt/sp/jedit/bufferio/BufferAutosaveRequest.java" startline="108" startcolumn="3" endline="120" endcolumn="3">
if(out != null)
		{
			try
			{
				out.close();
				out = null;
				vfs._delete(session,path,view);
			}
			catch(IOException ioe)
			{
				Log.log(Log.ERROR,this,ioe);
			}
		}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/BeanShellFacade.java" startline="115" startcolumn="3" endline="124" endcolumn="3">
try
		{
			return _eval(param,namespace,command);
		}
		catch(Throwable e)
		{
			Log.log(Log.ERROR,BeanShellFacade.class,e);

			handleException(param,null,e);
		}
</source>
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="215" startcolumn="3" endline="224" endcolumn="3">
try
		{
			_runScript(view,path,in,ownNamespace);
		}
		catch(Throwable e)
		{
			Log.log(Log.ERROR,BeanShell.class,e);

			bsh.handleException(view,path,e);
		}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/BeanShellFacade.java" startline="115" startcolumn="3" endline="124" endcolumn="3">
try
		{
			return _eval(param,namespace,command);
		}
		catch(Throwable e)
		{
			Log.log(Log.ERROR,BeanShellFacade.class,e);

			handleException(param,null,e);
		}
</source>
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="250" startcolumn="3" endline="259" endcolumn="3">
try
		{
			_runScript(view,path,in,namespace);
		}
		catch(Throwable e)
		{
			Log.log(Log.ERROR,BeanShell.class,e);

			bsh.handleException(view,path,e);
		}
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2019" startcolumn="7" endline="2030" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case LBRACKET:
        case DOT:
          ;
          break;
        default:
          break label_17;
        }
        PrimarySuffix();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2018" startcolumn="7" endline="2030" endcolumn="7">
label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case LBRACKET:
        case DOT:
          ;
          break;
        default:
          break label_17;
        }
        PrimarySuffix();
      }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="675" startcolumn="9" endline="686" endcolumn="9">
label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2414" startcolumn="5" endline="2425" endcolumn="5">
label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3247" startcolumn="7" endline="3258" endcolumn="7">
label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3293" startcolumn="7" endline="3304" endcolumn="7">
label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="675" startcolumn="9" endline="686" endcolumn="9">
label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2414" startcolumn="5" endline="2425" endcolumn="5">
label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      Expression();
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3247" startcolumn="7" endline="3258" endcolumn="7">
label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3293" startcolumn="7" endline="3304" endcolumn="7">
label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="installer/CBZip2OutputStream.java" startline="1300" startcolumn="21" endline="1309" endcolumn="21">
if( n == 0 )
                    {
                        int temp = 0;
                        temp = m_zptr[ unLo ];
                        m_zptr[ unLo ] = m_zptr[ ltLo ];
                        m_zptr[ ltLo ] = temp;
                        ltLo++;
                        unLo++;
                        continue;
                    }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="1324" startcolumn="21" endline="1333" endcolumn="21">
if( n == 0 )
                    {
                        int temp = 0;
                        temp = m_zptr[ unHi ];
                        m_zptr[ unHi ] = m_zptr[ gtHi ];
                        m_zptr[ gtHi ] = temp;
                        gtHi--;
                        unHi--;
                        continue;
                    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3785" startcolumn="5" endline="3794" endcolumn="5">
if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4030" startcolumn="5" endline="4039" endcolumn="5">
if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4376" startcolumn="5" endline="4385" endcolumn="5">
if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4652" startcolumn="5" endline="4661" endcolumn="5">
if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4814" startcolumn="5" endline="4823" endcolumn="5">
if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4970" startcolumn="5" endline="4979" endcolumn="5">
if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5440" startcolumn="5" endline="5449" endcolumn="5">
if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3785" startcolumn="5" endline="3794" endcolumn="5">
if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3785" startcolumn="5" endline="3794" endcolumn="5">
if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3785" startcolumn="5" endline="3794" endcolumn="5">
if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3785" startcolumn="5" endline="3794" endcolumn="5">
if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4030" startcolumn="5" endline="4039" endcolumn="5">
if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4030" startcolumn="5" endline="4039" endcolumn="5">
if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4030" startcolumn="5" endline="4039" endcolumn="5">
if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4030" startcolumn="5" endline="4039" endcolumn="5">
if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4376" startcolumn="5" endline="4385" endcolumn="5">
if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4376" startcolumn="5" endline="4385" endcolumn="5">
if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4376" startcolumn="5" endline="4385" endcolumn="5">
if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4376" startcolumn="5" endline="4385" endcolumn="5">
if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4652" startcolumn="5" endline="4661" endcolumn="5">
if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4652" startcolumn="5" endline="4661" endcolumn="5">
if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4652" startcolumn="5" endline="4661" endcolumn="5">
if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4652" startcolumn="5" endline="4661" endcolumn="5">
if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4814" startcolumn="5" endline="4823" endcolumn="5">
if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4814" startcolumn="5" endline="4823" endcolumn="5">
if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4814" startcolumn="5" endline="4823" endcolumn="5">
if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4814" startcolumn="5" endline="4823" endcolumn="5">
if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4970" startcolumn="5" endline="4979" endcolumn="5">
if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4970" startcolumn="5" endline="4979" endcolumn="5">
if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4970" startcolumn="5" endline="4979" endcolumn="5">
if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4970" startcolumn="5" endline="4979" endcolumn="5">
if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5440" startcolumn="5" endline="5449" endcolumn="5">
if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5440" startcolumn="5" endline="5449" endcolumn="5">
if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5440" startcolumn="5" endline="5449" endcolumn="5">
if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5440" startcolumn="5" endline="5449" endcolumn="5">
if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1985" startcolumn="5" endline="1994" endcolumn="5">
try
				{
					vfs._endVFSSession(session,view);
				}
				catch(IOException io)
				{
					VFSManager.error(view,path,"ioerror",
						new String[] { io.toString() });
					return false;
				}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="592" startcolumn="4" endline="602" endcolumn="4">
try
			{
				vfs._endVFSSession(session,view);
			}
			catch(IOException io)
			{
				VFSManager.error(view,newPath,"ioerror",
					new String[] { io.toString() });
				setPerformingIO(false);
				return false;
			}
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="2031" startcolumn="5" endline="2040" endcolumn="5">
try
				{
					vfs._endVFSSession(session,view);
				}
				catch(IOException io)
				{
					VFSManager.error(view,path,"ioerror",
						new String[] { io.toString() });
					return false;
				}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="592" startcolumn="4" endline="602" endcolumn="4">
try
			{
				vfs._endVFSSession(session,view);
			}
			catch(IOException io)
			{
				VFSManager.error(view,newPath,"ioerror",
					new String[] { io.toString() });
				setPerformingIO(false);
				return false;
			}
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/jedit/syntax/DisplayTokenHandler.java" startline="662" startcolumn="5" endline="673" endcolumn="5">
while (afterQuote &lt; endIndex)
				{
					char c = charAt(text, afterQuote);
					if (Character.isWhitespace(c))
						return true;
					if (Character.isLetterOrDigit(c))
						return false;
					// Look farther in case where the
					// closing quote is enclosed by
					// something like a closing parenthesis.
					++afterQuote;
				}
</source>
        <source file="org/gjt/sp/jedit/syntax/DisplayTokenHandler.java" startline="643" startcolumn="5" endline="654" endcolumn="5">
while (beforeQuote &gt;= beginIndex)
				{
					char c = charAt(text, beforeQuote);
					if (Character.isWhitespace(c))
						return true;
					if (Character.isLetterOrDigit(c))
						return false;
					// Look farther in case where the
					// opening quote is enclosed by
					// something like a opening parenthesis.
					--beforeQuote;
				}
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="967" startcolumn="7" endline="976" endcolumn="7">
while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                        s.append("."+t.image);
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="966" startcolumn="7" endline="976" endcolumn="7">
label_5:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                        s.append("."+t.image);
      }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2589" startcolumn="5" endline="2602" endcolumn="5">
switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineStartOffset(i);
						break loop;
					}
					else
						continue loop;
				}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2884" startcolumn="5" endline="2897" endcolumn="5">
switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineEndOffset(i) - 1;
						break loop;
					}
					else
						continue loop;
				}
</source>
    </clone>
    <clone nlines="17" distance="8">
        <source file="org/gjt/sp/jedit/input/TextAreaInputHandler.java" startline="252" startcolumn="4" endline="268" endcolumn="4">
if(input != '\0')
			{
				if (!dryRun)
				{
					setCurrentBindings(bindings);
					invokeReadNextChar(input);
					repeatCount = 1;
				}
				return true;
			}
			else
			{
				if (!dryRun)
				{
					readNextChar = null;
				}
			}
</source>
        <source file="org/gjt/sp/jedit/input/TextAreaInputHandler.java" startline="250" startcolumn="3" endline="269" endcolumn="3">
if(readNextChar != null)
		{
			if(input != '\0')
			{
				if (!dryRun)
				{
					setCurrentBindings(bindings);
					invokeReadNextChar(input);
					repeatCount = 1;
				}
				return true;
			}
			else
			{
				if (!dryRun)
				{
					readNextChar = null;
				}
			}
		}
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="installer/CBZip2OutputStream.java" startline="467" startcolumn="9" endline="480" endcolumn="9">
while( m_bsLive &gt; 0 )
        {
            int ch = ( m_bsBuff &gt;&gt; 24 );
            try
            {
                m_bsStream.write( ch );// write 8-bit
            }
            catch( IOException e )
            {
                throw e;
            }
            m_bsBuff &lt;&lt;= 8;
            m_bsLive -= 8;
        }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="514" startcolumn="9" endline="527" endcolumn="9">
while( m_bsLive &gt;= 8 )
        {
            int ch = ( m_bsBuff &gt;&gt; 24 );
            try
            {
                m_bsStream.write( ch );// write 8-bit
            }
            catch( IOException e )
            {
                throw e;
            }
            m_bsBuff &lt;&lt;= 8;
            m_bsLive -= 8;
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="994" startcolumn="5" endline="1005" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="993" startcolumn="5" endline="1005" endcolumn="5">
label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      AmbiguousName();
                                                       ++count;
    }
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="org/gjt/sp/jedit/gui/InputHandler.java" startline="191" startcolumn="4" endline="201" endcolumn="4">
if(evt.getID() == KeyEvent.KEY_PRESSED)
			{
				switch(evt.getKeyCode())
				{
				case KeyEvent.VK_ENTER:
				case KeyEvent.VK_TAB:
				case KeyEvent.VK_BACK_SPACE:
				case KeyEvent.VK_SPACE:
					return null;
				}
			}
</source>
        <source file="org/gjt/sp/jedit/gui/InputHandler.java" startline="187" startcolumn="3" endline="202" endcolumn="3">
if(focusOwner instanceof JTextComponent)
		{
			// fix for the bug where key events in JTextComponents
			// inside views are also handled by the input handler
			if(evt.getID() == KeyEvent.KEY_PRESSED)
			{
				switch(evt.getKeyCode())
				{
				case KeyEvent.VK_ENTER:
				case KeyEvent.VK_TAB:
				case KeyEvent.VK_BACK_SPACE:
				case KeyEvent.VK_SPACE:
					return null;
				}
			}
		}
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/gjt/sp/jedit/TextUtilities.java" startline="637" startcolumn="10" endline="650" endcolumn="14">
if(Character.isLetterOrDigit(ch) ||
					noWordSep.indexOf(ch) != -1)
				{
					break;
				}
				// whitespace; include in word if eating
				else if(Character.isWhitespace(ch)
					&amp;&amp; eatWhitespace)
				{
					type = WHITESPACE;
					break;
				}
				else
					return i;
</source>
        <source file="org/gjt/sp/jedit/TextUtilities.java" startline="451" startcolumn="10" endline="464" endcolumn="18">
if(Character.isLetterOrDigit(ch) ||
					noWordSep.indexOf(ch) != -1)
				{
					break;
				}
				// whitespace; include in word if eating, but not if only eating after word
				else if(Character.isWhitespace(ch)
					&amp;&amp; eatWhitespace &amp;&amp; !eatOnlyAfterWord)
				{
					type = WHITESPACE;
					break;
				}
				else
					return i + 1;
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4085" startcolumn="5" endline="4094" endcolumn="5">
if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5186" startcolumn="5" endline="5195" endcolumn="5">
if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5507" startcolumn="5" endline="5516" endcolumn="5">
if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5225" startcolumn="5" endline="5234" endcolumn="5">
if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5560" startcolumn="5" endline="5569" endcolumn="5">
if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
</source>
    </clone>
    <clone nlines="15" distance="7">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="7">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="7">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/Macros.java" startline="255" startcolumn="3" endline="269" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, prompt, defaultValue);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="16" distance="8">
        <source file="org/gjt/sp/jedit/gui/DockableLayout.java" startline="384" startcolumn="4" endline="399" endcolumn="30">
center.setBounds(
				leftButtonWidth + leftWidth,
				topButtonHeight + topHeight
				+ _topToolbars.height,
				size.width
				- leftWidth
				- rightWidth
				- leftButtonWidth
				- rightButtonWidth,
				size.height
				- topHeight
				- topButtonHeight
				- bottomHeight
				- bottomButtonHeight
				- _topToolbars.height
				- _bottomToolbars.height);
</source>
        <source file="org/gjt/sp/jedit/gui/DockableLayout.java" startline="382" startcolumn="3" endline="400" endcolumn="3">
if(center != null)
		{
			center.setBounds(
				leftButtonWidth + leftWidth,
				topButtonHeight + topHeight
				+ _topToolbars.height,
				size.width
				- leftWidth
				- rightWidth
				- leftButtonWidth
				- rightButtonWidth,
				size.height
				- topHeight
				- topButtonHeight
				- bottomHeight
				- bottomButtonHeight
				- _topToolbars.height
				- _bottomToolbars.height);
		}
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="85" startcolumn="4" endline="97" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="89" startcolumn="4" endline="101" endcolumn="4">
if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="org/gjt/sp/jedit/options/AppearanceOptionPane.java" startline="249" startcolumn="3" endline="259" endcolumn="3">
if(className.equals("javax.swing.plaf.metal.MetalLookAndFeel")
			|| className.equals("com.incors.plaf.kunststoff.KunststoffLookAndFeel"))
		{
			primaryFont.setEnabled(true);
			secondaryFont.setEnabled(true);
		}
		else
		{
			primaryFont.setEnabled(false);
			secondaryFont.setEnabled(false);
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="85" startcolumn="7" endline="97" endcolumn="7">
if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="org/gjt/sp/jedit/JEditRegisterSaver.java" startline="63" startcolumn="3" endline="75" endcolumn="3">
try
		{
			Registers.setLoading(true);
			registersXML.load(handler);
		}
		catch (IOException ioe)
		{
			Log.log(Log.ERROR, Registers.class, ioe);
		}
		finally
		{
			Registers.setLoading(false);
		}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="2878" startcolumn="4" endline="2890" endcolumn="4">
try
			{
				out = new FileOutputStream(file1);
				propMgr.saveUserProps(out);
			}
			catch(IOException io)
			{
				Log.log(Log.ERROR,jEdit.class,io);
			}
			finally
			{
				IOUtilities.closeQuietly((Closeable)out);
			}
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="156" startcolumn="8" endline="167" endcolumn="3">
for(int i = str.length() - 1; i &gt;= 0; i--)
		{
			switch(str.charAt(i))
			{
				case ' ':
				case '\t':
					whitespace++;
					break;
				default:
					break loop;
			}
		}
</source>
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="156" startcolumn="1" endline="167" endcolumn="3">
loop:		for(int i = str.length() - 1; i &gt;= 0; i--)
		{
			switch(str.charAt(i))
			{
				case ' ':
				case '\t':
					whitespace++;
					break;
				default:
					break loop;
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="822" startcolumn="3" endline="836" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = input(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="871" startcolumn="3" endline="885" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = inputProperty(comp, name, args, def);
				}
			});
		}
		catch (Exception e)
		{
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="295" startcolumn="3" endline="309" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2523" startcolumn="11" endline="2534" endcolumn="11">
while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
              jjtn000.addUndefinedDimension();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              break label_21;
            }
          }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2522" startcolumn="11" endline="2534" endcolumn="11">
label_21:
          while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
              jjtn000.addUndefinedDimension();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              break label_21;
            }
          }
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="248" startcolumn="7" endline="259" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case INTERFACE:
        jj_consume_token(INTERFACE);
                                  jjtn000.isInterface=true;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1194" startcolumn="7" endline="1204" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1237" startcolumn="7" endline="1247" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1280" startcolumn="7" endline="1290" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1355" startcolumn="7" endline="1365" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1398" startcolumn="7" endline="1408" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1595" startcolumn="7" endline="1605" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1677" startcolumn="7" endline="1687" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1787" startcolumn="7" endline="1797" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        t = jj_consume_token(TILDE);
        break;
      case BANG:
        t = jj_consume_token(BANG);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="352" startcolumn="7" endline="362" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1907" startcolumn="7" endline="1917" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        t = jj_consume_token(INCR);
        break;
      case DECR:
        t = jj_consume_token(DECR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="org/gjt/sp/jedit/PluginJAR.java" startline="1630" startcolumn="5" endline="1642" endcolumn="5">
if (!continueLoading(className, cache.cachedProperties))
				{
					return null;
				}
				else
				{
					EditPlugin otherPlugin = jEdit.getPlugin(className);
					if (otherPlugin != null)
					{
						jEdit.removePluginJAR(otherPlugin.getPluginJAR(), false);
//						otherPlugin.getPluginJAR().uninit(false);
					}
				}
</source>
        <source file="org/gjt/sp/jedit/PluginJAR.java" startline="1389" startcolumn="4" endline="1398" endcolumn="4">
if (!continueLoading(cache.pluginClass, cache.cachedProperties))
			{
				return false;
			}
			else
			{
				EditPlugin otherPlugin = jEdit.getPlugin(cache.pluginClass);
				if (otherPlugin != null)
					jEdit.removePluginJAR(otherPlugin.getPluginJAR(), false);
			}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/EditPane.java" startline="193" startcolumn="4" endline="205" endcolumn="6">
SwingUtilities.invokeLater(new Runnable()
			{
				public void run()
				{
					// only do this if we are the current edit pane
					if(view.getEditPane() == EditPane.this
						&amp;&amp; (bufferSwitcher == null
						|| !bufferSwitcher.isPopupVisible()))
					{
						textArea.requestFocus();
					}
				}
			});
</source>
        <source file="org/gjt/sp/jedit/EditPane.java" startline="191" startcolumn="3" endline="206" endcolumn="3">
if (requestFocus)
		{
			SwingUtilities.invokeLater(new Runnable()
			{
				public void run()
				{
					// only do this if we are the current edit pane
					if(view.getEditPane() == EditPane.this
						&amp;&amp; (bufferSwitcher == null
						|| !bufferSwitcher.isPopupVisible()))
					{
						textArea.requestFocus();
					}
				}
			});
		}
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="431" startcolumn="5" endline="440" endcolumn="5">
if(pane.equals(name)
					|| name == null)
				{
					path.add(pane);
					TreePath treePath = new TreePath(
						path.toArray());
					paneTree.scrollPathToVisible(treePath);
					paneTree.setSelectionPath(treePath);
					return true;
				}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="417" startcolumn="5" endline="426" endcolumn="5">
if(pane.getName().equals(name)
					|| name == null)
				{
					path.add(pane);
					TreePath treePath = new TreePath(
						path.toArray());
					paneTree.scrollPathToVisible(treePath);
					paneTree.setSelectionPath(treePath);
					return true;
				}
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1210" startcolumn="7" endline="1220" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1253" startcolumn="7" endline="1263" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1296" startcolumn="7" endline="1306" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1328" startcolumn="7" endline="1338" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1371" startcolumn="7" endline="1381" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1414" startcolumn="7" endline="1424" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1439" startcolumn="7" endline="1449" endcolumn="7">
try {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
                              jjtreeCloseNodeScope(jjtn001);
                              jjtn001.kind = t.kind;
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtreeCloseNodeScope(jjtn001);
                              }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1509" startcolumn="7" endline="1519" endcolumn="7">
try {
    jjtree.closeNodeScope(jjtn001,  2);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.kind = t.kind;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1568" startcolumn="7" endline="1578" endcolumn="7">
try {
    jjtree.closeNodeScope(jjtn001,  2);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.kind = t.kind;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1611" startcolumn="7" endline="1621" endcolumn="7">
try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1658" startcolumn="7" endline="1668" endcolumn="7">
try {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                      jjtreeCloseNodeScope(jjtn001);
                      jjtn001.kind = t.kind;
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtreeCloseNodeScope(jjtn001);
                      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1693" startcolumn="7" endline="1703" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1748" startcolumn="5" endline="1758" endcolumn="5">
try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1769" startcolumn="5" endline="1779" endcolumn="5">
try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1803" startcolumn="7" endline="1813" endcolumn="7">
try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1922" startcolumn="7" endline="1932" endcolumn="7">
try {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                                jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind; jjtn001.postfix = true;
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                  jjtreeCloseNodeScope(jjtn001);
                                }
      }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
    </clone>
    <clone nlines="15" distance="7">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="15" distance="7">
        <source file="org/gjt/sp/jedit/Macros.java" startline="338" startcolumn="3" endline="352" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, prompt, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/textarea/Gutter.java" startline="778" startcolumn="5" endline="790" endcolumn="5">
if(match.startLine &gt; textArea.getLastPhysicalLine())
					structScreenLine = Integer.MAX_VALUE;
				else if(textArea.displayManager.isLineVisible(
						match.startLine))
				{
					structScreenLine = textArea
						.getScreenLineOfOffset(
						match.start);
				}
				else
				{
					structScreenLine = -1;
				}
</source>
        <source file="org/gjt/sp/jedit/textarea/Gutter.java" startline="763" startcolumn="5" endline="775" endcolumn="5">
if(caretLine &gt; textArea.getLastPhysicalLine())
					caretScreenLine = Integer.MAX_VALUE;
				else if(textArea.displayManager.isLineVisible(
						textArea.getCaretLine()))
				{
					caretScreenLine = textArea
						.getScreenLineOfOffset(
						textArea.getCaretPosition());
				}
				else
				{
					caretScreenLine = -1;
				}
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5221" startcolumn="4" endline="5232" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.narrowActive(this);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5373" startcolumn="4" endline="5383" endcolumn="4">
if(listeners[i] == CaretListener.class)
			{
				try
				{
					((CaretListener)listeners[i+1]).caretUpdate(caretEvent);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5221" startcolumn="4" endline="5232" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.narrowActive(this);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5416" startcolumn="4" endline="5427" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.statusChanged(this,flag,value);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5221" startcolumn="4" endline="5232" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.narrowActive(this);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5437" startcolumn="4" endline="5448" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.bracketSelected(this,line,text);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5373" startcolumn="4" endline="5383" endcolumn="4">
if(listeners[i] == CaretListener.class)
			{
				try
				{
					((CaretListener)listeners[i+1]).caretUpdate(caretEvent);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5416" startcolumn="4" endline="5427" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.statusChanged(this,flag,value);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5373" startcolumn="4" endline="5383" endcolumn="4">
if(listeners[i] == CaretListener.class)
			{
				try
				{
					((CaretListener)listeners[i+1]).caretUpdate(caretEvent);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5437" startcolumn="4" endline="5448" endcolumn="4">
if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.bracketSelected(this,line,text);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="2878" startcolumn="4" endline="2890" endcolumn="4">
try
			{
				out = new FileOutputStream(file1);
				propMgr.saveUserProps(out);
			}
			catch(IOException io)
			{
				Log.log(Log.ERROR,jEdit.class,io);
			}
			finally
			{
				IOUtilities.closeQuietly((Closeable)out);
			}
</source>
        <source file="org/jedit/keymap/KeymapImpl.java" startline="72" startcolumn="3" endline="84" endcolumn="3">
try
		{
			in = new BufferedInputStream(new FileInputStream(file));
			props.load(in);
		}
		catch (IOException e)
		{
			Log.log(Log.ERROR, this, "Unable to load properties", e);
		}
		finally
		{
			IOUtilities.closeQuietly((Closeable)in);
		}
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="2223" startcolumn="4" endline="2236" endcolumn="4">
try
			{
				// e.g., convert the string "PERIOD" to the int KeyEvent.VK_PERIOD
				int keyCode = KeyEvent.class.getField("VK_".concat(key)).getInt(null);

				// And then convert KeyEvent.VK_PERIOD to the string "."
				text = KeyEvent.getKeyText(keyCode).toUpperCase();
			}
			catch(Exception e)
			{
				// This is probably an error, but it will be logged in
				// KeyEventTranslator.parseKey anyway, so just ignore it here.
				text = key.toUpperCase();
			}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="2219" startcolumn="3" endline="2237" endcolumn="3">
if (text == null)
		{
			// Everything else: periods, commas, etc. should be shown as the actual
			// character
			try
			{
				// e.g., convert the string "PERIOD" to the int KeyEvent.VK_PERIOD
				int keyCode = KeyEvent.class.getField("VK_".concat(key)).getInt(null);

				// And then convert KeyEvent.VK_PERIOD to the string "."
				text = KeyEvent.getKeyText(keyCode).toUpperCase();
			}
			catch(Exception e)
			{
				// This is probably an error, but it will be logged in
				// KeyEventTranslator.parseKey anyway, so just ignore it here.
				text = key.toUpperCase();
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="installer/CBZip2InputStream.java" startline="708" startcolumn="9" endline="718" endcolumn="9">
for( int i = minLen; i &lt;= maxLen; i++ )
        {
            for( int j = 0; j &lt; alphaSize; j++ )
            {
                if( length[ j ] == i )
                {
                    perm[ pp ] = j;
                    pp++;
                }
            }
        }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="918" startcolumn="9" endline="930" endcolumn="9">
for( n = minLen; n &lt;= maxLen; n++ )
        {
            for( i = 0; i &lt; alphaSize; i++ )
            {
                if( length[ i ] == n )
                {
                    code[ i ] = vec;
                    vec++;
                }
            }
            ;
            vec &lt;&lt;= 1;
        }
</source>
    </clone>
    <clone nlines="15" distance="8">
        <source file="org/gjt/sp/jedit/gui/AbbrevEditor.java" startline="114" startcolumn="4" endline="128" endcolumn="4">
switch(ch)
			{
			case '\n':
				buf.append("\\n");
				break;
			case '\t':
				buf.append("\\t");
				break;
			case '\\':
				buf.append("\\\\");
				break;
			default:
				buf.append(ch);
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/gui/AbbrevEditor.java" startline="180" startcolumn="5" endline="195" endcolumn="5">
switch(ch)
				{
				case 't':
					buf.append('\t');
					break;
				case 'n':
					buf.append('\n');
					break;
				case '|':
					beforeCaretText = buf.toString();
					buf.setLength(0);
					break;
				default:
					buf.append(ch);
					break;
				}
</source>
    </clone>
    <clone nlines="15" distance="8">
        <source file="org/gjt/sp/jedit/gui/AbbrevEditor.java" startline="138" startcolumn="5" endline="152" endcolumn="5">
switch(ch)
				{
				case '\n':
					buf.append("\\n");
					break;
				case '\t':
					buf.append("\\t");
					break;
				case '\\':
					buf.append("\\\\");
					break;
				default:
					buf.append(ch);
					break;
				}
</source>
        <source file="org/gjt/sp/jedit/gui/AbbrevEditor.java" startline="180" startcolumn="5" endline="195" endcolumn="5">
switch(ch)
				{
				case 't':
					buf.append('\t');
					break;
				case 'n':
					buf.append('\n');
					break;
				case '|':
					beforeCaretText = buf.toString();
					buf.setLength(0);
					break;
				default:
					buf.append(ch);
					break;
				}
</source>
    </clone>
    <clone nlines="15" distance="8">
        <source file="org/gjt/sp/util/XMLUtilities.java" startline="91" startcolumn="4" endline="105" endcolumn="4">
switch(ch)
			{
			case '&lt;':
				buf.append("&amp;lt;");
				break;
			case '&gt;':
				buf.append("&amp;gt;");
				break;
			case '&amp;':
				buf.append("&amp;amp;");
				break;
			default:
				buf.append(ch);
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/gui/AbbrevEditor.java" startline="180" startcolumn="5" endline="195" endcolumn="5">
switch(ch)
				{
				case 't':
					buf.append('\t');
					break;
				case 'n':
					buf.append('\n');
					break;
				case '|':
					beforeCaretText = buf.toString();
					buf.setLength(0);
					break;
				default:
					buf.append(ch);
					break;
				}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="918" startcolumn="3" endline="932" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = confirm(comp, name, args, buttons, type);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1080" startcolumn="3" endline="1094" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = listConfirm(comp, name, args, listModel, selectedItems);
				}
			});
		}
		catch (Exception e)
		{
			return JOptionPane.CANCEL_OPTION;
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="966" startcolumn="3" endline="980" endcolumn="3">
try
		{
			EventQueue.invokeAndWait(new Runnable()
			{
				@Override
				public void run()
				{
					retValue[0] = option(comp, name, args, type, options, initialValue);
				}
			});
		}
		catch (Exception e)
		{
			return 0;
		}
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="492" startcolumn="5" endline="505" endcolumn="5">
if((checkRule.action &amp; ParserRule.REGEXP) != 0)
				{
					handleTokenWithSpaces(tokenHandler,
						tokenType,
						pos - line.offset,
						matchedChars,
						context);
				}
				else
				{
					tokenHandler.handleToken(line,tokenType,
						pos - line.offset,
						matchedChars,context);
				}
</source>
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="457" startcolumn="5" endline="471" endcolumn="5">
if((checkRule.action &amp; ParserRule.REGEXP) != 0)
				{
					handleTokenWithSpaces(tokenHandler,
						checkRule.token,
						pos - line.offset,
						matchedChars,
						context);
				}
				else
				{
					tokenHandler.handleToken(line,
						checkRule.token,
						pos - line.offset,
						matchedChars,context);
				}
</source>
    </clone>
    <clone nlines="14" distance="6">
        <source file="org/gjt/sp/jedit/io/VFS.java" startline="1244" startcolumn="6" endline="1257" endcolumn="6">
try
					{
						if (file.isBinary(session))
						{
							Log.log(Log.NOTICE,this
								,file.getPath() + ": skipped as a binary file");
							continue;
						}
					}
					catch(IOException e)
					{
						Log.log(Log.ERROR,this,e);
						// may be not binary...
					}
</source>
        <source file="org/gjt/sp/jedit/io/VFS.java" startline="1242" startcolumn="5" endline="1258" endcolumn="5">
if (skipBinary)
				{
					try
					{
						if (file.isBinary(session))
						{
							Log.log(Log.NOTICE,this
								,file.getPath() + ": skipped as a binary file");
							continue;
						}
					}
					catch(IOException e)
					{
						Log.log(Log.ERROR,this,e);
						// may be not binary...
					}
				}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/bsh/classpath/BshClassPath.java" startline="661" startcolumn="4" endline="670" endcolumn="4">
try 
			{
				//String rtjar = System.getProperty("java.home")+"/lib/rt.jar";
				String rtjar = getRTJarPath();
				URL url = new File( rtjar ).toURL();
				bootClassPath = new BshClassPath( 
					"Boot Class Path", new URL[] { url } );
			} catch ( MalformedURLException e ) {
				throw new ClassPathException(" can't find boot jar: "+e);
			}
</source>
        <source file="org/gjt/sp/jedit/bsh/classpath/BshClassPath.java" startline="659" startcolumn="3" endline="671" endcolumn="3">
if ( bootClassPath == null )
		{
			try 
			{
				//String rtjar = System.getProperty("java.home")+"/lib/rt.jar";
				String rtjar = getRTJarPath();
				URL url = new File( rtjar ).toURL();
				bootClassPath = new BshClassPath( 
					"Boot Class Path", new URL[] { url } );
			} catch ( MalformedURLException e ) {
				throw new ClassPathException(" can't find boot jar: "+e);
			}
		}
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="585" startcolumn="3" endline="598" endcolumn="3">
try
		{
			readLock();

			if(start &lt; 0 || length &lt; 0
				|| start + length &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(start + ":" + length);

			return contentMgr.getText(start,length);
		}
		finally
		{
			readUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="633" startcolumn="3" endline="646" endcolumn="3">
try
		{
			readLock();

			if(start &lt; 0 || length &lt; 0
				|| start + length &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(start + ":" + length);

			contentMgr.getText(start,length,seg);
		}
		finally
		{
			readUnlock();
		}
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="662" startcolumn="3" endline="675" endcolumn="3">
try
		{
			readLock();

			if(start &lt; 0 || length &lt; 0
				|| start + length &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(start + ":" + length);

			return contentMgr.getSegment(start,length);
		}
		finally
		{
			readUnlock();
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="633" startcolumn="3" endline="646" endcolumn="3">
try
		{
			readLock();

			if(start &lt; 0 || length &lt; 0
				|| start + length &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(start + ":" + length);

			contentMgr.getText(start,length,seg);
		}
		finally
		{
			readUnlock();
		}
</source>
    </clone>
    <clone nlines="12" distance="7">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1735" startcolumn="3" endline="1746" endcolumn="3">
for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/help/HelpIndex.java" startline="104" startcolumn="3" endline="115" endcolumn="3">
for (PluginJAR jar : jars)
		{
			try
			{
				indexJAR(jar.getZipFile());
			}
			catch (Throwable e)
			{
				Log.log(Log.ERROR, this, "Error indexing JAR: " + jar.getPath());
				Log.log(Log.ERROR, this, e);
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="7">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1752" startcolumn="3" endline="1763" endcolumn="3">
for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/help/HelpIndex.java" startline="104" startcolumn="3" endline="115" endcolumn="3">
for (PluginJAR jar : jars)
		{
			try
			{
				indexJAR(jar.getZipFile());
			}
			catch (Throwable e)
			{
				Log.log(Log.ERROR, this, "Error indexing JAR: " + jar.getPath());
				Log.log(Log.ERROR, this, e);
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="7">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1769" startcolumn="3" endline="1780" endcolumn="3">
for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer begin redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/help/HelpIndex.java" startline="104" startcolumn="3" endline="115" endcolumn="3">
for (PluginJAR jar : jars)
		{
			try
			{
				indexJAR(jar.getZipFile());
			}
			catch (Throwable e)
			{
				Log.log(Log.ERROR, this, "Error indexing JAR: " + jar.getPath());
				Log.log(Log.ERROR, this, e);
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="7">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1786" startcolumn="3" endline="1797" endcolumn="3">
for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer end redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/help/HelpIndex.java" startline="104" startcolumn="3" endline="115" endcolumn="3">
for (PluginJAR jar : jars)
		{
			try
			{
				indexJAR(jar.getZipFile());
			}
			catch (Throwable e)
			{
				Log.log(Log.ERROR, this, "Error indexing JAR: " + jar.getPath());
				Log.log(Log.ERROR, this, e);
			}
		}
</source>
    </clone>
    <clone nlines="17" distance="8">
        <source file="org/gjt/sp/jedit/bsh/NameSpace.java" startline="694" startcolumn="13" endline="710" endcolumn="13">
if ( existing.getType() != null )
            {
                // If it had a different type throw error.
                // This allows declaring the same var again, but not with
                // a different (even if assignable) type.
                if ( existing.getType() != type )
                {
                    throw new UtilEvalError( "Typed variable: "+name
                        +" was previously declared with type: "
                        + existing.getType() );
                } else
                {
                    // else set it and return
                    existing.setValue( value, Variable.DECLARATION );
                    return;
                }
            }
</source>
        <source file="org/gjt/sp/jedit/bsh/NameSpace.java" startline="691" startcolumn="9" endline="713" endcolumn="9">
if ( existing != null )
        {
            // Is it typed?
            if ( existing.getType() != null )
            {
                // If it had a different type throw error.
                // This allows declaring the same var again, but not with
                // a different (even if assignable) type.
                if ( existing.getType() != type )
                {
                    throw new UtilEvalError( "Typed variable: "+name
                        +" was previously declared with type: "
                        + existing.getType() );
                } else
                {
                    // else set it and return
                    existing.setValue( value, Variable.DECLARATION );
                    return;
                }
            }
            // Careful here:
            // else fall through to override and install the new typed version
        }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/TextUtilities.java" startline="657" startcolumn="5" endline="675" endcolumn="5">
if(Character.isWhitespace(ch))
				{
					if(eatWhitespace)
					{
						type = WHITESPACE;
						break;
					}
					else
						return i;
				}
				else if(Character.isLetterOrDigit(ch) ||
					noWordSep.indexOf(ch) != -1)
				{
					return i;
				}
				else
				{
					break;
				}
</source>
        <source file="org/gjt/sp/jedit/TextUtilities.java" startline="471" startcolumn="5" endline="489" endcolumn="5">
if(Character.isWhitespace(ch))
				{
					if(eatWhitespace &amp;&amp; !eatOnlyAfterWord)
					{
						type = WHITESPACE;
						break;
					}
					else
						return i + 1;
				}
				else if(Character.isLetterOrDigit(ch) ||
					noWordSep.indexOf(ch) != -1)
				{
					return i + 1;
				}
				else
				{
					break;
				}
</source>
    </clone>
    <clone nlines="18" distance="8">
        <source file="org/gjt/sp/jedit/gui/DefaultInputHandler.java" startline="126" startcolumn="4" endline="143" endcolumn="4">
if(input != '\0')
			{
				if (!dryRun)
				{
					setCurrentBindings(bindings);
					invokeReadNextChar(input);
					repeatCount = 1;
				}
				return true;
			}
			else
			{
				if (!dryRun)
				{
					readNextChar = null;
					view.getStatus().setMessage(null);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/gui/DefaultInputHandler.java" startline="124" startcolumn="3" endline="144" endcolumn="3">
if(readNextChar != null)
		{
			if(input != '\0')
			{
				if (!dryRun)
				{
					setCurrentBindings(bindings);
					invokeReadNextChar(input);
					repeatCount = 1;
				}
				return true;
			}
			else
			{
				if (!dryRun)
				{
					readNextChar = null;
					view.getStatus().setMessage(null);
				}
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3783" startcolumn="5" endline="3795" endcolumn="5">
if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4083" startcolumn="5" endline="4095" endcolumn="5">
if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3783" startcolumn="5" endline="3795" endcolumn="5">
if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5184" startcolumn="5" endline="5196" endcolumn="5">
if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3783" startcolumn="5" endline="3795" endcolumn="5">
if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5505" startcolumn="5" endline="5517" endcolumn="5">
if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3783" startcolumn="5" endline="3795" endcolumn="5">
if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5558" startcolumn="5" endline="5570" endcolumn="5">
if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4028" startcolumn="5" endline="4040" endcolumn="5">
if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4083" startcolumn="5" endline="4095" endcolumn="5">
if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4028" startcolumn="5" endline="4040" endcolumn="5">
if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5184" startcolumn="5" endline="5196" endcolumn="5">
if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4028" startcolumn="5" endline="4040" endcolumn="5">
if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5505" startcolumn="5" endline="5517" endcolumn="5">
if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4028" startcolumn="5" endline="4040" endcolumn="5">
if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5558" startcolumn="5" endline="5570" endcolumn="5">
if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4374" startcolumn="5" endline="4386" endcolumn="5">
if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4083" startcolumn="5" endline="4095" endcolumn="5">
if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4374" startcolumn="5" endline="4386" endcolumn="5">
if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5184" startcolumn="5" endline="5196" endcolumn="5">
if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4374" startcolumn="5" endline="4386" endcolumn="5">
if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5505" startcolumn="5" endline="5517" endcolumn="5">
if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4374" startcolumn="5" endline="4386" endcolumn="5">
if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5558" startcolumn="5" endline="5570" endcolumn="5">
if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4650" startcolumn="5" endline="4662" endcolumn="5">
if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4083" startcolumn="5" endline="4095" endcolumn="5">
if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4650" startcolumn="5" endline="4662" endcolumn="5">
if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5184" startcolumn="5" endline="5196" endcolumn="5">
if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4650" startcolumn="5" endline="4662" endcolumn="5">
if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5505" startcolumn="5" endline="5517" endcolumn="5">
if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4650" startcolumn="5" endline="4662" endcolumn="5">
if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5558" startcolumn="5" endline="5570" endcolumn="5">
if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4968" startcolumn="5" endline="4980" endcolumn="5">
if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4083" startcolumn="5" endline="4095" endcolumn="5">
if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4968" startcolumn="5" endline="4980" endcolumn="5">
if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5184" startcolumn="5" endline="5196" endcolumn="5">
if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4968" startcolumn="5" endline="4980" endcolumn="5">
if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5505" startcolumn="5" endline="5517" endcolumn="5">
if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4968" startcolumn="5" endline="4980" endcolumn="5">
if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5558" startcolumn="5" endline="5570" endcolumn="5">
if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3783" startcolumn="5" endline="3795" endcolumn="5">
if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4028" startcolumn="5" endline="4040" endcolumn="5">
if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4374" startcolumn="5" endline="4386" endcolumn="5">
if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4650" startcolumn="5" endline="4662" endcolumn="5">
if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4968" startcolumn="5" endline="4980" endcolumn="5">
if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/jedit/keymap/KeymapImpl.java" startline="72" startcolumn="3" endline="84" endcolumn="3">
try
		{
			in = new BufferedInputStream(new FileInputStream(file));
			props.load(in);
		}
		catch (IOException e)
		{
			Log.log(Log.ERROR, this, "Unable to load properties", e);
		}
		finally
		{
			IOUtilities.closeQuietly((Closeable)in);
		}
</source>
        <source file="org/jedit/keymap/KeymapImpl.java" startline="151" startcolumn="4" endline="163" endcolumn="4">
try
			{
				out = new BufferedOutputStream(new FileOutputStream(userKeymapFile));
				MiscUtilities.storeProperties(props, out, "jEdit's keymap " + name);
			}
			catch (IOException e)
			{
				Log.log(Log.ERROR, this, "Unable to save properties", e);
			}
			finally
			{
				IOUtilities.closeQuietly((Closeable)out);
			}
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/gjt/sp/jedit/pluginmgr/MirrorList.java" startline="119" startcolumn="3" endline="130" endcolumn="3">
try
		{
			inputStream = new BufferedInputStream(new FileInputStream(mirrorList));

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			IOUtilities.copyStream(null,inputStream,out, false);
			xml = out.toString();
		}
		finally
		{
			IOUtilities.closeQuietly((Closeable)inputStream);
		}
</source>
        <source file="org/gjt/sp/jedit/pluginmgr/MirrorList.java" startline="144" startcolumn="3" endline="155" endcolumn="3">
try
		{
			inputStream = new URL(path).openStream();

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			IOUtilities.copyStream(null,inputStream,out, false);
			xml = out.toString();
		}
		finally
		{
			IOUtilities.closeQuietly((Closeable)inputStream);
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1697" startcolumn="4" endline="1708" endcolumn="4">
try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1695" startcolumn="3" endline="1709" endcolumn="3">
if(waitSocket != null)
		{
			try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1697" startcolumn="4" endline="1708" endcolumn="4">
try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
</source>
        <source file="org/gjt/sp/jedit/View.java" startline="1516" startcolumn="3" endline="1530" endcolumn="3">
if(waitSocket != null)
		{
			try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/View.java" startline="1518" startcolumn="4" endline="1529" endcolumn="4">
try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1695" startcolumn="3" endline="1709" endcolumn="3">
if(waitSocket != null)
		{
			try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/View.java" startline="1518" startcolumn="4" endline="1529" endcolumn="4">
try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
</source>
        <source file="org/gjt/sp/jedit/View.java" startline="1516" startcolumn="3" endline="1530" endcolumn="3">
if(waitSocket != null)
		{
			try
			{
				waitSocket.getOutputStream().write('\0');
				waitSocket.getOutputStream().flush();
				waitSocket.getInputStream().close();
				waitSocket.getOutputStream().close();
				waitSocket.close();
			}
			catch(IOException io)
			{
				//Log.log(Log.ERROR,this,io);
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/BshMethod.java" startline="221" startcolumn="4" endline="231" endcolumn="4">
try {
				return Reflect.invokeMethod(
					javaMethod, javaObject, argValues ); 
			} catch ( ReflectError e ) {
				throw new EvalError(
					"Error invoking Java method: "+e, callerInfo, callstack );
			} catch ( InvocationTargetException e2 ) {
				throw new TargetError( 
					"Exception invoking imported object method.", 
					e2, callerInfo, callstack, true/*isNative*/ );
			}
</source>
        <source file="org/gjt/sp/jedit/bsh/BshMethod.java" startline="220" startcolumn="3" endline="231" endcolumn="4">
if ( javaMethod != null )
			try {
				return Reflect.invokeMethod(
					javaMethod, javaObject, argValues ); 
			} catch ( ReflectError e ) {
				throw new EvalError(
					"Error invoking Java method: "+e, callerInfo, callstack );
			} catch ( InvocationTargetException e2 ) {
				throw new TargetError( 
					"Exception invoking imported object method.", 
					e2, callerInfo, callstack, true/*isNative*/ );
			}
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/gjt/sp/jedit/textarea/SelectionManager.java" startline="139" startcolumn="3" endline="148" endcolumn="3">
for(int i = 0; i &lt; selection.size(); i++)
		{
			Selection s = selection.get(i);
			if(addMe.start &lt; s.start)
			{
				selection.add(i,addMe);
				added = true;
				break;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1363" startcolumn="4" endline="1372" endcolumn="4">
for(int i = 0; i &lt; markers.size(); i++)
			{
				Marker marker = markers.get(i);
				if(marker.getPosition() &gt; pos)
				{
					markers.insertElementAt(markerN,i);
					added = true;
					break;
				}
			}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="193" startcolumn="8" endline="207" endcolumn="3">
for(int i = 0; i &lt; str.length(); i++)
		{
			switch(str.charAt(i))
			{
				case ' ':
					whitespace++;
					break;
				case '\t':
					whitespace += tabSize -
						whitespace % tabSize;
					break;
				default:
					break loop;
			}
		}
</source>
        <source file="org/gjt/sp/util/StandardUtilities.java" startline="193" startcolumn="1" endline="207" endcolumn="3">
loop:		for(int i = 0; i &lt; str.length(); i++)
		{
			switch(str.charAt(i))
			{
				case ' ':
					whitespace++;
					break;
				case '\t':
					whitespace += tabSize -
						whitespace % tabSize;
					break;
				default:
					break loop;
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="1653" startcolumn="15" endline="1667" endcolumn="36">
do
		{
			char c = text.charAt(end);
			if(c == closeBracket)
			{
				if(--count == 0)
				{
					end++;
					break forward_scan;
				}
			}
			else if(c == openBracket)
				count++;
		}
		while(++end &lt; buffer.getLength());
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="1653" startcolumn="1" endline="1667" endcolumn="36">
forward_scan:	do
		{
			char c = text.charAt(end);
			if(c == closeBracket)
			{
				if(--count == 0)
				{
					end++;
					break forward_scan;
				}
			}
			else if(c == openBracket)
				count++;
		}
		while(++end &lt; buffer.getLength());
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="org/gjt/sp/jedit/options/BufferOptionPane.java" startline="124" startcolumn="3" endline="139" endcolumn="3">
if(buffer.getAutoReload())
		{
			if(buffer.getAutoReloadDialog())
				// reload and notify
				checkModStatus.setSelectedIndex(2);
			else	// reload silently
				checkModStatus.setSelectedIndex(3);
		}
		else
		{
			if(buffer.getAutoReloadDialog())
				// prompt
				checkModStatus.setSelectedIndex(1);
			else	// do nothing
				checkModStatus.setSelectedIndex(0);
		}
</source>
        <source file="org/gjt/sp/jedit/options/GeneralOptionPane.java" startline="95" startcolumn="3" endline="110" endcolumn="3">
if(jEdit.getBooleanProperty("autoReload"))
		{
			if (jEdit.getBooleanProperty("autoReloadDialog"))
				// reload and notify
				checkModStatus.setSelectedIndex(2);
			else	// reload silently
				checkModStatus.setSelectedIndex(3);
		}
		else
		{
			if (jEdit.getBooleanProperty("autoReloadDialog"))
				// prompt
				checkModStatus.setSelectedIndex(1);
			else	// do nothing
				checkModStatus.setSelectedIndex(0);
		}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/bsh/BSHPrimarySuffix.java" startline="75" startcolumn="4" endline="84" endcolumn="23">
if ( obj instanceof BSHType ) {
				if ( toLHS )
					throw new EvalError("Can't assign .class", 
						this, callstack );
				NameSpace namespace = callstack.top();
				return ((BSHType)obj).getType( callstack, interpreter );
			} else
				throw new EvalError(
					"Attempt to use .class suffix on non class.", 
					this, callstack );
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHPrimarySuffix.java" startline="74" startcolumn="3" endline="84" endcolumn="23">
if ( operation == CLASS )
			if ( obj instanceof BSHType ) {
				if ( toLHS )
					throw new EvalError("Can't assign .class", 
						this, callstack );
				NameSpace namespace = callstack.top();
				return ((BSHType)obj).getType( callstack, interpreter );
			} else
				throw new EvalError(
					"Attempt to use .class suffix on non class.", 
					this, callstack );
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="net/sourceforge/jarbundler/JarBundler.java" startline="1017" startcolumn="4" endline="1026" endcolumn="4">
try {
				File dest = new File(mResourcesDir, mAppIcon.getName());

				if(mVerbose)
					log("Copying application icon file to \"" + bundlePath(dest) + "\"");

				mFileUtils.copyFile(mAppIcon, dest);
			} catch (IOException ex) {
				throw new BuildException("Cannot copy icon file: " + ex);
			}
</source>
        <source file="net/sourceforge/jarbundler/JarBundler.java" startline="1014" startcolumn="3" endline="1027" endcolumn="3">
if (mAppIcon != null) {


			try {
				File dest = new File(mResourcesDir, mAppIcon.getName());

				if(mVerbose)
					log("Copying application icon file to \"" + bundlePath(dest) + "\"");

				mFileUtils.copyFile(mAppIcon, dest);
			} catch (IOException ex) {
				throw new BuildException("Cannot copy icon file: " + ex);
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Interpreter.java" startline="362" startcolumn="6" endline="372" endcolumn="6">
try {
						invokeMain( (Class)result, bshArgs );
					} catch ( Exception e )
					{
						Object o = e;
						if ( e instanceof InvocationTargetException )
							o = ((InvocationTargetException)e)
								.getTargetException();
						System.err.println(
							"Class: "+result+" main method threw exception:"+o);
					}
</source>
        <source file="org/gjt/sp/jedit/bsh/Interpreter.java" startline="361" startcolumn="5" endline="372" endcolumn="6">
if ( result instanceof Class )
					try {
						invokeMain( (Class)result, bshArgs );
					} catch ( Exception e )
					{
						Object o = e;
						if ( e instanceof InvocationTargetException )
							o = ((InvocationTargetException)e)
								.getTargetException();
						System.err.println(
							"Class: "+result+" main method threw exception:"+o);
					}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/jedit/options/PluginOptionGroup.java" startline="71" startcolumn="4" endline="81" endcolumn="4">
if (optionPane != null)
				addOptionPane(optionPane);
			else
			{
				String options = jEdit.getProperty("plugin." + className + ".option-group");
				if (options != null)
				{
					addOptionGroup(new OptionGroup("plugin." + className, jEdit.getProperty(
						"plugin." + className + ".name"), options));
				}
			}
</source>
        <source file="org/gjt/sp/jedit/options/PluginOptions.java" startline="83" startcolumn="5" endline="93" endcolumn="5">
if (optionPane != null)
					pluginsGroup.addOptionPane(optionPane);
				else
				{
					String options = jEdit.getProperty("plugin." + className + ".option-group");
					if (options != null)
					{
						pluginsGroup.addOptionGroup(new OptionGroup("plugin." + className,
							jEdit.getProperty("plugin." + className + ".name"), options));
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4083" startcolumn="5" endline="4095" endcolumn="5">
if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5184" startcolumn="5" endline="5196" endcolumn="5">
if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5505" startcolumn="5" endline="5517" endcolumn="5">
if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5223" startcolumn="5" endline="5235" endcolumn="5">
if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5558" startcolumn="5" endline="5570" endcolumn="5">
if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="579" startcolumn="5" endline="592" endcolumn="5">
if ("CONTEXT".equals(tmp))
				{
					lastMatchType = ParserRule.MATCH_TYPE_CONTEXT;
				}
				else if ("RULE".equals(tmp))
				{
					lastMatchType = ParserRule.MATCH_TYPE_RULE;
				}
				else
				{
					lastMatchType = Token.stringToToken(tmp);
					if(lastMatchType == -1)
						error("token-invalid",tmp);
				}
</source>
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="577" startcolumn="4" endline="593" endcolumn="4">
if (tmp != null)
			{
				if ("CONTEXT".equals(tmp))
				{
					lastMatchType = ParserRule.MATCH_TYPE_CONTEXT;
				}
				else if ("RULE".equals(tmp))
				{
					lastMatchType = ParserRule.MATCH_TYPE_RULE;
				}
				else
				{
					lastMatchType = Token.stringToToken(tmp);
					if(lastMatchType == -1)
						error("token-invalid",tmp);
				}
			}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Reflect.java" startline="794" startcolumn="4" endline="803" endcolumn="4">
try {
				String accessorName = accessorName( "is", propName );
				method = resolveExpectedJavaMethod(
					null/*bcm*/, obj.getClass(), obj,
					accessorName, args, false );
				if ( method.getReturnType() != Boolean.TYPE )
					method = null;
			} catch ( Exception e ) {
				e2 = e;
			}
</source>
        <source file="org/gjt/sp/jedit/bsh/Reflect.java" startline="793" startcolumn="3" endline="803" endcolumn="4">
if ( method == null )
			try {
				String accessorName = accessorName( "is", propName );
				method = resolveExpectedJavaMethod(
					null/*bcm*/, obj.getClass(), obj,
					accessorName, args, false );
				if ( method.getReturnType() != Boolean.TYPE )
					method = null;
			} catch ( Exception e ) {
				e2 = e;
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/browser/MkDirBrowserTask.java" startline="77" startcolumn="4" endline="87" endcolumn="4">
try
			{
				vfs._endVFSSession(session,browser);
			}
			catch(IOException io)
			{
				setCancellable(false);
				Log.log(Log.ERROR,this,io);
				args[0] = io.toString();
				VFSManager.error(browser, path,"ioerror",args);
			}
</source>
        <source file="org/gjt/sp/jedit/browser/DeleteBrowserTask.java" startline="79" startcolumn="4" endline="89" endcolumn="4">
try
			{
				vfs._endVFSSession(session, browser);
			}
			catch (IOException io)
			{
				setCancellable(false);
				Log.log(Log.ERROR, this, io);
				String[] pp = {io.toString()};
				VFSManager.error(browser, path, "ioerror.directory-error", pp);
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/browser/MkDirBrowserTask.java" startline="77" startcolumn="4" endline="87" endcolumn="4">
try
			{
				vfs._endVFSSession(session,browser);
			}
			catch(IOException io)
			{
				setCancellable(false);
				Log.log(Log.ERROR,this,io);
				args[0] = io.toString();
				VFSManager.error(browser, path,"ioerror",args);
			}
</source>
        <source file="org/gjt/sp/jedit/browser/ListDirectoryBrowserTask.java" startline="85" startcolumn="4" endline="95" endcolumn="4">
try
			{
				vfs._endVFSSession(session,browser);
			}
			catch(IOException io)
			{
				setCancellable(false);
				Log.log(Log.ERROR,this,io);
				String[] pp = { io.toString() };
				VFSManager.error(browser, path,"ioerror.directory-error",pp);
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/browser/MkDirBrowserTask.java" startline="77" startcolumn="4" endline="87" endcolumn="4">
try
			{
				vfs._endVFSSession(session,browser);
			}
			catch(IOException io)
			{
				setCancellable(false);
				Log.log(Log.ERROR,this,io);
				args[0] = io.toString();
				VFSManager.error(browser, path,"ioerror",args);
			}
</source>
        <source file="org/gjt/sp/jedit/browser/RenameBrowserTask.java" startline="106" startcolumn="4" endline="116" endcolumn="4">
try
			{
				vfs._endVFSSession(session, browser);
			}
			catch (IOException io)
			{
				setCancellable(false);
				Log.log(Log.ERROR, this, io);
				String[] pp = {io.toString()};
				VFSManager.error(browser, path, "ioerror.directory-error", pp);
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/bsh/NameSpace.java" startline="1654" startcolumn="9" endline="1663" endcolumn="9">
for(int i = 0; i &lt; importedCommands.size(); i++)
        {
            CommandPathEntry entry = (CommandPathEntry)importedCommands
                .elementAt(i);
            if(entry.path.equals(path) &amp;&amp; entry.clas == clas)
            {
                importedCommands.removeElementAt(i);
                return;
            }
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/NameSpace.java" startline="768" startcolumn="13" endline="779" endcolumn="13">
for (int i = 0; i &lt; _methods.size(); i++)
            {
                // Check whether the new method overrides some old
                // method in the list.
                BshMethod _old_m = (BshMethod) _methods.get(i);
                if (Arrays.equals(_old_m.getParameterTypes(),
                                  method.getParameterTypes()))
                {
                    _methods.remove(i);
                    break;
                }
            }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3533" startcolumn="7" endline="3547" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          break label_27;
        }
        jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        FormalParameter();
        jj_consume_token(RPAREN);
        Block();
                                                      closed = true;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3532" startcolumn="7" endline="3547" endcolumn="7">
label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          break label_27;
        }
        jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        FormalParameter();
        jj_consume_token(RPAREN);
        Block();
                                                      closed = true;
      }
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/jedit/View.java" startline="909" startcolumn="3" endline="919" endcolumn="3">
for(int i = 0; i &lt; editPanes.length; i++)
		{
			if(editPane == editPanes[i])
			{
				if(i == editPanes.length - 1)
					editPanes[0].focusOnTextArea();
				else
					editPanes[i+1].focusOnTextArea();
				break;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/View.java" startline="930" startcolumn="3" endline="940" endcolumn="3">
for(int i = 0; i &lt; editPanes.length; i++)
		{
			if(editPane == editPanes[i])
			{
				if(i == 0)
					editPanes[editPanes.length - 1].focusOnTextArea();
				else
					editPanes[i-1].focusOnTextArea();
				break;
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/gjt/sp/jedit/syntax/KeywordMap.java" startline="117" startcolumn="3" endline="129" endcolumn="3">
for (char ch : keyword)
		{
			if (!Character.isLetterOrDigit(ch))
			{
				for (int j = 0; j &lt; noWordSep.length(); j++)
				{
					if (noWordSep.charAt(j) == ch)
						continue loop;
				}

				noWordSep.append(ch);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/syntax/KeywordMap.java" startline="116" startcolumn="1" endline="129" endcolumn="3">
loop:
		for (char ch : keyword)
		{
			if (!Character.isLetterOrDigit(ch))
			{
				for (int j = 0; j &lt; noWordSep.length(); j++)
				{
					if (noWordSep.charAt(j) == ch)
						continue loop;
				}

				noWordSep.append(ch);
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/textarea/BufferHandler.java" startline="303" startcolumn="9" endline="317" endcolumn="4">
if(caret &gt;= start)
			{
				int scrollMode = textArea.caretAutoScroll()
					? TextArea.ELECTRIC_SCROLL
					: TextArea.NO_SCROLL;
				textArea.moveCaretPosition(
					start,scrollMode);
			}
			else
			{
				int scrollMode = textArea.caretAutoScroll()
					? TextArea.NORMAL_SCROLL
					: TextArea.NO_SCROLL;
				textArea.moveCaretPosition(caret,scrollMode);
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/BufferHandler.java" startline="133" startcolumn="4" endline="148" endcolumn="4">
if(caret &gt;= offset)
			{
				int scrollMode = textArea.caretAutoScroll()
					? TextArea.ELECTRIC_SCROLL
					: TextArea.NO_SCROLL;
				textArea.moveCaretPosition(
					caret + length,scrollMode);
			}
			else
			{
				int scrollMode = textArea.caretAutoScroll()
					? TextArea.NORMAL_SCROLL
					: TextArea.NO_SCROLL;
				textArea.moveCaretPosition(
					caret,scrollMode);
			}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/io/UrlVFS.java" startline="59" startcolumn="3" endline="69" endcolumn="3">
try
		{
			return new URL(path).openStream();
		}
		catch(MalformedURLException mu)
		{
			Log.log(Log.ERROR,this,mu);
			String[] args = { mu.getMessage() };
			VFSManager.error(comp,path,"ioerror.badurl",args);
			return null;
		}
</source>
        <source file="org/gjt/sp/jedit/io/UrlVFS.java" startline="76" startcolumn="3" endline="87" endcolumn="3">
try
		{
			return new URL(path).openConnection()
				.getOutputStream();
		}
		catch(MalformedURLException mu)
		{
			Log.log(Log.ERROR,this,mu);
			String[] args = { mu.getMessage() };
			VFSManager.error(comp,path,"ioerror.badurl",args);
			return null;
		}
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="814" startcolumn="4" endline="824" endcolumn="4">
for(int i = backups - 1; i &gt; 0; i--)
			{
				File backup1 = getNthBackupFile(name, i,
					backups, backupPrefix,
					backupSuffix, backupDirectory);
				File backup2 = getNthBackupFile(name, i+1,
					backups, backupPrefix,
					backupSuffix, backupDirectory);

				backup1.renameTo(backup2);
			}
</source>
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="812" startcolumn="3" endline="826" endcolumn="3">
if(backups &gt; 1)
		{
			for(int i = backups - 1; i &gt; 0; i--)
			{
				File backup1 = getNthBackupFile(name, i,
					backups, backupPrefix,
					backupSuffix, backupDirectory);
				File backup2 = getNthBackupFile(name, i+1,
					backups, backupPrefix,
					backupSuffix, backupDirectory);

				backup1.renameTo(backup2);
			}

		}
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2587" startcolumn="4" endline="2603" endcolumn="4">
for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineStartOffset(i);
						break loop;
					}
					else
						continue loop;
				}
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2882" startcolumn="4" endline="2898" endcolumn="4">
for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineEndOffset(i) - 1;
						break loop;
					}
					else
						continue loop;
				}
			}
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="installer/CBZip2OutputStream.java" startline="1706" startcolumn="13" endline="1716" endcolumn="13">
for( i = 0; i &lt; alphaSize; i++ )
            {
                if( len[ t ][ i ] &gt; maxLen )
                {
                    maxLen = len[ t ][ i ];
                }
                if( len[ t ][ i ] &lt; minLen )
                {
                    minLen = len[ t ][ i ];
                }
            }
</source>
        <source file="installer/CBZip2InputStream.java" startline="898" startcolumn="13" endline="908" endcolumn="13">
for( int i = 0; i &lt; alphaSize; i++ )
            {
                if( len[ k ][ i ] &gt; maxLen )
                {
                    maxLen = len[ k ][ i ];
                }
                if( len[ k ][ i ] &lt; minLen )
                {
                    minLen = len[ k ][ i ];
                }
            }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/gjt/sp/jedit/textarea/FirstLine.java" startline="303" startcolumn="3" endline="317" endcolumn="3">
for(;;)
		{
			int nextPhysicalLine = getDisplayManager().getNextVisibleLine(currentPhysicalLine);

			if(nextPhysicalLine == -1)
				break;
			else if(nextPhysicalLine &gt; currentPhysicalLine + amount)
				break;
			else
			{
				scrollLines += getDisplayManager().getScreenLineCount(currentPhysicalLine);
				amount -= nextPhysicalLine - currentPhysicalLine;
				currentPhysicalLine = nextPhysicalLine;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/FirstLine.java" startline="362" startcolumn="3" endline="375" endcolumn="3">
for(;;)
		{
			int prevPhysicalLine = getDisplayManager().getPrevVisibleLine(currentPhysicalLine);
			if(prevPhysicalLine == -1)
				break;
			else if(prevPhysicalLine &lt; currentPhysicalLine - amount)
				break;
			else
			{
				scrollLines -= getDisplayManager().getScreenLineCount(prevPhysicalLine);
				amount -= currentPhysicalLine - prevPhysicalLine;
				currentPhysicalLine = prevPhysicalLine;
			}
		}
</source>
    </clone>
    <clone nlines="12" distance="6">
        <source file="org/gjt/sp/jedit/menu/EnhancedMenu.java" startline="72" startcolumn="3" endline="83" endcolumn="3">
if(menuItems != null)
		{
			StringTokenizer st = new StringTokenizer(menuItems);
			while(st.hasMoreTokens())
			{
				String menuItemName = st.nextToken();
				if(menuItemName.equals("-"))
					addSeparator();
				else
					add(GUIUtilities.loadMenuItem(context,menuItemName,true));
			}
		}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="336" startcolumn="3" endline="347" endcolumn="3">
if(menuItems != null)
		{
			StringTokenizer st = new StringTokenizer(menuItems);
			while(st.hasMoreTokens())
			{
				String menuItemName = st.nextToken();
				if("-".equals(menuItemName))
					menu.addSeparator();
				else
					menu.add(loadMenuItem(context,menuItemName,false));
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/textarea/DisplayManager.java" startline="619" startcolumn="8" endline="631" endcolumn="3">
if(firstLine &gt;= currentFirstLine + visibleLines
			|| firstLine &lt;= currentFirstLine - visibleLines)
		{
			textArea.chunkCache.invalidateAll();
		}
		else if(firstLine &gt; currentFirstLine)
		{
			textArea.chunkCache.scrollDown(firstLine - currentFirstLine);
		}
		else if(firstLine &lt; currentFirstLine)
		{
			textArea.chunkCache.scrollUp(currentFirstLine - firstLine);
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/DisplayManager.java" startline="617" startcolumn="3" endline="631" endcolumn="3">
if(firstLine == currentFirstLine)
			/* do nothing */;
		else if(firstLine &gt;= currentFirstLine + visibleLines
			|| firstLine &lt;= currentFirstLine - visibleLines)
		{
			textArea.chunkCache.invalidateAll();
		}
		else if(firstLine &gt; currentFirstLine)
		{
			textArea.chunkCache.scrollDown(firstLine - currentFirstLine);
		}
		else if(firstLine &lt; currentFirstLine)
		{
			textArea.chunkCache.scrollUp(currentFirstLine - firstLine);
		}
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="org/gjt/sp/jedit/browser/VFSDirectoryEntryTableModel.java" startline="309" startcolumn="16" endline="324" endcolumn="3">
for(int i = 0; i &lt; attrs.length; i++)
		{
			for (ExtendedAttribute attr : extAttrs)
			{
				if (attrs[i].equals(attr.name))
				{
					attr.ref++;
					continue vfs_attr_loop;
				}
			}

			// this vfs has an extended attribute which is not
			// in the list. add it to the end with a ref count
			// of 1
			extAttrs.add(new ExtendedAttribute(attrs[i]));
		}
</source>
        <source file="org/gjt/sp/jedit/browser/VFSDirectoryEntryTableModel.java" startline="309" startcolumn="1" endline="324" endcolumn="3">
vfs_attr_loop:	for(int i = 0; i &lt; attrs.length; i++)
		{
			for (ExtendedAttribute attr : extAttrs)
			{
				if (attrs[i].equals(attr.name))
				{
					attr.ref++;
					continue vfs_attr_loop;
				}
			}

			// this vfs has an extended attribute which is not
			// in the list. add it to the end with a ref count
			// of 1
			extAttrs.add(new ExtendedAttribute(attrs[i]));
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/syntax/Chunk.java" startline="237" startcolumn="4" endline="249" endcolumn="4">
while ((family = props.getProperty("view.fontSubstList." + i)) != null)
			{
				/*
				 * The default font is Font.DIALOG if the family
				 * doesn't match any installed fonts. The following
				 * check skips fonts that don't exist.
				 */
				Font f = new Font(family, Font.PLAIN, 12);
				if (!"dialog".equalsIgnoreCase(f.getFamily()) ||
					"dialog".equalsIgnoreCase(family))
					userFonts.add(f);
				i++;
			}
</source>
        <source file="org/gjt/sp/jedit/syntax/Chunk.java" startline="235" startcolumn="3" endline="250" endcolumn="3">
if (props != null)
		{
			while ((family = props.getProperty("view.fontSubstList." + i)) != null)
			{
				/*
				 * The default font is Font.DIALOG if the family
				 * doesn't match any installed fonts. The following
				 * check skips fonts that don't exist.
				 */
				Font f = new Font(family, Font.PLAIN, 12);
				if (!"dialog".equalsIgnoreCase(f.getFamily()) ||
					"dialog".equalsIgnoreCase(family))
					userFonts.add(f);
				i++;
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="8">
        <source file="org/gjt/sp/jedit/browser/VFSBrowser.java" startline="1273" startcolumn="4" endline="1287" endcolumn="4">
switch(mode)
			{
			case M_OPEN:
				view.setBuffer(buffer);
				break;
			case M_OPEN_NEW_VIEW:
				jEdit.newView(view,buffer,false);
				break;
			case M_OPEN_NEW_PLAIN_VIEW:
				jEdit.newView(view,buffer,true);
				break;
			case M_OPEN_NEW_SPLIT:
				view.splitHorizontally().setBuffer(buffer);
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/browser/VFSBrowser.java" startline="1271" startcolumn="3" endline="1288" endcolumn="3">
if(buffer != null)
		{
			switch(mode)
			{
			case M_OPEN:
				view.setBuffer(buffer);
				break;
			case M_OPEN_NEW_VIEW:
				jEdit.newView(view,buffer,false);
				break;
			case M_OPEN_NEW_PLAIN_VIEW:
				jEdit.newView(view,buffer,true);
				break;
			case M_OPEN_NEW_SPLIT:
				view.splitHorizontally().setBuffer(buffer);
				break;
			}
		}
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3781" startcolumn="5" endline="3796" endcolumn="5">
if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4081" startcolumn="5" endline="4096" endcolumn="5">
if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3781" startcolumn="5" endline="3796" endcolumn="5">
if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5182" startcolumn="5" endline="5197" endcolumn="5">
if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3781" startcolumn="5" endline="3796" endcolumn="5">
if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5503" startcolumn="5" endline="5518" endcolumn="5">
if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3781" startcolumn="5" endline="3796" endcolumn="5">
if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5556" startcolumn="5" endline="5571" endcolumn="5">
if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4026" startcolumn="5" endline="4041" endcolumn="5">
if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4081" startcolumn="5" endline="4096" endcolumn="5">
if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4026" startcolumn="5" endline="4041" endcolumn="5">
if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5182" startcolumn="5" endline="5197" endcolumn="5">
if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4026" startcolumn="5" endline="4041" endcolumn="5">
if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5503" startcolumn="5" endline="5518" endcolumn="5">
if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4026" startcolumn="5" endline="4041" endcolumn="5">
if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5556" startcolumn="5" endline="5571" endcolumn="5">
if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4372" startcolumn="5" endline="4387" endcolumn="5">
if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4081" startcolumn="5" endline="4096" endcolumn="5">
if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4372" startcolumn="5" endline="4387" endcolumn="5">
if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5182" startcolumn="5" endline="5197" endcolumn="5">
if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4372" startcolumn="5" endline="4387" endcolumn="5">
if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5503" startcolumn="5" endline="5518" endcolumn="5">
if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4372" startcolumn="5" endline="4387" endcolumn="5">
if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5556" startcolumn="5" endline="5571" endcolumn="5">
if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4648" startcolumn="5" endline="4663" endcolumn="5">
if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4081" startcolumn="5" endline="4096" endcolumn="5">
if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4648" startcolumn="5" endline="4663" endcolumn="5">
if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5182" startcolumn="5" endline="5197" endcolumn="5">
if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4648" startcolumn="5" endline="4663" endcolumn="5">
if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5503" startcolumn="5" endline="5518" endcolumn="5">
if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4648" startcolumn="5" endline="4663" endcolumn="5">
if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5556" startcolumn="5" endline="5571" endcolumn="5">
if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4966" startcolumn="5" endline="4981" endcolumn="5">
if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4081" startcolumn="5" endline="4096" endcolumn="5">
if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4966" startcolumn="5" endline="4981" endcolumn="5">
if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5182" startcolumn="5" endline="5197" endcolumn="5">
if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4966" startcolumn="5" endline="4981" endcolumn="5">
if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5503" startcolumn="5" endline="5518" endcolumn="5">
if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4966" startcolumn="5" endline="4981" endcolumn="5">
if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5556" startcolumn="5" endline="5571" endcolumn="5">
if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3781" startcolumn="5" endline="3796" endcolumn="5">
if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4026" startcolumn="5" endline="4041" endcolumn="5">
if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4372" startcolumn="5" endline="4387" endcolumn="5">
if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4648" startcolumn="5" endline="4663" endcolumn="5">
if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4966" startcolumn="5" endline="4981" endcolumn="5">
if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2771" startcolumn="7" endline="2790" endcolumn="7">
while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          break label_23;
        }
        SwitchLabel();
        label_24:
        while (true) {
          if (jj_2_29(1)) {
            ;
          } else {
            break label_24;
          }
          BlockStatement();
        }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2770" startcolumn="7" endline="2790" endcolumn="7">
label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          break label_23;
        }
        SwitchLabel();
        label_24:
        while (true) {
          if (jj_2_29(1)) {
            ;
          } else {
            break label_24;
          }
          BlockStatement();
        }
      }
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="168" startcolumn="4" endline="180" endcolumn="4">
try
			{
				Field listBoxField = getField(ui.getClass(), "listBox");
				listBoxField.setAccessible(true);
				JList list = (JList)listBoxField.get(ui);
				list.setDragEnabled(true);
				list.setDropMode(DropMode.INSERT);
				list.setTransferHandler(new BufferSwitcherTransferHandler());
			}
			catch (Exception ignored) // NOPMD
			{
				// don't do anything if the above fails, it just means dnd won't work.
			}
</source>
        <source file="org/gjt/sp/jedit/gui/BufferSwitcher.java" startline="166" startcolumn="3" endline="181" endcolumn="3">
if (ui instanceof BasicComboBoxUI)
		{
			try
			{
				Field listBoxField = getField(ui.getClass(), "listBox");
				listBoxField.setAccessible(true);
				JList list = (JList)listBoxField.get(ui);
				list.setDragEnabled(true);
				list.setDropMode(DropMode.INSERT);
				list.setTransferHandler(new BufferSwitcherTransferHandler());
			}
			catch (Exception ignored) // NOPMD
			{
				// don't do anything if the above fails, it just means dnd won't work.
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="org/gjt/sp/jedit/pluginmgr/InstallPanel.java" startline="1245" startcolumn="4" endline="1255" endcolumn="4">
if (e.getType() == TableModelEvent.UPDATE)
			{
				int length = pluginModel.getRowCount();
				for (int i = 0; i &lt; length; i++)
					if (((Boolean)pluginModel.getValueAt(i,0)).booleanValue())
					{
						setEnabled(true);
						return;
					}
				setEnabled(false);
			}
</source>
        <source file="org/gjt/sp/jedit/pluginmgr/InstallPanel.java" startline="1069" startcolumn="4" endline="1080" endcolumn="4">
if (e.getType() == TableModelEvent.UPDATE)
			{
				int length = pluginModel.getRowCount();
				for (int i = 0; i &lt; length; i++)
					if (!((Boolean)pluginModel.getValueAt(i,0)).booleanValue())
					{
						setSelected(false);
						return;
					}
				if (length &gt; 0)
					setSelected(true);
			}
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="org/gjt/sp/jedit/io/EncodingWithBOM.java" startline="109" startcolumn="5" endline="118" endcolumn="5">
if (mark[0] == low &amp;&amp; mark[1] == high
					&amp;&amp; mark[2] == 0x00 &amp;&amp; mark[3] == 0x00)
				{
					return "X-UTF-32LE-BOM";
				}
				else if (mark[0] == 0x00 &amp;&amp; mark[1] == 0x00
					&amp;&amp; mark[2] == high &amp;&amp; mark[3] == low)
				{
					return "X-UTF-32BE-BOM";
				}
</source>
        <source file="org/gjt/sp/jedit/io/EncodingWithBOM.java" startline="107" startcolumn="4" endline="119" endcolumn="4">
if (count &gt;= 4)
			{
				if (mark[0] == low &amp;&amp; mark[1] == high
					&amp;&amp; mark[2] == 0x00 &amp;&amp; mark[3] == 0x00)
				{
					return "X-UTF-32LE-BOM";
				}
				else if (mark[0] == 0x00 &amp;&amp; mark[1] == 0x00
					&amp;&amp; mark[2] == high &amp;&amp; mark[3] == low)
				{
					return "X-UTF-32BE-BOM";
				}
			}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Name.java" startline="739" startcolumn="4" endline="751" endcolumn="4">
try {
				if ( obj instanceof ClassIdentifier ) 
				{
					Class clas = ((ClassIdentifier)obj).getTargetClass();
					lhs = Reflect.getLHSStaticField(clas, evalName);
					return lhs;
				} else {
					lhs = Reflect.getLHSObjectField(obj, evalName);
					return lhs;
				}
			} catch(ReflectError e) {
				throw new UtilEvalError("Field access: "+e);
			}
</source>
        <source file="org/gjt/sp/jedit/bsh/Name.java" startline="737" startcolumn="3" endline="752" endcolumn="3">
if ( evalName != null )
		{
			try {
				if ( obj instanceof ClassIdentifier ) 
				{
					Class clas = ((ClassIdentifier)obj).getTargetClass();
					lhs = Reflect.getLHSStaticField(clas, evalName);
					return lhs;
				} else {
					lhs = Reflect.getLHSObjectField(obj, evalName);
					return lhs;
				}
			} catch(ReflectError e) {
				throw new UtilEvalError("Field access: "+e);
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="844" startcolumn="5" endline="854" endcolumn="5">
for(int i = 2; i &lt; comp.length; i++)
				{
					int btnWidth = comp[i].getPreferredSize().width;
					if(btnWidth + x &gt; width)
					{
						x = insets.left;
						y += rowHeight;
					}
					comp[i].setBounds(x,y,btnWidth,rowHeight);
					x += btnWidth;
				}
</source>
        <source file="org/gjt/sp/jedit/gui/PanelWindowContainer.java" startline="873" startcolumn="5" endline="883" endcolumn="5">
for(int i = 2; i &lt; comp.length; i++)
				{
					int btnHeight = comp[i].getPreferredSize().height;
					if(btnHeight + y &gt; height)
					{
						x += colWidth;
						y = insets.top;
					}
					comp[i].setBounds(x,y,colWidth,btnHeight);
					y += btnHeight;
				}
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="236" startcolumn="10" endline="249" endcolumn="3">
while(context.parent != null)
		{
			ParserRule rule = context.parent.inRule;
			if((rule != null &amp;&amp; (rule.action
				&amp; ParserRule.NO_LINE_BREAK) == ParserRule.NO_LINE_BREAK)
				|| terminated)
			{
				context = context.parent;
				keywords = context.rules.getKeywords();
				context.setInRule(null);
			}
			else
				break unwind;
		}
</source>
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="236" startcolumn="1" endline="249" endcolumn="3">
unwind:		while(context.parent != null)
		{
			ParserRule rule = context.parent.inRule;
			if((rule != null &amp;&amp; (rule.action
				&amp; ParserRule.NO_LINE_BREAK) == ParserRule.NO_LINE_BREAK)
				|| terminated)
			{
				context = context.parent;
				keywords = context.rules.getKeywords();
				context.setInRule(null);
			}
			else
				break unwind;
		}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="271" startcolumn="7" endline="283" endcolumn="27">
rules.addRule(ParserRule
							.createRegexpSpanRule(
							tag.lastHashChar,
							tag.lastStartPosMatch,tag.lastStart.toString(),
							tag.lastEndPosMatch,tag.lastEnd.toString(),
							tag.lastDelegateSet,
							tag.lastTokenID,
							tag.lastMatchType,
							tag.lastNoLineBreak,
							tag.lastNoWordBreak,
							findParent("RULES").lastIgnoreCase,
							tag.lastEscape,
							tag.lastEndRegexp));
</source>
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="255" startcolumn="7" endline="267" endcolumn="27">
rules.addRule(ParserRule
							.createRegexpSpanRule(
							tag.lastStartPosMatch,tag.lastHashChars.toCharArray(),
							tag.lastStart.toString(),
							tag.lastEndPosMatch,tag.lastEnd.toString(),
							tag.lastDelegateSet,
							tag.lastTokenID,
							tag.lastMatchType,
							tag.lastNoLineBreak,
							tag.lastNoWordBreak,
							findParent("RULES").lastIgnoreCase,
							tag.lastEscape,
							tag.lastEndRegexp));
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5219" startcolumn="3" endline="5233" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.narrowActive(this);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5371" startcolumn="3" endline="5384" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == CaretListener.class)
			{
				try
				{
					((CaretListener)listeners[i+1]).caretUpdate(caretEvent);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5219" startcolumn="3" endline="5233" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.narrowActive(this);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5414" startcolumn="3" endline="5428" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.statusChanged(this,flag,value);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5219" startcolumn="3" endline="5233" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.narrowActive(this);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5435" startcolumn="3" endline="5449" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.bracketSelected(this,line,text);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5371" startcolumn="3" endline="5384" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == CaretListener.class)
			{
				try
				{
					((CaretListener)listeners[i+1]).caretUpdate(caretEvent);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5414" startcolumn="3" endline="5428" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.statusChanged(this,flag,value);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5371" startcolumn="3" endline="5384" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == CaretListener.class)
			{
				try
				{
					((CaretListener)listeners[i+1]).caretUpdate(caretEvent);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5435" startcolumn="3" endline="5449" endcolumn="3">
for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.bracketSelected(this,line,text);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4081" startcolumn="5" endline="4096" endcolumn="5">
if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5182" startcolumn="5" endline="5197" endcolumn="5">
if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5503" startcolumn="5" endline="5518" endcolumn="5">
if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5221" startcolumn="5" endline="5236" endcolumn="5">
if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5556" startcolumn="5" endline="5571" endcolumn="5">
if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="18" distance="6">
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="750" startcolumn="6" endline="767" endcolumn="6">
if(digitRE == null)
					{
						// mixed digit/alpha keyword,
						// and no regexp... don't
						// highlight as DIGIT
						digit = false;
					}
					else
					{
						int oldCount = line.count;
						int oldOffset = line.offset;
						line.offset = lastOffset;
						line.count = len;
						CharSequence seq = new SegmentCharSequence(line);
						digit = digitRE.matcher(seq).matches();
						line.offset = oldOffset;
						line.count = oldCount;
					}
</source>
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="748" startcolumn="5" endline="768" endcolumn="5">
if(digit)
				{
					if(digitRE == null)
					{
						// mixed digit/alpha keyword,
						// and no regexp... don't
						// highlight as DIGIT
						digit = false;
					}
					else
					{
						int oldCount = line.count;
						int oldOffset = line.offset;
						line.offset = lastOffset;
						line.count = len;
						CharSequence seq = new SegmentCharSequence(line);
						digit = digitRE.matcher(seq).matches();
						line.offset = oldOffset;
						line.count = oldCount;
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2568" startcolumn="3" endline="2580" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2586" startcolumn="3" endline="2598" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2604" startcolumn="3" endline="2616" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2568" startcolumn="3" endline="2580" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2469" startcolumn="3" endline="2482" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2568" startcolumn="3" endline="2580" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2489" startcolumn="3" endline="2502" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2568" startcolumn="3" endline="2580" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2509" startcolumn="3" endline="2522" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2568" startcolumn="3" endline="2580" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2529" startcolumn="3" endline="2542" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2586" startcolumn="3" endline="2598" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2469" startcolumn="3" endline="2482" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2586" startcolumn="3" endline="2598" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2489" startcolumn="3" endline="2502" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2586" startcolumn="3" endline="2598" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2509" startcolumn="3" endline="2522" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2586" startcolumn="3" endline="2598" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2529" startcolumn="3" endline="2542" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2604" startcolumn="3" endline="2616" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2469" startcolumn="3" endline="2482" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2604" startcolumn="3" endline="2616" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2489" startcolumn="3" endline="2502" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2604" startcolumn="3" endline="2616" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2509" startcolumn="3" endline="2522" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2604" startcolumn="3" endline="2616" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2529" startcolumn="3" endline="2542" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="15" distance="6">
        <source file="org/gjt/sp/jedit/bsh/BSHPrimaryExpression.java" startline="88" startcolumn="4" endline="102" endcolumn="58">
if ( obj instanceof BSHAmbiguousName )
				if ( toLHS )
					obj = ((BSHAmbiguousName)obj).toLHS(
						callstack, interpreter);
				else
					obj = ((BSHAmbiguousName)obj).toObject(
						callstack, interpreter);
			else 
				// Some arbitrary kind of node
				if ( toLHS )
					// is this right?
					throw new EvalError("Can't assign to prefix.", 
						this, callstack );
				else
					obj = ((SimpleNode)obj).eval(callstack, interpreter);
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHPrimaryExpression.java" startline="87" startcolumn="3" endline="102" endcolumn="58">
if ( obj instanceof SimpleNode )
			if ( obj instanceof BSHAmbiguousName )
				if ( toLHS )
					obj = ((BSHAmbiguousName)obj).toLHS(
						callstack, interpreter);
				else
					obj = ((BSHAmbiguousName)obj).toObject(
						callstack, interpreter);
			else 
				// Some arbitrary kind of node
				if ( toLHS )
					// is this right?
					throw new EvalError("Can't assign to prefix.", 
						this, callstack );
				else
					obj = ((SimpleNode)obj).eval(callstack, interpreter);
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/bsh/JThis.java" startline="218" startcolumn="4" endline="230" endcolumn="4">
try {
				CallStack callstack = new CallStack( namespace );
				method.invoke( 
					new Object[] { 
						img, new Primitive(infoflags), new Primitive(x), 
						new Primitive(y), new Primitive(width), 
						new Primitive(height) }, 
					declaringInterpreter, callstack, null
				);
			} catch(EvalError e) {
				declaringInterpreter.error(
					"local event handler imageUpdate: method invocation error:" + e );
			}
</source>
        <source file="org/gjt/sp/jedit/bsh/JThis.java" startline="217" startcolumn="3" endline="230" endcolumn="4">
if(method != null)
			try {
				CallStack callstack = new CallStack( namespace );
				method.invoke( 
					new Object[] { 
						img, new Primitive(infoflags), new Primitive(x), 
						new Primitive(y), new Primitive(width), 
						new Primitive(height) }, 
					declaringInterpreter, callstack, null
				);
			} catch(EvalError e) {
				declaringInterpreter.error(
					"local event handler imageUpdate: method invocation error:" + e );
			}
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="net/sourceforge/jarbundler/JarBundler.java" startline="1271" startcolumn="4" endline="1281" endcolumn="4">
for (Iterator execIter = mExecAttrs.iterator(); execIter.hasNext();) {
				File src = (File) execIter.next();
				File dest = new File(mMacOsDir, src.getName());

				if (mVerbose)
					log("Copying exec file to \"" + bundlePath(dest) + "\"");


				mFileUtils.copyFile(src, dest);
				setExecutable(dest);
			}
</source>
        <source file="net/sourceforge/jarbundler/JarBundler.java" startline="1141" startcolumn="4" endline="1151" endcolumn="4">
for (Iterator jarIter = mJarAttrs.iterator(); jarIter.hasNext();) {
				File src = (File) jarIter.next();
				File dest = new File(mJavaDir, src.getName());

				if (mVerbose)
					log("Copying JAR file to \"" + bundlePath(dest) + "\"");


				mFileUtils.copyFile(src, dest);
				bundleProperties.addToClassPath(dest.getName());
			}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2469" startcolumn="3" endline="2482" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2489" startcolumn="3" endline="2502" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2509" startcolumn="3" endline="2522" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2450" startcolumn="3" endline="2462" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldLevelChanged(this,start,end);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2529" startcolumn="3" endline="2542" endcolumn="3">
for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="1627" startcolumn="16" endline="1642" endcolumn="3">
while(--start &gt;= 0)
		{
			char c = text.charAt(start);
			int index = openBrackets.indexOf(c);
			if(index != -1)
			{
				if(--count == 0)
				{
					openBracket = c;
					closeBracket = closeBrackets.charAt(index);
					break backward_scan;
				}
			}
			else if(closeBrackets.indexOf(c) != -1)
				count++;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="1627" startcolumn="1" endline="1642" endcolumn="3">
backward_scan:	while(--start &gt;= 0)
		{
			char c = text.charAt(start);
			int index = openBrackets.indexOf(c);
			if(index != -1)
			{
				if(--count == 0)
				{
					openBracket = c;
					closeBracket = closeBrackets.charAt(index);
					break backward_scan;
				}
			}
			else if(closeBrackets.indexOf(c) != -1)
				count++;
		}
</source>
    </clone>
    <clone nlines="26" distance="5">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="843" startcolumn="3" endline="868" endcolumn="3">
if(family == null || sizeString == null || styleString == null)
			return def;
		else
		{
			int size, style;

			try
			{
				size = Integer.parseInt(sizeString);
			}
			catch(NumberFormatException nf)
			{
				return def;
			}

			try
			{
				style = Integer.parseInt(styleString);
			}
			catch(NumberFormatException nf)
			{
				return def;
			}

			return new Font(family,style,size);
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/StandaloneTextArea.java" startline="424" startcolumn="3" endline="450" endcolumn="3">
if(family == null || sizeString == null || styleString == null)
			return def;
		else
		{
			int size;

			try
			{
				size = Integer.parseInt(sizeString);
			}
			catch(NumberFormatException nf)
			{
				return def;
			}

			int style;
			try
			{
				style = Integer.parseInt(styleString);
			}
			catch(NumberFormatException nf)
			{
				return def;
			}

			return new Font(family,style,size);
		}
</source>
    </clone>
    <clone nlines="10" distance="6">
        <source file="org/gjt/sp/jedit/bsh/NameSpace.java" startline="1072" startcolumn="9" endline="1081" endcolumn="9">
for(int i=0; i&lt;importedObjects.size(); i++)
        {
            Object object = importedObjects.elementAt(i);
            Class clas = object.getClass();
            Field field = Reflect.resolveJavaField(
                clas, name, false/*onlyStatic*/ );
            if ( field != null )
                return new Variable(
                    name, field.getType(), new LHS( object, field ) );
        }
</source>
        <source file="org/gjt/sp/jedit/bsh/NameSpace.java" startline="1071" startcolumn="9" endline="1081" endcolumn="9">
if ( importedObjects != null )
        for(int i=0; i&lt;importedObjects.size(); i++)
        {
            Object object = importedObjects.elementAt(i);
            Class clas = object.getClass();
            Field field = Reflect.resolveJavaField(
                clas, name, false/*onlyStatic*/ );
            if ( field != null )
                return new Variable(
                    name, field.getType(), new LHS( object, field ) );
        }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3779" startcolumn="5" endline="3797" endcolumn="5">
if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4079" startcolumn="5" endline="4097" endcolumn="5">
if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3779" startcolumn="5" endline="3797" endcolumn="5">
if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5180" startcolumn="5" endline="5198" endcolumn="5">
if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3779" startcolumn="5" endline="3797" endcolumn="5">
if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5554" startcolumn="5" endline="5572" endcolumn="5">
if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4024" startcolumn="5" endline="4042" endcolumn="5">
if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4079" startcolumn="5" endline="4097" endcolumn="5">
if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4024" startcolumn="5" endline="4042" endcolumn="5">
if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5180" startcolumn="5" endline="5198" endcolumn="5">
if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4024" startcolumn="5" endline="4042" endcolumn="5">
if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5554" startcolumn="5" endline="5572" endcolumn="5">
if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4370" startcolumn="5" endline="4388" endcolumn="5">
if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4079" startcolumn="5" endline="4097" endcolumn="5">
if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4370" startcolumn="5" endline="4388" endcolumn="5">
if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5180" startcolumn="5" endline="5198" endcolumn="5">
if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4370" startcolumn="5" endline="4388" endcolumn="5">
if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5554" startcolumn="5" endline="5572" endcolumn="5">
if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4646" startcolumn="5" endline="4664" endcolumn="5">
if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4079" startcolumn="5" endline="4097" endcolumn="5">
if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4646" startcolumn="5" endline="4664" endcolumn="5">
if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5180" startcolumn="5" endline="5198" endcolumn="5">
if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4646" startcolumn="5" endline="4664" endcolumn="5">
if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5554" startcolumn="5" endline="5572" endcolumn="5">
if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="20" distance="6">
        <source file="org/gjt/sp/jedit/textarea/ChunkCache.java" startline="467" startcolumn="3" endline="486" endcolumn="3">
if(subregion != 0 &amp;&amp; !ignoreWrap)
		{
			return textArea.getLineStartOffset(physicalLine)
				+ xToSubregionOffset(lineInfos[subregion - 1],
				x,true);
		}
		else
		{
			int prevLine = textArea.displayManager
				.getPrevVisibleLine(physicalLine);

			if(prevLine == -1)
				return -1;
			else
			{
				return textArea.getLineStartOffset(prevLine)
					+ xToSubregionOffset(prevLine,-1,
					x,true);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/ChunkCache.java" startline="430" startcolumn="3" endline="449" endcolumn="3">
if(subregion != lineInfos.length - 1 &amp;&amp; !ignoreWrap)
		{
			return textArea.getLineStartOffset(physicalLine)
				+ xToSubregionOffset(lineInfos[subregion + 1],
				x,true);
		}
		else
		{
			int nextLine = textArea.displayManager
				.getNextVisibleLine(physicalLine);

			if(nextLine == -1)
				return -1;
			else
			{
				return textArea.getLineStartOffset(nextLine)
					+ xToSubregionOffset(nextLine,0,
					x,true);
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="org/jedit/io/Native2ASCIIEncoding.java" startline="388" startcolumn="6" endline="403" endcolumn="6">
if (!(((e &gt;= '0') &amp;&amp; (e &lt;= '9')) || ((e &gt;= 'a') &amp;&amp; (e &lt;= 'f')) || ((e &gt;= 'A')
													   &amp;&amp; (e
													       &lt;= 'F'))))
					{
						// add to result buffer and continue to next character
						// if permissive, otherwise throw exception
						if (permissive)
						{
							escaped = true;
							cbuf[off + result++] = c;
							continue outer;
						} else
						{
							throw new MalformedInputException(1);
						}
					}
</source>
        <source file="org/jedit/io/Native2ASCIIEncoding.java" startline="264" startcolumn="5" endline="276" endcolumn="5">
if (!(((e &gt;= '0') &amp;&amp; (e &lt;= '9')) || ((e &gt;= 'a') &amp;&amp; (e &lt;= 'f')) || ((e &gt;= 'A') &amp;&amp; (e
														  &lt;= 'F'))))
				{
					if (permissive)
					{
						escaped = true;
						in.unread(escape, 0, read);
						return result;
					} else
					{
						throw new MalformedInputException(1);
					}
				}
</source>
    </clone>
    <clone nlines="21" distance="1">
        <source file="installer/CBZip2OutputStream.java" startline="880" startcolumn="13" endline="900" endcolumn="13">
while( true )
            {
                switch( zPend % 2 )
                {
                    case 0:
                        m_szptr[ wr ] = (short)RUNA;
                        wr++;
                        m_mtfFreq[ RUNA ]++;
                        break;
                    case 1:
                        m_szptr[ wr ] = (short)RUNB;
                        wr++;
                        m_mtfFreq[ RUNB ]++;
                        break;
                }
                if( zPend &lt; 2 )
                {
                    break;
                }
                zPend = ( zPend - 2 ) / 2;
            }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="846" startcolumn="21" endline="867" endcolumn="21">
while( true )
                    {
                        switch( zPend % 2 )
                        {
                            case 0:
                                m_szptr[ wr ] = (short)RUNA;
                                wr++;
                                m_mtfFreq[ RUNA ]++;
                                break;
                            case 1:
                                m_szptr[ wr ] = (short)RUNB;
                                wr++;
                                m_mtfFreq[ RUNB ]++;
                                break;
                        }
                        ;
                        if( zPend &lt; 2 )
                        {
                            break;
                        }
                        zPend = ( zPend - 2 ) / 2;
                    }
</source>
    </clone>
    <clone nlines="25" distance="8">
        <source file="org/gjt/sp/jedit/io/FileVFS.java" startline="614" startcolumn="4" endline="638" endcolumn="4">
if(OperatingSystem.isUnix())
			{
				String[] cmdarray = { "chmod", Integer.toString(permissions, 8), path };

				try
				{
					Process process = Runtime.getRuntime().exec(cmdarray);
					process.getInputStream().close();
					process.getOutputStream().close();
					process.getErrorStream().close();
					// Jun 9 2004 12:40 PM
					// waitFor() hangs on some Java
					// implementations.
					/* int exitCode = process.waitFor();
					if(exitCode != 0)
						Log.log(Log.NOTICE,FileVFS.class,"chmod exited with code " + exitCode); */
				}

				// Feb 4 2000 5:30 PM
				// Catch Throwable here rather than Exception.
				// Kaffe's implementation of Runtime.exec throws java.lang.InternalError.
				catch (Throwable t)
				{
				}
			}
</source>
        <source file="org/gjt/sp/jedit/io/FileVFS.java" startline="612" startcolumn="3" endline="639" endcolumn="3">
if(permissions != 0)
		{
			if(OperatingSystem.isUnix())
			{
				String[] cmdarray = { "chmod", Integer.toString(permissions, 8), path };

				try
				{
					Process process = Runtime.getRuntime().exec(cmdarray);
					process.getInputStream().close();
					process.getOutputStream().close();
					process.getErrorStream().close();
					// Jun 9 2004 12:40 PM
					// waitFor() hangs on some Java
					// implementations.
					/* int exitCode = process.waitFor();
					if(exitCode != 0)
						Log.log(Log.NOTICE,FileVFS.class,"chmod exited with code " + exitCode); */
				}

				// Feb 4 2000 5:30 PM
				// Catch Throwable here rather than Exception.
				// Kaffe's implementation of Runtime.exec throws java.lang.InternalError.
				catch (Throwable t)
				{
				}
			}
		}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="710" startcolumn="4" endline="722" endcolumn="4">
if (minimumColWidths[col] &gt;= maximumColWidths[col])
			{
				maximumColWidths[col] = minimumColWidths[col];
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &lt; minimumColWidths[col])
			{
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &gt; maximumColWidths[col])
			{
				preferredColWidths[col] = maximumColWidths[col];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="282" startcolumn="5" endline="300" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_row_heights[row] &lt;= row_heights[row] &lt;= maximum_row_heights[row]
					// is not true by clipping to the minimum_row_heights and maximum_row_heights
					if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="710" startcolumn="4" endline="722" endcolumn="4">
if (minimumColWidths[col] &gt;= maximumColWidths[col])
			{
				maximumColWidths[col] = minimumColWidths[col];
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &lt; minimumColWidths[col])
			{
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &gt; maximumColWidths[col])
			{
				preferredColWidths[col] = maximumColWidths[col];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="307" startcolumn="5" endline="325" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_col_widths[col] &lt;= col_widths[col] &lt;= maximum_col_widths[col]
					// is not true by clipping to the minimum_col_widths and maximum_col_widths
					if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="803" startcolumn="4" endline="815" endcolumn="4">
if (minimumColWidths[col] &gt;= maximumColWidths[col])
			{
				maximumColWidths[col] = minimumColWidths[col];
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &lt; minimumColWidths[col])
			{
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &gt; maximumColWidths[col])
			{
				preferredColWidths[col] = maximumColWidths[col];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="282" startcolumn="5" endline="300" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_row_heights[row] &lt;= row_heights[row] &lt;= maximum_row_heights[row]
					// is not true by clipping to the minimum_row_heights and maximum_row_heights
					if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="803" startcolumn="4" endline="815" endcolumn="4">
if (minimumColWidths[col] &gt;= maximumColWidths[col])
			{
				maximumColWidths[col] = minimumColWidths[col];
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &lt; minimumColWidths[col])
			{
				preferredColWidths[col] = minimumColWidths[col];
			}
			else if (preferredColWidths[col] &gt; maximumColWidths[col])
			{
				preferredColWidths[col] = maximumColWidths[col];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="307" startcolumn="5" endline="325" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_col_widths[col] &lt;= col_widths[col] &lt;= maximum_col_widths[col]
					// is not true by clipping to the minimum_col_widths and maximum_col_widths
					if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="823" startcolumn="4" endline="835" endcolumn="4">
if (minimumRowHeights[row] &gt;= maximumRowHeights[row])
			{
				maximumRowHeights[row] = minimumRowHeights[row];
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &lt; minimumRowHeights[row])
			{
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &gt; maximumRowHeights[row])
			{
				preferredRowHeights[row] = maximumRowHeights[row];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="282" startcolumn="5" endline="300" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_row_heights[row] &lt;= row_heights[row] &lt;= maximum_row_heights[row]
					// is not true by clipping to the minimum_row_heights and maximum_row_heights
					if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="823" startcolumn="4" endline="835" endcolumn="4">
if (minimumRowHeights[row] &gt;= maximumRowHeights[row])
			{
				maximumRowHeights[row] = minimumRowHeights[row];
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &lt; minimumRowHeights[row])
			{
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &gt; maximumRowHeights[row])
			{
				preferredRowHeights[row] = maximumRowHeights[row];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="307" startcolumn="5" endline="325" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_col_widths[col] &lt;= col_widths[col] &lt;= maximum_col_widths[col]
					// is not true by clipping to the minimum_col_widths and maximum_col_widths
					if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="916" startcolumn="4" endline="928" endcolumn="4">
if (minimumRowHeights[row] &gt;= maximumRowHeights[row])
			{
				maximumRowHeights[row] = minimumRowHeights[row];
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &lt; minimumRowHeights[row])
			{
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &gt; maximumRowHeights[row])
			{
				preferredRowHeights[row] = maximumRowHeights[row];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="282" startcolumn="5" endline="300" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_row_heights[row] &lt;= row_heights[row] &lt;= maximum_row_heights[row]
					// is not true by clipping to the minimum_row_heights and maximum_row_heights
					if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="916" startcolumn="4" endline="928" endcolumn="4">
if (minimumRowHeights[row] &gt;= maximumRowHeights[row])
			{
				maximumRowHeights[row] = minimumRowHeights[row];
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &lt; minimumRowHeights[row])
			{
				preferredRowHeights[row] = minimumRowHeights[row];
			}
			else if (preferredRowHeights[row] &gt; maximumRowHeights[row])
			{
				preferredRowHeights[row] = maximumRowHeights[row];
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="307" startcolumn="5" endline="325" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_col_widths[col] &lt;= col_widths[col] &lt;= maximum_col_widths[col]
					// is not true by clipping to the minimum_col_widths and maximum_col_widths
					if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="287" startcolumn="6" endline="299" endcolumn="6">
if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="282" startcolumn="5" endline="300" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_row_heights[row] &lt;= row_heights[row] &lt;= maximum_row_heights[row]
					// is not true by clipping to the minimum_row_heights and maximum_row_heights
					if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="287" startcolumn="6" endline="299" endcolumn="6">
if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="307" startcolumn="5" endline="325" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_col_widths[col] &lt;= col_widths[col] &lt;= maximum_col_widths[col]
					// is not true by clipping to the minimum_col_widths and maximum_col_widths
					if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="312" startcolumn="6" endline="324" endcolumn="6">
if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="282" startcolumn="5" endline="300" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_row_heights[row] &lt;= row_heights[row] &lt;= maximum_row_heights[row]
					// is not true by clipping to the minimum_row_heights and maximum_row_heights
					if (minimum_row_heights[r] &gt;= maximum_row_heights[r])
					{
						maximum_row_heights[r] = minimum_row_heights[r];
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &lt; minimum_row_heights[r])
					{
						row_heights[r] = minimum_row_heights[r];
					}
					else if (row_heights[r] &gt; maximum_row_heights[r])
					{
						row_heights[r] = maximum_row_heights[r];
					}
				}
</source>
    </clone>
    <clone nlines="13" distance="6">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="312" startcolumn="6" endline="324" endcolumn="6">
if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="307" startcolumn="5" endline="325" endcolumn="5">
if (takeSizesIntoAccount)
				{
					// correct cases where
					// minimum_col_widths[col] &lt;= col_widths[col] &lt;= maximum_col_widths[col]
					// is not true by clipping to the minimum_col_widths and maximum_col_widths
					if (minimum_col_widths[c] &gt;= maximum_col_widths[c])
					{
						maximum_col_widths[c] = minimum_col_widths[c];
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &lt; minimum_col_widths[c])
					{
						col_widths[c] = minimum_col_widths[c];
					}
					else if (col_widths[c] &gt; maximum_col_widths[c])
					{
						col_widths[c] = maximum_col_widths[c];
					}
				}
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="org/gjt/sp/jedit/gui/HistoryText.java" startline="178" startcolumn="3" endline="189" endcolumn="3">
for(int i = index - 1; i &gt;= 0; i--)
		{
			String item = historyModel.getItem(i);
			if(item.startsWith(t))
			{
				text.replaceSelection(item.substring(t.length()));
				text.select(getInputStart() + t.length(),
					getDocument().getLength());
				index = i;
				return;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/HistoryText.java" startline="142" startcolumn="3" endline="153" endcolumn="3">
for(int i = index + 1; i &lt; historyModel.getSize(); i++)
		{
			String item = historyModel.getItem(i);
			if(item.startsWith(t))
			{
				text.replaceSelection(item.substring(t.length()));
				text.select(getInputStart() + t.length(),
					getDocument().getLength());
				index = i;
				return;
			}
		}
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="org/gjt/sp/jedit/bsh/classpath/BshClassPath.java" startline="260" startcolumn="4" endline="270" endcolumn="4">
for (int i=0; i&lt;compPaths.size(); i++) {
				List l = ((BshClassPath)compPaths.get(i)).getFullPath();
				// take care to remove dups
				// wish we had an ordered set collection
				Iterator it = l.iterator();
				while ( it.hasNext() ) {
					Object o = it.next();
					if ( !list.contains(o) )
						list.add( o );
				}
			}
</source>
        <source file="org/gjt/sp/jedit/bsh/classpath/BshClassPath.java" startline="259" startcolumn="3" endline="271" endcolumn="3">
if ( compPaths != null ) {
			for (int i=0; i&lt;compPaths.size(); i++) {
				List l = ((BshClassPath)compPaths.get(i)).getFullPath();
				// take care to remove dups
				// wish we had an ordered set collection
				Iterator it = l.iterator();
				while ( it.hasNext() ) {
					Object o = it.next();
					if ( !list.contains(o) )
						list.add( o );
				}
			}
		}
</source>
    </clone>
    <clone nlines="19" distance="6">
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/CodeWriter.java" startline="744" startcolumn="7" endline="762" endcolumn="7">
if (opcode == Constants.GOTO) {
        // no stack change, but end of current block (with one new successor)
        if (currentBlock != null) {
          currentBlock.maxStackSize = maxStackSize;
          addSuccessor(stackSize, label);
          currentBlock = null;
        }
      } else if (opcode == Constants.JSR) {
        if (currentBlock != null) {
          addSuccessor(stackSize + 1, label);
        }
      } else {
        // updates current stack size (max stack size unchanged because stack
        // size variation always negative in this case)
        stackSize += SIZE[opcode];
        if (currentBlock != null) {
          addSuccessor(stackSize, label);
        }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/CodeWriter.java" startline="743" startcolumn="5" endline="763" endcolumn="5">
if (computeMaxs) {
      if (opcode == Constants.GOTO) {
        // no stack change, but end of current block (with one new successor)
        if (currentBlock != null) {
          currentBlock.maxStackSize = maxStackSize;
          addSuccessor(stackSize, label);
          currentBlock = null;
        }
      } else if (opcode == Constants.JSR) {
        if (currentBlock != null) {
          addSuccessor(stackSize + 1, label);
        }
      } else {
        // updates current stack size (max stack size unchanged because stack
        // size variation always negative in this case)
        stackSize += SIZE[opcode];
        if (currentBlock != null) {
          addSuccessor(stackSize, label);
        }
      }
    }
</source>
    </clone>
    <clone nlines="18" distance="7">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="4667" startcolumn="6" endline="4684" endcolumn="30">
if(comp instanceof View)
					{
						((View)comp).getInputHandler().processKeyEvent(evt,
							View.VIEW, false);
						return true;
					}
					else if(comp == null || comp instanceof Window
						|| comp instanceof JEditTextArea)
					{
						if (comp instanceof PluginManager)
						{
							evt.setSource(comp);
							((PluginManager)comp).processKeyEvents(evt);
						}
						break;
					}
					else
						comp = comp.getParent();
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="4665" startcolumn="5" endline="4685" endcolumn="5">
for(;;)
				{
					if(comp instanceof View)
					{
						((View)comp).getInputHandler().processKeyEvent(evt,
							View.VIEW, false);
						return true;
					}
					else if(comp == null || comp instanceof Window
						|| comp instanceof JEditTextArea)
					{
						if (comp instanceof PluginManager)
						{
							evt.setSource(comp);
							((PluginManager)comp).processKeyEvents(evt);
						}
						break;
					}
					else
						comp = comp.getParent();
				}
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="1083" startcolumn="8" endline="1102" endcolumn="3">
for(int i = 0; i &lt; seg.count; i++)
		{
			char c = seg.array[seg.offset + i];
			switch(c)
			{
			case ' ':
				currentIndent++;
				if(whitespaceChars != null)
					whitespaceChars[0]++;
				break;
			case '\t':
				currentIndent += tabSize - (currentIndent
					% tabSize);
				if(whitespaceChars != null)
					whitespaceChars[0]++;
				break;
			default:
				break loop;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="1083" startcolumn="1" endline="1102" endcolumn="3">
loop:		for(int i = 0; i &lt; seg.count; i++)
		{
			char c = seg.array[seg.offset + i];
			switch(c)
			{
			case ' ':
				currentIndent++;
				if(whitespaceChars != null)
					whitespaceChars[0]++;
				break;
			case '\t':
				currentIndent += tabSize - (currentIndent
					% tabSize);
				if(whitespaceChars != null)
					whitespaceChars[0]++;
				break;
			default:
				break loop;
			}
		}
</source>
    </clone>
    <clone nlines="24" distance="4">
        <source file="installer/CBZip2OutputStream.java" startline="1293" startcolumn="17" endline="1316" endcolumn="17">
while( true )
                {
                    if( unLo &gt; unHi )
                    {
                        break;
                    }
                    n = m_block[ m_zptr[ unLo ] + d + 1 ] - med;
                    if( n == 0 )
                    {
                        int temp = 0;
                        temp = m_zptr[ unLo ];
                        m_zptr[ unLo ] = m_zptr[ ltLo ];
                        m_zptr[ ltLo ] = temp;
                        ltLo++;
                        unLo++;
                        continue;
                    }
                    ;
                    if( n &gt; 0 )
                    {
                        break;
                    }
                    unLo++;
                }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="1317" startcolumn="17" endline="1340" endcolumn="17">
while( true )
                {
                    if( unLo &gt; unHi )
                    {
                        break;
                    }
                    n = m_block[ m_zptr[ unHi ] + d + 1 ] - med;
                    if( n == 0 )
                    {
                        int temp = 0;
                        temp = m_zptr[ unHi ];
                        m_zptr[ unHi ] = m_zptr[ gtHi ];
                        m_zptr[ gtHi ] = temp;
                        gtHi--;
                        unHi--;
                        continue;
                    }
                    ;
                    if( n &lt; 0 )
                    {
                        break;
                    }
                    unHi--;
                }
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="330" startcolumn="4" endline="342" endcolumn="10">
if(".".equals(path))
				return parent;
			else if("..".equals(path))
				return getParentOfPath(parent);
			else if(path.startsWith(dd) || path.startsWith("../"))
			{
				parent = getParentOfPath(parent);
				path = path.substring(3);
			}
			else if(path.startsWith(d) || path.startsWith("./"))
				path = path.substring(2);
			else
				break;
</source>
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="328" startcolumn="3" endline="343" endcolumn="3">
for(;;)
		{
			if(".".equals(path))
				return parent;
			else if("..".equals(path))
				return getParentOfPath(parent);
			else if(path.startsWith(dd) || path.startsWith("../"))
			{
				parent = getParentOfPath(parent);
				path = path.substring(3);
			}
			else if(path.startsWith(d) || path.startsWith("./"))
				path = path.substring(2);
			else
				break;
		}
</source>
    </clone>
    <clone nlines="25" distance="6">
        <source file="installer/CBZip2OutputStream.java" startline="877" startcolumn="9" endline="901" endcolumn="9">
if( zPend &gt; 0 )
        {
            zPend--;
            while( true )
            {
                switch( zPend % 2 )
                {
                    case 0:
                        m_szptr[ wr ] = (short)RUNA;
                        wr++;
                        m_mtfFreq[ RUNA ]++;
                        break;
                    case 1:
                        m_szptr[ wr ] = (short)RUNB;
                        wr++;
                        m_mtfFreq[ RUNB ]++;
                        break;
                }
                if( zPend &lt; 2 )
                {
                    break;
                }
                zPend = ( zPend - 2 ) / 2;
            }
        }
</source>
        <source file="installer/CBZip2OutputStream.java" startline="843" startcolumn="17" endline="870" endcolumn="17">
if( zPend &gt; 0 )
                {
                    zPend--;
                    while( true )
                    {
                        switch( zPend % 2 )
                        {
                            case 0:
                                m_szptr[ wr ] = (short)RUNA;
                                wr++;
                                m_mtfFreq[ RUNA ]++;
                                break;
                            case 1:
                                m_szptr[ wr ] = (short)RUNB;
                                wr++;
                                m_mtfFreq[ RUNB ]++;
                                break;
                        }
                        ;
                        if( zPend &lt; 2 )
                        {
                            break;
                        }
                        zPend = ( zPend - 2 ) / 2;
                    }
                    ;
                    zPend = 0;
                }
</source>
    </clone>
    <clone nlines="22" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3777" startcolumn="5" endline="3798" endcolumn="5">
if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4022" startcolumn="5" endline="4043" endcolumn="5">
if (!jj_semLA || jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="3">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4368" startcolumn="5" endline="4389" endcolumn="5">
if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4022" startcolumn="5" endline="4043" endcolumn="5">
if (!jj_semLA || jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3777" startcolumn="5" endline="3798" endcolumn="5">
if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4077" startcolumn="5" endline="4098" endcolumn="5">
if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3777" startcolumn="5" endline="3798" endcolumn="5">
if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5178" startcolumn="5" endline="5199" endcolumn="5">
if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3777" startcolumn="5" endline="3798" endcolumn="5">
if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5552" startcolumn="5" endline="5573" endcolumn="5">
if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4368" startcolumn="5" endline="4389" endcolumn="5">
if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4077" startcolumn="5" endline="4098" endcolumn="5">
if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4368" startcolumn="5" endline="4389" endcolumn="5">
if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5178" startcolumn="5" endline="5199" endcolumn="5">
if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="22" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4368" startcolumn="5" endline="4389" endcolumn="5">
if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5552" startcolumn="5" endline="5573" endcolumn="5">
if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    }
    }
    }
    }
    }
</source>
    </clone>
    <clone nlines="16" distance="6">
        <source file="net/sourceforge/jarbundler/JarBundler.java" startline="1269" startcolumn="3" endline="1284" endcolumn="3">
try {

			for (Iterator execIter = mExecAttrs.iterator(); execIter.hasNext();) {
				File src = (File) execIter.next();
				File dest = new File(mMacOsDir, src.getName());

				if (mVerbose)
					log("Copying exec file to \"" + bundlePath(dest) + "\"");


				mFileUtils.copyFile(src, dest);
				setExecutable(dest);
			}
		} catch (IOException ex) {
			throw new BuildException("Cannot copy exec file: " + ex);
		}
</source>
        <source file="net/sourceforge/jarbundler/JarBundler.java" startline="1139" startcolumn="3" endline="1154" endcolumn="3">
try {

			for (Iterator jarIter = mJarAttrs.iterator(); jarIter.hasNext();) {
				File src = (File) jarIter.next();
				File dest = new File(mJavaDir, src.getName());

				if (mVerbose)
					log("Copying JAR file to \"" + bundlePath(dest) + "\"");


				mFileUtils.copyFile(src, dest);
				bundleProperties.addToClassPath(dest.getName());
			}
		} catch (IOException ex) {
			throw new BuildException("Cannot copy jar file: " + ex);
		}
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="1186" startcolumn="8" endline="1200" endcolumn="3">
for(;;)
		{
			if(prefixLength &gt;= first.length())
				break loop;
			char ch = first.charAt(prefixLength);
			for(int i = 1; i &lt; str.length; i++)
			{
				String s = str[i].toString();
				if(prefixLength &gt;= s.length())
					break loop;
				if(!compareChars(s.charAt(prefixLength),ch,ignoreCase))
					break loop;
			}
			prefixLength++;
		}
</source>
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="1186" startcolumn="1" endline="1200" endcolumn="3">
loop:		for(;;)
		{
			if(prefixLength &gt;= first.length())
				break loop;
			char ch = first.charAt(prefixLength);
			for(int i = 1; i &lt; str.length; i++)
			{
				String s = str[i].toString();
				if(prefixLength &gt;= s.length())
					break loop;
				if(!compareChars(s.charAt(prefixLength),ch,ignoreCase))
					break loop;
			}
			prefixLength++;
		}
</source>
    </clone>
    <clone nlines="17" distance="8">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="425" startcolumn="7" endline="441" endcolumn="7">
switch (which)
						{
							case MINIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMinimumSize().height);
								break;

							case MAXIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMaximumSize().height);
								break;

							case PREFERRED:
								row_height = Math.max(row_height, parent.getComponent(i).getPreferredSize().height);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="423" startcolumn="6" endline="442" endcolumn="6">
if (i &lt; ncomponents)
					{
						switch (which)
						{
							case MINIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMinimumSize().height);
								break;

							case MAXIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMaximumSize().height);
								break;

							case PREFERRED:
								row_height = Math.max(row_height, parent.getComponent(i).getPreferredSize().height);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
					}
</source>
    </clone>
    <clone nlines="17" distance="8">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="425" startcolumn="7" endline="441" endcolumn="7">
switch (which)
						{
							case MINIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMinimumSize().height);
								break;

							case MAXIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMaximumSize().height);
								break;

							case PREFERRED:
								row_height = Math.max(row_height, parent.getComponent(i).getPreferredSize().height);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="453" startcolumn="6" endline="472" endcolumn="6">
if (i &lt; ncomponents)
					{
						switch (which)
						{
							case MINIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMinimumSize().width);
								break;

							case MAXIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMaximumSize().width);
								break;

							case PREFERRED:
								col_width = Math.max(col_width, parent.getComponent(i).getPreferredSize().width);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
					}
</source>
    </clone>
    <clone nlines="17" distance="8">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="455" startcolumn="7" endline="471" endcolumn="7">
switch (which)
						{
							case MINIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMinimumSize().width);
								break;

							case MAXIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMaximumSize().width);
								break;

							case PREFERRED:
								col_width = Math.max(col_width, parent.getComponent(i).getPreferredSize().width);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="423" startcolumn="6" endline="442" endcolumn="6">
if (i &lt; ncomponents)
					{
						switch (which)
						{
							case MINIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMinimumSize().height);
								break;

							case MAXIMUM:
								row_height = Math.max(row_height, parent.getComponent(i).getMaximumSize().height);
								break;

							case PREFERRED:
								row_height = Math.max(row_height, parent.getComponent(i).getPreferredSize().height);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
					}
</source>
    </clone>
    <clone nlines="17" distance="8">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="455" startcolumn="7" endline="471" endcolumn="7">
switch (which)
						{
							case MINIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMinimumSize().width);
								break;

							case MAXIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMaximumSize().width);
								break;

							case PREFERRED:
								col_width = Math.max(col_width, parent.getComponent(i).getPreferredSize().width);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="453" startcolumn="6" endline="472" endcolumn="6">
if (i &lt; ncomponents)
					{
						switch (which)
						{
							case MINIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMinimumSize().width);
								break;

							case MAXIMUM:
								col_width = Math.max(col_width, parent.getComponent(i).getMaximumSize().width);
								break;

							case PREFERRED:
								col_width = Math.max(col_width, parent.getComponent(i).getPreferredSize().width);
								break;

							default:
								throw new InternalError("Missing case branch for LayoutSize: " + which);
						}
					}
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="191" startcolumn="6" endline="204" endcolumn="6">
if (null != tag.lastHashChars)
					{
						rules.addRule(ParserRule.createRegexpSequenceRule(
							tag.lastStartPosMatch,tag.lastHashChars.toCharArray(),
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,findParent("RULES").lastIgnoreCase));
					}
					else
					{
						rules.addRule(ParserRule.createRegexpSequenceRule(
							tag.lastHashChar,tag.lastStartPosMatch,
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,findParent("RULES").lastIgnoreCase));
					}
</source>
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="316" startcolumn="6" endline="331" endcolumn="6">
if (null != tag.lastHashChars)
					{
						rules.addRule(ParserRule.createRegexpEOLSpanRule(
							tag.lastStartPosMatch,tag.lastHashChars.toCharArray(),
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,tag.lastMatchType,
							findParent("RULES").lastIgnoreCase));
					}
					else
					{
						rules.addRule(ParserRule.createRegexpEOLSpanRule(
							tag.lastHashChar,tag.lastStartPosMatch,
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,tag.lastMatchType,
							findParent("RULES").lastIgnoreCase));
					}
</source>
    </clone>
    <clone nlines="21" distance="8">
        <source file="org/gjt/sp/jedit/syntax/Chunk.java" startline="521" startcolumn="4" endline="541" endcolumn="4">
if (fontSubstSystemFontsEnabled)
			{
				Font[] systemFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();

				fontSubstList = new Font[preferredFonts.length +
							 systemFonts.length];

				System.arraycopy(preferredFonts, 0, fontSubstList, 0,
						 preferredFonts.length);

				System.arraycopy(systemFonts, 0, fontSubstList,
						 preferredFonts.length,
						 systemFonts.length);
			}
			else
			{
				fontSubstList = new Font[preferredFonts.length];

				System.arraycopy(preferredFonts, 0, fontSubstList, 0,
						 preferredFonts.length);
			}
</source>
        <source file="org/gjt/sp/jedit/syntax/Chunk.java" startline="519" startcolumn="3" endline="542" endcolumn="3">
if (fontSubstList == null)
		{
			if (fontSubstSystemFontsEnabled)
			{
				Font[] systemFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();

				fontSubstList = new Font[preferredFonts.length +
							 systemFonts.length];

				System.arraycopy(preferredFonts, 0, fontSubstList, 0,
						 preferredFonts.length);

				System.arraycopy(systemFonts, 0, fontSubstList,
						 preferredFonts.length,
						 systemFonts.length);
			}
			else
			{
				fontSubstList = new Font[preferredFonts.length];

				System.arraycopy(preferredFonts, 0, fontSubstList, 0,
						 preferredFonts.length);
			}
		}
</source>
    </clone>
    <clone nlines="31" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2357" startcolumn="7" endline="2387" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ArgumentList();
        break;
      default:
        ;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3034" startcolumn="7" endline="3065" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
                         jjtn000.hasExpression=true;
        break;
      default:
        ;
      }
</source>
    </clone>
    <clone nlines="31" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2357" startcolumn="7" endline="2387" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ArgumentList();
        break;
      default:
        ;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3067" startcolumn="7" endline="3098" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ForUpdate();
                        jjtn000.hasForUpdate=true;
        break;
      default:
        ;
      }
</source>
    </clone>
    <clone nlines="31" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3395" startcolumn="7" endline="3425" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        ;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3034" startcolumn="7" endline="3065" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
                         jjtn000.hasExpression=true;
        break;
      default:
        ;
      }
</source>
    </clone>
    <clone nlines="31" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3395" startcolumn="7" endline="3425" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        ;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3067" startcolumn="7" endline="3098" endcolumn="7">
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ForUpdate();
                        jjtn000.hasForUpdate=true;
        break;
      default:
        ;
      }
</source>
    </clone>
    <clone nlines="26" distance="7">
        <source file="org/gjt/sp/jedit/textarea/RangeMap.java" startline="114" startcolumn="4" endline="139" endcolumn="4">
switch(end - start)
			{
			case 0:
				lastfvmget = start;
				break loop;
			case 1:
				int value = fvm[end];
				if(value &lt;= line)
					lastfvmget = end;
				else
					lastfvmget = start;
				break loop;
			default:
				int pivot = (end + start) / 2;
				value = fvm[pivot];
				if(value == line)
				{
					lastfvmget = pivot;
					break loop;
				}
				else if(value &lt; line)
					start = pivot;
				else
					end = pivot - 1;
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/textarea/RangeMap.java" startline="112" startcolumn="8" endline="140" endcolumn="3">
for(;;)
		{
			switch(end - start)
			{
			case 0:
				lastfvmget = start;
				break loop;
			case 1:
				int value = fvm[end];
				if(value &lt;= line)
					lastfvmget = end;
				else
					lastfvmget = start;
				break loop;
			default:
				int pivot = (end + start) / 2;
				value = fvm[pivot];
				if(value == line)
				{
					lastfvmget = pivot;
					break loop;
				}
				else if(value &lt; line)
					start = pivot;
				else
					end = pivot - 1;
				break;
			}
		}
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="org/gjt/sp/jedit/gui/ExtendedGridLayout.java" startline="568" startcolumn="6" endline="583" endcolumn="6">
for (int i=start ; i&lt;stop ; i++)
					{
						if ((freeSize != 0) &amp;&amp;
						    (!checkBounds ||
						     (checkBounds &amp;&amp;
						      (grow &amp;&amp; (preferredElementSizes[i] &lt; maximumElementSizes[i])) ||
						      (!grow &amp;&amp; (preferredElementSizes[i] &gt; minimumElementSizes[i])))))
						{
							preferredElementSizes[i] += (grow ? 1 : -1);
							if (0 &gt; preferredElementSizes[i])
							{
								preferredElementSizes[i] = 0;
							}
							freeSize--;
						}
					}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="572" startcolumn="7" endline="587" endcolumn="7">
for (int i = 0 ; i &lt; nelements ; i++)
						{
							if ((free_size != 0) &amp;&amp;
							    (!checkBounds ||
							     (checkBounds &amp;&amp;
							      (grow &amp;&amp; (element_sizes[i] &lt; maximum_element_sizes[i])) ||
							      (!grow &amp;&amp; (element_sizes[i] &gt; minimum_element_sizes[i])))))
							{
								element_sizes[i] += (grow ? 1 : -1);
								if (0 &gt; element_sizes[i])
								{
									element_sizes[i] = 0;
								}
								free_size--;
							}
						}
</source>
    </clone>
    <clone nlines="24" distance="2">
        <source file="org/gjt/sp/jedit/browser/VFSDirectoryEntryTableModel.java" startline="331" startcolumn="16" endline="354" endcolumn="3">
for(int i = 0; i &lt; attrs.length; i++)
		{
			Iterator&lt;ExtendedAttribute&gt; iter = extAttrs.iterator();
			while(iter.hasNext())
			{
				ExtendedAttribute attr = iter.next();
				if(attrs[i].equals(attr.name))
				{
					if(--attr.ref == 0)
					{
						// we no longer have any
						// dirs using this extended
						// attribute
						iter.remove();
					}

					continue vfs_attr_loop;
				}
			}

			// this vfs has an extended attribute which is not
			// in the list ???
			Log.log(Log.WARNING,this,"We forgot about " + attrs[i]);
		}
</source>
        <source file="org/gjt/sp/jedit/browser/VFSDirectoryEntryTableModel.java" startline="331" startcolumn="1" endline="354" endcolumn="3">
vfs_attr_loop:	for(int i = 0; i &lt; attrs.length; i++)
		{
			Iterator&lt;ExtendedAttribute&gt; iter = extAttrs.iterator();
			while(iter.hasNext())
			{
				ExtendedAttribute attr = iter.next();
				if(attrs[i].equals(attr.name))
				{
					if(--attr.ref == 0)
					{
						// we no longer have any
						// dirs using this extended
						// attribute
						iter.remove();
					}

					continue vfs_attr_loop;
				}
			}

			// this vfs has an extended attribute which is not
			// in the list ???
			Log.log(Log.WARNING,this,"We forgot about " + attrs[i]);
		}
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="1140" startcolumn="8" endline="1155" endcolumn="3">
for(;;)
		{
			String s = str.get(0);
			if(prefixLength &gt;= s.length())
				break loop;
			char ch = s.charAt(prefixLength);
			for(int i = 1; i &lt; str.size(); i++)
			{
				s = str.get(i);
				if(prefixLength &gt;= s.length())
					break loop;
				if(!compareChars(s.charAt(prefixLength),ch,ignoreCase))
					break loop;
			}
			prefixLength++;
		}
</source>
        <source file="org/gjt/sp/jedit/MiscUtilities.java" startline="1140" startcolumn="1" endline="1155" endcolumn="3">
loop:		for(;;)
		{
			String s = str.get(0);
			if(prefixLength &gt;= s.length())
				break loop;
			char ch = s.charAt(prefixLength);
			for(int i = 1; i &lt; str.size(); i++)
			{
				s = str.get(i);
				if(prefixLength &gt;= s.length())
					break loop;
				if(!compareChars(s.charAt(prefixLength),ch,ignoreCase))
					break loop;
			}
			prefixLength++;
		}
</source>
    </clone>
    <clone nlines="27" distance="8">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2580" startcolumn="8" endline="2606" endcolumn="3">
for(int i = lineNo + 1; i &lt; getLineCount(); i++)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineStartOffset(i);
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2875" startcolumn="8" endline="2901" endcolumn="3">
for(int i = lineNo - 1; i &gt;= 0; i--)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineEndOffset(i) - 1;
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
    </clone>
    <clone nlines="27" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2580" startcolumn="8" endline="2606" endcolumn="3">
for(int i = lineNo + 1; i &lt; getLineCount(); i++)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineStartOffset(i);
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2580" startcolumn="1" endline="2606" endcolumn="3">
loop:		for(int i = lineNo + 1; i &lt; getLineCount(); i++)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineStartOffset(i);
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
    </clone>
    <clone nlines="27" distance="2">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2875" startcolumn="8" endline="2901" endcolumn="3">
for(int i = lineNo - 1; i &gt;= 0; i--)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineEndOffset(i) - 1;
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2875" startcolumn="1" endline="2901" endcolumn="3">
loop:		for(int i = lineNo - 1; i &gt;= 0; i--)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineEndOffset(i) - 1;
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
    </clone>
    <clone nlines="27" distance="8">
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2580" startcolumn="1" endline="2606" endcolumn="3">
loop:		for(int i = lineNo + 1; i &lt; getLineCount(); i++)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineStartOffset(i);
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="2875" startcolumn="1" endline="2901" endcolumn="3">
loop:		for(int i = lineNo - 1; i &gt;= 0; i--)
		{
			if(!displayManager.isLineVisible(i))
				continue;

			getLineText(i,lineSegment);

			for(int j = 0; j &lt; lineSegment.count; j++)
			{
				switch(lineSegment.array[lineSegment.offset + j])
				{
				case ' ':
				case '\t':
					break;
				default:
					if(foundBlank)
					{
						newCaret = getLineEndOffset(i) - 1;
						break loop;
					}
					else
						continue loop;
				}
			}

			foundBlank = true;
		}
</source>
    </clone>
    <clone nlines="20" distance="8">
        <source file="org/gjt/sp/jedit/pluginmgr/PluginList.java" startline="94" startcolumn="4" endline="113" endcolumn="4">
try
			{

				File f = new File(path);
				if (!f.canRead()) downloadIt = true;
				long currentTime = System.currentTimeMillis();
				long age = currentTime - f.lastModified();
				/* By default only download plugin lists every 5 minutes */
				long interval = jEdit.getIntegerProperty("plugin-manager.list-cache.minutes", 5) * MILLISECONDS_PER_MINUTE;
				if (age &gt; interval)
				{
					Log.log(Log.MESSAGE, this, "PluginList cached copy too old. Downloading from mirror. ");
					downloadIt = true;
				}
			}
			catch (Exception e)
			{
				Log.log(Log.MESSAGE, this, "No cached copy. Downloading from mirror. ");
				downloadIt = true;
			}
</source>
        <source file="org/gjt/sp/jedit/pluginmgr/PluginList.java" startline="92" startcolumn="3" endline="114" endcolumn="3">
if (path != null)
		{
			try
			{

				File f = new File(path);
				if (!f.canRead()) downloadIt = true;
				long currentTime = System.currentTimeMillis();
				long age = currentTime - f.lastModified();
				/* By default only download plugin lists every 5 minutes */
				long interval = jEdit.getIntegerProperty("plugin-manager.list-cache.minutes", 5) * MILLISECONDS_PER_MINUTE;
				if (age &gt; interval)
				{
					Log.log(Log.MESSAGE, this, "PluginList cached copy too old. Downloading from mirror. ");
					downloadIt = true;
				}
			}
			catch (Exception e)
			{
				Log.log(Log.MESSAGE, this, "No cached copy. Downloading from mirror. ");
				downloadIt = true;
			}
		}
</source>
    </clone>
    <clone nlines="14" distance="6">
        <source file="org/gjt/sp/jedit/menu/EnhancedMenuItem.java" startline="108" startcolumn="3" endline="121" endcolumn="3">
if(shortcut != null)
		{
			Graphics2D g2 = (Graphics2D)g;
			g.setFont(acceleratorFont);
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setColor(getModel().isArmed() ?
				acceleratorSelectionForeground :
				acceleratorForeground);
			FontMetrics fm = g.getFontMetrics();
			Insets insets = getInsets();
			g.drawString(shortcut,getWidth() - (fm.stringWidth(
				shortcut) + insets.right + insets.left + 5),
				fm.getAscent() + insets.top);
		}
</source>
        <source file="org/gjt/sp/jedit/menu/EnhancedCheckBoxMenuItem.java" startline="115" startcolumn="3" endline="128" endcolumn="3">
if(shortcut != null)
		{
			Graphics2D g2 = (Graphics2D)g;
			g.setFont(EnhancedMenuItem.acceleratorFont);
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setColor(getModel().isArmed() ?
				EnhancedMenuItem.acceleratorSelectionForeground :
				EnhancedMenuItem.acceleratorForeground);
			FontMetrics fm = g.getFontMetrics();
			Insets insets = getInsets();
			g.drawString(shortcut,getWidth() - (fm.stringWidth(
				shortcut) + insets.right + insets.left + 5),
				fm.getAscent() + insets.top);
		}
</source>
    </clone>
    <clone nlines="14" distance="6">
        <source file="org/gjt/sp/jedit/menu/MarkersProvider.java" startline="129" startcolumn="4" endline="142" endcolumn="4">
if(shortcut != null)
			{
				Graphics2D g2 = (Graphics2D)g;
				g.setFont(acceleratorFont);
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
				g.setColor(getModel().isArmed() ?
					acceleratorSelectionForeground :
					acceleratorForeground);
				FontMetrics fm = g.getFontMetrics();
				Insets insets = getInsets();
				g.drawString(shortcut,getWidth() - (fm.stringWidth(
					shortcut) + insets.right + insets.left + 5),
					fm.getAscent() + insets.top);
			}
</source>
        <source file="org/gjt/sp/jedit/menu/EnhancedCheckBoxMenuItem.java" startline="115" startcolumn="3" endline="128" endcolumn="3">
if(shortcut != null)
		{
			Graphics2D g2 = (Graphics2D)g;
			g.setFont(EnhancedMenuItem.acceleratorFont);
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setColor(getModel().isArmed() ?
				EnhancedMenuItem.acceleratorSelectionForeground :
				EnhancedMenuItem.acceleratorForeground);
			FontMetrics fm = g.getFontMetrics();
			Insets insets = getInsets();
			g.drawString(shortcut,getWidth() - (fm.stringWidth(
				shortcut) + insets.right + insets.left + 5),
				fm.getAscent() + insets.top);
		}
</source>
    </clone>
    <clone nlines="29" distance="2">
        <source file="org/gjt/sp/jedit/textarea/RangeMap.java" startline="112" startcolumn="8" endline="140" endcolumn="3">
for(;;)
		{
			switch(end - start)
			{
			case 0:
				lastfvmget = start;
				break loop;
			case 1:
				int value = fvm[end];
				if(value &lt;= line)
					lastfvmget = end;
				else
					lastfvmget = start;
				break loop;
			default:
				int pivot = (end + start) / 2;
				value = fvm[pivot];
				if(value == line)
				{
					lastfvmget = pivot;
					break loop;
				}
				else if(value &lt; line)
					start = pivot;
				else
					end = pivot - 1;
				break;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/textarea/RangeMap.java" startline="112" startcolumn="1" endline="140" endcolumn="3">
loop:		for(;;)
		{
			switch(end - start)
			{
			case 0:
				lastfvmget = start;
				break loop;
			case 1:
				int value = fvm[end];
				if(value &lt;= line)
					lastfvmget = end;
				else
					lastfvmget = start;
				break loop;
			default:
				int pivot = (end + start) / 2;
				value = fvm[pivot];
				if(value == line)
				{
					lastfvmget = pivot;
					break loop;
				}
				else if(value &lt; line)
					start = pivot;
				else
					end = pivot - 1;
				break;
			}
		}
</source>
    </clone>
    <clone nlines="19" distance="8">
        <source file="org/gjt/sp/jedit/print/BufferPrinter1_4.java" startline="147" startcolumn="4" endline="165" endcolumn="4">
if(orientation.getValue()==OrientationRequested.LANDSCAPE.getValue())
			{
				pf.setOrientation(PageFormat.LANDSCAPE);
			}
			else if(orientation.getValue()==OrientationRequested.REVERSE_LANDSCAPE.getValue())
			{
				pf.setOrientation(PageFormat.REVERSE_LANDSCAPE);
			}
			else if(orientation.getValue()==OrientationRequested.PORTRAIT.getValue())
			{
				pf.setOrientation(PageFormat.PORTRAIT);
			}
			else if(orientation.getValue()==OrientationRequested.REVERSE_PORTRAIT.getValue())
			{
				//doesnt exist??
				//pf.setOrientation(PageFormat.REVERSE_PORTRAIT);
				//then just do the next best thing
				pf.setOrientation(PageFormat.PORTRAIT);
			}
</source>
        <source file="org/gjt/sp/jedit/print/BufferPrinter1_4.java" startline="145" startcolumn="3" endline="166" endcolumn="3">
if(orientation!=null)
		{
			if(orientation.getValue()==OrientationRequested.LANDSCAPE.getValue())
			{
				pf.setOrientation(PageFormat.LANDSCAPE);
			}
			else if(orientation.getValue()==OrientationRequested.REVERSE_LANDSCAPE.getValue())
			{
				pf.setOrientation(PageFormat.REVERSE_LANDSCAPE);
			}
			else if(orientation.getValue()==OrientationRequested.PORTRAIT.getValue())
			{
				pf.setOrientation(PageFormat.PORTRAIT);
			}
			else if(orientation.getValue()==OrientationRequested.REVERSE_PORTRAIT.getValue())
			{
				//doesnt exist??
				//pf.setOrientation(PageFormat.REVERSE_PORTRAIT);
				//then just do the next best thing
				pf.setOrientation(PageFormat.PORTRAIT);
			}
		}
</source>
    </clone>
    <clone nlines="22" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1153" startcolumn="7" endline="1174" endcolumn="7">
try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte001;}
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     {if (true) throw (Error)jjte001;}
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  3);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="391" startcolumn="5" endline="413" endcolumn="5">
try {
      jj_consume_token(PACKAGE);
      AmbiguousName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
</source>
    </clone>
    <clone nlines="22" distance="4">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1153" startcolumn="7" endline="1174" endcolumn="7">
try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte001;}
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     {if (true) throw (Error)jjte001;}
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  3);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2059" startcolumn="5" endline="2081" endcolumn="5">
try {
      AmbiguousName();
      Arguments();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
</source>
    </clone>
    <clone nlines="21" distance="8">
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="189" startcolumn="5" endline="209" endcolumn="5">
try
				{
					if (null != tag.lastHashChars)
					{
						rules.addRule(ParserRule.createRegexpSequenceRule(
							tag.lastStartPosMatch,tag.lastHashChars.toCharArray(),
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,findParent("RULES").lastIgnoreCase));
					}
					else
					{
						rules.addRule(ParserRule.createRegexpSequenceRule(
							tag.lastHashChar,tag.lastStartPosMatch,
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,findParent("RULES").lastIgnoreCase));
					}
				}
				catch(PatternSyntaxException re)
				{
					error("regexp",re);
				}
</source>
        <source file="org/gjt/sp/jedit/syntax/XModeHandler.java" startline="314" startcolumn="5" endline="336" endcolumn="5">
try
				{
					if (null != tag.lastHashChars)
					{
						rules.addRule(ParserRule.createRegexpEOLSpanRule(
							tag.lastStartPosMatch,tag.lastHashChars.toCharArray(),
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,tag.lastMatchType,
							findParent("RULES").lastIgnoreCase));
					}
					else
					{
						rules.addRule(ParserRule.createRegexpEOLSpanRule(
							tag.lastHashChar,tag.lastStartPosMatch,
							tag.lastStart.toString(),tag.lastDelegateSet,
							tag.lastTokenID,tag.lastMatchType,
							findParent("RULES").lastIgnoreCase));
					}
				}
				catch(PatternSyntaxException re)
				{
					error("regexp",re);
				}
</source>
    </clone>
    <clone nlines="23" distance="1">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2059" startcolumn="5" endline="2081" endcolumn="5">
try {
      AmbiguousName();
      Arguments();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="391" startcolumn="5" endline="413" endcolumn="5">
try {
      jj_consume_token(PACKAGE);
      AmbiguousName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
</source>
    </clone>
    <clone nlines="23" distance="6">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2059" startcolumn="5" endline="2081" endcolumn="5">
try {
      AmbiguousName();
      Arguments();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3497" startcolumn="5" endline="3520" endcolumn="5">
try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
</source>
    </clone>
    <clone nlines="19" distance="2">
        <source file="org/gjt/sp/jedit/jEdit.java" startline="4274" startcolumn="3" endline="4292" endcolumn="3">
for (String name : list)
		{
			if (!name.toLowerCase().endsWith(".jar"))
				continue loop;

			String path = MiscUtilities.constructPath(dir, name);

			for (int j = 0; j &lt; jars.size(); j++)
			{
				PluginJAR jar = jars.elementAt(j);
				String jarPath = jar.getPath();

				if (path.equals(jarPath)
				    || name.equals(MiscUtilities.getFileName(jarPath)) &amp;&amp; !new File(jarPath).exists())
					continue loop;
			}

			returnValue.add(path);
		}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="4273" startcolumn="1" endline="4292" endcolumn="3">
loop:
		for (String name : list)
		{
			if (!name.toLowerCase().endsWith(".jar"))
				continue loop;

			String path = MiscUtilities.constructPath(dir, name);

			for (int j = 0; j &lt; jars.size(); j++)
			{
				PluginJAR jar = jars.elementAt(j);
				String jarPath = jar.getPath();

				if (path.equals(jarPath)
				    || name.equals(MiscUtilities.getFileName(jarPath)) &amp;&amp; !new File(jarPath).exists())
					continue loop;
			}

			returnValue.add(path);
		}
</source>
    </clone>
    <clone nlines="23" distance="5">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="391" startcolumn="5" endline="413" endcolumn="5">
try {
      jj_consume_token(PACKAGE);
      AmbiguousName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3497" startcolumn="5" endline="3520" endcolumn="5">
try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
</source>
    </clone>
    <clone nlines="26" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1314" startcolumn="5" endline="1339" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_10;
      }
      t = jj_consume_token(XOR);
      AndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1313" startcolumn="5" endline="1339" endcolumn="5">
label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_10;
      }
      t = jj_consume_token(XOR);
      AndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="25" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1058" startcolumn="5" endline="1082" endcolumn="5">
try {
      PrimaryExpression();
      op = AssignmentOperator();
                                    jjtn000.operator = op;
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="2909" startcolumn="5" endline="2934" endcolumn="5">
try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
</source>
    </clone>
    <clone nlines="36" distance="2">
        <source file="org/gjt/sp/jedit/search/BoyerMooreSearchMatcher.java" startline="176" startcolumn="3" endline="211" endcolumn="3">
while (anchor + pattern_end &lt; text.length())
		{
			if(Thread.interrupted())
				throw new InterruptedException();

			for (pos = pattern_end; pos &gt;= 0; --pos)
			{
				ch = text.charAt(pos + anchor);
				if(ignoreCase)
					ch = Character.toUpperCase(ch);

				// pattern test
				if ((reverse ? ch != pattern[pattern_end - pos]
					: ch != pattern[pos]))
				{
					// character mismatch, determine how many characters to skip

					// heuristic #1
					bad_char = pos - skip[getSkipIndex(ch)];

					// heuristic #2
					good_suffix = suffix[pos];

					// skip the greater of the two distances provided by the
					// heuristics
					int skip_index = (bad_char &gt; good_suffix) ? bad_char : good_suffix;
					anchor += skip_index;

					// go back to the while loop
					continue SEARCH;
				}
			}

			// MATCH: return the position of its first character
			return anchor;
		}
</source>
        <source file="org/gjt/sp/jedit/search/BoyerMooreSearchMatcher.java" startline="175" startcolumn="3" endline="211" endcolumn="3">
SEARCH:
		while (anchor + pattern_end &lt; text.length())
		{
			if(Thread.interrupted())
				throw new InterruptedException();

			for (pos = pattern_end; pos &gt;= 0; --pos)
			{
				ch = text.charAt(pos + anchor);
				if(ignoreCase)
					ch = Character.toUpperCase(ch);

				// pattern test
				if ((reverse ? ch != pattern[pattern_end - pos]
					: ch != pattern[pos]))
				{
					// character mismatch, determine how many characters to skip

					// heuristic #1
					bad_char = pos - skip[getSkipIndex(ch)];

					// heuristic #2
					good_suffix = suffix[pos];

					// skip the greater of the two distances provided by the
					// heuristics
					int skip_index = (bad_char &gt; good_suffix) ? bad_char : good_suffix;
					anchor += skip_index;

					// go back to the while loop
					continue SEARCH;
				}
			}

			// MATCH: return the position of its first character
			return anchor;
		}
</source>
    </clone>
    <clone nlines="32" distance="6">
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="200" startcolumn="9" endline="237" endcolumn="4">
if (node instanceof String)
			{
				label = jEdit.getProperty("options."
					+ node + ".label");
				optionPane = deferredOptionPanes.get(node);
				if(optionPane == null)
				{
					String propName = "options." + node + ".code";
					String code = jEdit.getProperty(propName);
					if(code != null)
					{
						optionPane = (OptionPane)
							BeanShell.eval(
							jEdit.getActiveView(),
							BeanShell.getNameSpace(),
							code
						);

						if(optionPane != null)
						{
							deferredOptionPanes.put(
								node,optionPane);
						}
						else
							continue;
					}
					else
					{
						Log.log(Log.ERROR,this,propName
							+ " not defined");
						continue;
					}
				}
			}
			else
			{
				continue;
			}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="148" startcolumn="9" endline="179" endcolumn="4">
if (node instanceof String)
			{
				label = jEdit.getProperty("options." + node + ".label");
				optionPane = (OptionPane) deferredOptionPanes.get((String) node);
				if (optionPane == null)
				{
					String propName = "options." + node + ".code";
					String code = jEdit.getProperty(propName);
					if (code != null)
					{
						optionPane = (OptionPane) BeanShell.eval(jEdit
							.getActiveView(), BeanShell.getNameSpace(),
							code);

						if (optionPane != null)
						{
							deferredOptionPanes.put(node, optionPane);
						}
						else
							continue;
					}
					else
					{
						Log.log(Log.ERROR, this, propName + " not defined");
						continue;
					}
				}
			}
			else
			{
				continue;
			}
</source>
    </clone>
    <clone nlines="33" distance="7">
        <source file="org/gjt/sp/jedit/buffer/LineManager.java" startline="83" startcolumn="4" endline="115" endcolumn="4">
switch(end - start)
			{
			case 0:
				if(getLineEndOffset(start) &lt;= offset)
					getLineOfOffsetLine = start + 1;
				else
					getLineOfOffsetLine = start;
				return getLineOfOffsetLine;
			case 1:
				if(getLineEndOffset(start) &lt;= offset)
				{
					if(getLineEndOffset(end) &lt;= offset)
						getLineOfOffsetLine = end + 1;
					else
						getLineOfOffsetLine = end;
				}
				else
					getLineOfOffsetLine = start;
				return getLineOfOffsetLine;
			default:
				int pivot = (end + start) / 2;
				int value = getLineEndOffset(pivot);
				if(value == offset)
				{
					getLineOfOffsetLine = pivot + 1; 
					return getLineOfOffsetLine;
				}
				else if(value &lt; offset)
					start = pivot + 1;
				else
					end = pivot - 1;
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/buffer/LineManager.java" startline="81" startcolumn="3" endline="116" endcolumn="3">
for(;;)
		{
			switch(end - start)
			{
			case 0:
				if(getLineEndOffset(start) &lt;= offset)
					getLineOfOffsetLine = start + 1;
				else
					getLineOfOffsetLine = start;
				return getLineOfOffsetLine;
			case 1:
				if(getLineEndOffset(start) &lt;= offset)
				{
					if(getLineEndOffset(end) &lt;= offset)
						getLineOfOffsetLine = end + 1;
					else
						getLineOfOffsetLine = end;
				}
				else
					getLineOfOffsetLine = start;
				return getLineOfOffsetLine;
			default:
				int pivot = (end + start) / 2;
				int value = getLineEndOffset(pivot);
				if(value == offset)
				{
					getLineOfOffsetLine = pivot + 1; 
					return getLineOfOffsetLine;
				}
				else if(value &lt; offset)
					start = pivot + 1;
				else
					end = pivot - 1;
				break;
			}
		}
</source>
    </clone>
    <clone nlines="21" distance="3">
        <source file="org/gjt/sp/jedit/gui/FilteredTableModel.java" startline="140" startcolumn="3" endline="160" endcolumn="17">
if (filter != null &amp;&amp; !filter.isEmpty())
		{
			int size = delegated.getRowCount();
			filter = prepareFilter(filter);
			Vector&lt;Integer&gt; indices = new Vector&lt;Integer&gt;(size);
			Map&lt;Integer, Integer&gt; invertedIndices = new HashMap&lt;Integer, Integer&gt;();
			for (int i = 0; i &lt; size; i++)
			{
				if (passFilter(i, filter))
				{
					Integer delegatedIndice = Integer.valueOf(i);
					indices.add(delegatedIndice);

					invertedIndices.put(delegatedIndice, indices.size() - 1);
				}
			}
			this.invertedIndices = invertedIndices;
			filteredIndices = indices;
		}
		else
			resetFilter();
</source>
        <source file="org/gjt/sp/jedit/gui/FilteredListModel.java" startline="115" startcolumn="5" endline="135" endcolumn="19">
if (filter != null &amp;&amp; !filter.isEmpty())
				{
					int size = delegated.getSize();
					String prepped_filter = prepareFilter(filter);
					Vector&lt;Integer&gt; indices = new Vector&lt;Integer&gt;(size);
					Map&lt;Integer, Integer&gt; invertedIndices = new HashMap&lt;Integer, Integer&gt;();
					for (int i = 0; i &lt; size; i++)
					{
						if (passFilter(i, prepped_filter))
						{
							Integer delegatedIndice = Integer.valueOf(i);
							indices.add(delegatedIndice);

							invertedIndices.put(delegatedIndice, indices.size() - 1);
						}
					}
					FilteredListModel.this.invertedIndices = invertedIndices;
					filteredIndices = indices;
				}
				else
					resetFilter();
</source>
    </clone>
    <clone nlines="28" distance="6">
        <source file="org/gjt/sp/jedit/OptionGroup.java" startline="169" startcolumn="4" endline="196" endcolumn="4">
for(int i = 0; i &lt; members.size(); i++)
			{
				Object obj = members.elementAt(i);
				String label;
				if(obj instanceof OptionPane)
				{
					String name = ((OptionPane)obj).getName();
					label = jEdit.getProperty("options."
						+ name + ".label","NO LABEL PROPERTY: "
						+ name);
				}
				else if(obj instanceof String)
				{
					label = jEdit.getProperty("options."
						+ obj + ".label","NO LABEL PROPERTY: "
						+ obj);
				}
				else if(obj instanceof OptionGroup)
					label = ((OptionGroup)obj).getLabel();
				else
					throw new InternalError();

				if(newLabel.compareToIgnoreCase(label) &lt; 0)
				{
					members.insertElementAt(newObj,i);
					return;
				}
			}
</source>
        <source file="org/gjt/sp/jedit/OptionGroup.java" startline="167" startcolumn="3" endline="197" endcolumn="3">
if(sort)
		{
			for(int i = 0; i &lt; members.size(); i++)
			{
				Object obj = members.elementAt(i);
				String label;
				if(obj instanceof OptionPane)
				{
					String name = ((OptionPane)obj).getName();
					label = jEdit.getProperty("options."
						+ name + ".label","NO LABEL PROPERTY: "
						+ name);
				}
				else if(obj instanceof String)
				{
					label = jEdit.getProperty("options."
						+ obj + ".label","NO LABEL PROPERTY: "
						+ obj);
				}
				else if(obj instanceof OptionGroup)
					label = ((OptionGroup)obj).getLabel();
				else
					throw new InternalError();

				if(newLabel.compareToIgnoreCase(label) &lt; 0)
				{
					members.insertElementAt(newObj,i);
					return;
				}
			}
		}
</source>
    </clone>
    <clone nlines="25" distance="2">
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="1209" startcolumn="7" endline="1233" endcolumn="3">
for(int counter = 0; ; counter++)
		{
			boolean startOfLine = (buffer.getLineStartOffset(
				buffer.getLineOfOffset(offset)) == offset);

			CharSequence text = buffer.getSegment(offset,end - offset);
			SearchMatcher.Match occur = matcher.nextMatch(
				text,startOfLine,endOfLine,counter == 0,false);
			if(occur == null)
				break loop;

			CharSequence found = text.subSequence(
				occur.start, occur.end);

			int length = replaceOne(view,buffer,occur,offset,
				found,smartCaseReplace);
			if(length == -1)
				offset += occur.end;
			else
			{
				offset += occur.start + length;
				end += (length - found.length());
				occurCount++;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="1209" startcolumn="1" endline="1233" endcolumn="3">
loop:	for(int counter = 0; ; counter++)
		{
			boolean startOfLine = (buffer.getLineStartOffset(
				buffer.getLineOfOffset(offset)) == offset);

			CharSequence text = buffer.getSegment(offset,end - offset);
			SearchMatcher.Match occur = matcher.nextMatch(
				text,startOfLine,endOfLine,counter == 0,false);
			if(occur == null)
				break loop;

			CharSequence found = text.subSequence(
				occur.start, occur.end);

			int length = replaceOne(view,buffer,occur,offset,
				found,smartCaseReplace);
			if(length == -1)
				offset += occur.end;
			else
			{
				offset += occur.start + length;
				end += (length - found.length());
				occurCount++;
			}
		}
</source>
    </clone>
    <clone nlines="36" distance="6">
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="196" startcolumn="9" endline="237" endcolumn="4">
if (node instanceof OptionGroup)
			{
				label = ((OptionGroup)node).getLabel();
			}
			else if (node instanceof String)
			{
				label = jEdit.getProperty("options."
					+ node + ".label");
				optionPane = deferredOptionPanes.get(node);
				if(optionPane == null)
				{
					String propName = "options." + node + ".code";
					String code = jEdit.getProperty(propName);
					if(code != null)
					{
						optionPane = (OptionPane)
							BeanShell.eval(
							jEdit.getActiveView(),
							BeanShell.getNameSpace(),
							code
						);

						if(optionPane != null)
						{
							deferredOptionPanes.put(
								node,optionPane);
						}
						else
							continue;
					}
					else
					{
						Log.log(Log.ERROR,this,propName
							+ " not defined");
						continue;
					}
				}
			}
			else
			{
				continue;
			}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="144" startcolumn="9" endline="179" endcolumn="4">
if (node instanceof OptionGroup)
			{
				label = ((OptionGroup) node).getLabel();
			}
			else if (node instanceof String)
			{
				label = jEdit.getProperty("options." + node + ".label");
				optionPane = (OptionPane) deferredOptionPanes.get((String) node);
				if (optionPane == null)
				{
					String propName = "options." + node + ".code";
					String code = jEdit.getProperty(propName);
					if (code != null)
					{
						optionPane = (OptionPane) BeanShell.eval(jEdit
							.getActiveView(), BeanShell.getNameSpace(),
							code);

						if (optionPane != null)
						{
							deferredOptionPanes.put(node, optionPane);
						}
						else
							continue;
					}
					else
					{
						Log.log(Log.ERROR, this, propName + " not defined");
						continue;
					}
				}
			}
			else
			{
				continue;
			}
</source>
    </clone>
    <clone nlines="30" distance="5">
        <source file="org/gjt/sp/jedit/TextUtilities.java" startline="207" startcolumn="5" endline="236" endcolumn="5">
for(int i = offset; i &gt;= 0; i--)
				{
					char ch = lineText.array[lineText.offset + i];
					if(ch == c)
					{
						if(!haveTokens)
						{
							tokenHandler.init();
							buffer.markTokens(line,tokenHandler);
							haveTokens = true;
						}
						if(getTokenAtOffset(tokenHandler.getTokens(),i).id == idOfBracket)
							count++;
					}
					else if(ch == cprime)
					{
						if(!haveTokens)
						{
							tokenHandler.init();
							buffer.markTokens(line,tokenHandler);
							haveTokens = true;
						}
						if(getTokenAtOffset(tokenHandler.getTokens(),i).id == idOfBracket)
						{
							count--;
							if(count == 0)
								return buffer.getLineStartOffset(line) + i;
						}
					}
				}
</source>
        <source file="org/gjt/sp/jedit/TextUtilities.java" startline="159" startcolumn="5" endline="188" endcolumn="5">
for(int i = offset; i &lt; lineText.count; i++)
				{
					char ch = lineText.array[lineText.offset + i];
					if(ch == c)
					{
						if(!haveTokens)
						{
							tokenHandler.init();
							buffer.markTokens(line,tokenHandler);
							haveTokens = true;
						}
						if(getTokenAtOffset(tokenHandler.getTokens(),i).id == idOfBracket)
							count++;
					}
					else if(ch == cprime)
					{
						if(!haveTokens)
						{
							tokenHandler.init();
							buffer.markTokens(line,tokenHandler);
							haveTokens = true;
						}
						if(getTokenAtOffset(tokenHandler.getTokens(),i).id == idOfBracket)
						{
							count--;
							if(count == 0)
								return buffer.getLineStartOffset(line) + i;
						}
					}
				}
</source>
    </clone>
    <clone nlines="25" distance="8">
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="631" startcolumn="14" endline="656" endcolumn="58">
if(operand instanceof Integer)
        {
            int result = intUnaryOperation((Integer)operand, kind);

            // ++ and -- must be cast back the original type
            if(kind == INCR || kind == DECR)
            {
                if(operandType == Byte.TYPE)
                    return new Primitive((byte)result);
                if(operandType == Short.TYPE)
                    return new Primitive((short)result);
                if(operandType == Character.TYPE)
                    return new Primitive((char)result);
            }

            return new Primitive(result);
        }
        else if(operand instanceof Long)
            return new Primitive(longUnaryOperation((Long)operand, kind));
        else if(operand instanceof Float)
            return new Primitive(floatUnaryOperation((Float)operand, kind));
        else if(operand instanceof Double)
            return new Primitive(doubleUnaryOperation((Double)operand, kind));
        else
            throw new InterpreterError(
				"An error occurred.  Please call technical support.");
</source>
        <source file="org/gjt/sp/jedit/bsh/BSHUnaryExpression.java" startline="107" startcolumn="3" endline="131" endcolumn="93">
if ( operand instanceof Integer )
        {
            int result = Primitive.intUnaryOperation((Integer)operand, kind);

            // ++ and -- must be cast back the original type
            if(kind == INCR || kind == DECR)
            {
                if(operandType == Byte.TYPE)
                    return new Byte((byte)result);
                if(operandType == Short.TYPE)
                    return new Short((short)result);
                if(operandType == Character.TYPE)
                    return new Character((char)result);
            }

            return new Integer(result);
        }
        else if(operand instanceof Long)
            return new Long(Primitive.longUnaryOperation((Long)operand, kind));
        else if(operand instanceof Float)
            return new Float(Primitive.floatUnaryOperation((Float)operand, kind));
        else if(operand instanceof Double)
            return new Double(Primitive.doubleUnaryOperation((Double)operand, kind));
        else
            throw new InterpreterError("An error occurred.  Please call technical support.");
</source>
    </clone>
    <clone nlines="56" distance="2">
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="896" startcolumn="8" endline="951" endcolumn="4">
while(path != null)
			{
				Buffer buffer = jEdit.openTemporary(
					view,null,path,false);

				/* this is stupid and misleading.
				 * but 'path' is not used anywhere except
				 * the above line, and if this is done
				 * after the 'continue', then we will
				 * either hang, or be forced to duplicate
				 * it inside the buffer == null, or add
				 * a 'finally' clause. you decide which one's
				 * worse. */
				path = fileset.getNextFile(view,path);

				if(buffer == null)
					continue loop;

				// Wait for buffer to finish loading
				if(buffer.isPerformingIO())
					TaskManager.instance.waitForIoTasks();

				if(!buffer.isEditable())
					continue loop;

				// Leave buffer in a consistent state if
				// an error occurs
				int retVal = 0;

				try
				{
					buffer.beginCompoundEdit();
					retVal = _replace(view,buffer,matcher,
						0,buffer.getLength(),
						smartCaseReplace);
				}
				finally
				{
					buffer.endCompoundEdit();
				}

				if(retVal != 0)
				{
					fileCount++;
					occurCount += retVal;
					if (dontOpenChangedFiles)
					{
						buffer.save(null,null);
					}
					else
					{
						jEdit.commitTemporary(buffer);
						jEdit.getBufferSetManager().addBuffer(view, buffer);
					}
				}
			}
</source>
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="896" startcolumn="1" endline="951" endcolumn="4">
loop:		while(path != null)
			{
				Buffer buffer = jEdit.openTemporary(
					view,null,path,false);

				/* this is stupid and misleading.
				 * but 'path' is not used anywhere except
				 * the above line, and if this is done
				 * after the 'continue', then we will
				 * either hang, or be forced to duplicate
				 * it inside the buffer == null, or add
				 * a 'finally' clause. you decide which one's
				 * worse. */
				path = fileset.getNextFile(view,path);

				if(buffer == null)
					continue loop;

				// Wait for buffer to finish loading
				if(buffer.isPerformingIO())
					TaskManager.instance.waitForIoTasks();

				if(!buffer.isEditable())
					continue loop;

				// Leave buffer in a consistent state if
				// an error occurs
				int retVal = 0;

				try
				{
					buffer.beginCompoundEdit();
					retVal = _replace(view,buffer,matcher,
						0,buffer.getLength(),
						smartCaseReplace);
				}
				finally
				{
					buffer.endCompoundEdit();
				}

				if(retVal != 0)
				{
					fileCount++;
					occurCount += retVal;
					if (dontOpenChangedFiles)
					{
						buffer.save(null,null);
					}
					else
					{
						jEdit.commitTemporary(buffer);
						jEdit.getBufferSetManager().addBuffer(view, buffer);
					}
				}
			}
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1185" startcolumn="5" endline="1221" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1184" startcolumn="5" endline="1221" endcolumn="5">
label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1185" startcolumn="5" endline="1221" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1227" startcolumn="5" endline="1264" endcolumn="5">
label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1185" startcolumn="5" endline="1221" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1270" startcolumn="5" endline="1307" endcolumn="5">
label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1185" startcolumn="5" endline="1221" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1345" startcolumn="5" endline="1382" endcolumn="5">
label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1185" startcolumn="5" endline="1221" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1388" startcolumn="5" endline="1425" endcolumn="5">
label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1185" startcolumn="5" endline="1221" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1585" startcolumn="5" endline="1622" endcolumn="5">
label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1228" startcolumn="5" endline="1264" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1184" startcolumn="5" endline="1221" endcolumn="5">
label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1228" startcolumn="5" endline="1264" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1227" startcolumn="5" endline="1264" endcolumn="5">
label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1228" startcolumn="5" endline="1264" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1270" startcolumn="5" endline="1307" endcolumn="5">
label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1228" startcolumn="5" endline="1264" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1345" startcolumn="5" endline="1382" endcolumn="5">
label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1228" startcolumn="5" endline="1264" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1388" startcolumn="5" endline="1425" endcolumn="5">
label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1228" startcolumn="5" endline="1264" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1585" startcolumn="5" endline="1622" endcolumn="5">
label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1271" startcolumn="5" endline="1307" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1184" startcolumn="5" endline="1221" endcolumn="5">
label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1271" startcolumn="5" endline="1307" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1227" startcolumn="5" endline="1264" endcolumn="5">
label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1271" startcolumn="5" endline="1307" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1270" startcolumn="5" endline="1307" endcolumn="5">
label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1271" startcolumn="5" endline="1307" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1345" startcolumn="5" endline="1382" endcolumn="5">
label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1271" startcolumn="5" endline="1307" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1388" startcolumn="5" endline="1425" endcolumn="5">
label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1271" startcolumn="5" endline="1307" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1585" startcolumn="5" endline="1622" endcolumn="5">
label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1346" startcolumn="5" endline="1382" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1184" startcolumn="5" endline="1221" endcolumn="5">
label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1346" startcolumn="5" endline="1382" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1227" startcolumn="5" endline="1264" endcolumn="5">
label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1346" startcolumn="5" endline="1382" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1270" startcolumn="5" endline="1307" endcolumn="5">
label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1346" startcolumn="5" endline="1382" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1345" startcolumn="5" endline="1382" endcolumn="5">
label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1346" startcolumn="5" endline="1382" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1388" startcolumn="5" endline="1425" endcolumn="5">
label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1346" startcolumn="5" endline="1382" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1585" startcolumn="5" endline="1622" endcolumn="5">
label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1389" startcolumn="5" endline="1425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1184" startcolumn="5" endline="1221" endcolumn="5">
label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1389" startcolumn="5" endline="1425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1227" startcolumn="5" endline="1264" endcolumn="5">
label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1389" startcolumn="5" endline="1425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1270" startcolumn="5" endline="1307" endcolumn="5">
label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1389" startcolumn="5" endline="1425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1345" startcolumn="5" endline="1382" endcolumn="5">
label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1389" startcolumn="5" endline="1425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1388" startcolumn="5" endline="1425" endcolumn="5">
label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1389" startcolumn="5" endline="1425" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1585" startcolumn="5" endline="1622" endcolumn="5">
label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1586" startcolumn="5" endline="1622" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1184" startcolumn="5" endline="1221" endcolumn="5">
label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1586" startcolumn="5" endline="1622" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1227" startcolumn="5" endline="1264" endcolumn="5">
label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1586" startcolumn="5" endline="1622" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1270" startcolumn="5" endline="1307" endcolumn="5">
label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1586" startcolumn="5" endline="1622" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1345" startcolumn="5" endline="1382" endcolumn="5">
label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1586" startcolumn="5" endline="1622" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1388" startcolumn="5" endline="1425" endcolumn="5">
label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1586" startcolumn="5" endline="1622" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1585" startcolumn="5" endline="1622" endcolumn="5">
label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
</source>
    </clone>
    <clone nlines="42" distance="6">
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="189" startcolumn="4" endline="237" endcolumn="4">
if (node instanceof OptionPane)
			{
				optionPane = (OptionPane)node;
				label = jEdit.getProperty("options."
					+ optionPane.getName()
					+ ".label");
			}
			else if (node instanceof OptionGroup)
			{
				label = ((OptionGroup)node).getLabel();
			}
			else if (node instanceof String)
			{
				label = jEdit.getProperty("options."
					+ node + ".label");
				optionPane = deferredOptionPanes.get(node);
				if(optionPane == null)
				{
					String propName = "options." + node + ".code";
					String code = jEdit.getProperty(propName);
					if(code != null)
					{
						optionPane = (OptionPane)
							BeanShell.eval(
							jEdit.getActiveView(),
							BeanShell.getNameSpace(),
							code
						);

						if(optionPane != null)
						{
							deferredOptionPanes.put(
								node,optionPane);
						}
						else
							continue;
					}
					else
					{
						Log.log(Log.ERROR,this,propName
							+ " not defined");
						continue;
					}
				}
			}
			else
			{
				continue;
			}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="138" startcolumn="4" endline="179" endcolumn="4">
if (node instanceof OptionPane)
			{
				optionPane = (OptionPane) node;
				label = jEdit.getProperty("options." + optionPane.getName()
					+ ".label");
			}
			else if (node instanceof OptionGroup)
			{
				label = ((OptionGroup) node).getLabel();
			}
			else if (node instanceof String)
			{
				label = jEdit.getProperty("options." + node + ".label");
				optionPane = (OptionPane) deferredOptionPanes.get((String) node);
				if (optionPane == null)
				{
					String propName = "options." + node + ".code";
					String code = jEdit.getProperty(propName);
					if (code != null)
					{
						optionPane = (OptionPane) BeanShell.eval(jEdit
							.getActiveView(), BeanShell.getNameSpace(),
							code);

						if (optionPane != null)
						{
							deferredOptionPanes.put(node, optionPane);
						}
						else
							continue;
					}
					else
					{
						Log.log(Log.ERROR, this, propName + " not defined");
						continue;
					}
				}
			}
			else
			{
				continue;
			}
</source>
    </clone>
    <clone nlines="41" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1629" startcolumn="5" endline="1669" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case MOD:
        ;
        break;
      default:
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case MOD:
        t = jj_consume_token(MOD);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
                      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtreeOpenNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                      jjtreeCloseNodeScope(jjtn001);
                      jjtn001.kind = t.kind;
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtreeCloseNodeScope(jjtn001);
                      }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1628" startcolumn="5" endline="1669" endcolumn="5">
label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case MOD:
        ;
        break;
      default:
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case MOD:
        t = jj_consume_token(MOD);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
                      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtreeOpenNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                      jjtreeCloseNodeScope(jjtn001);
                      jjtn001.kind = t.kind;
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtreeCloseNodeScope(jjtn001);
                      }
      }
    }
</source>
    </clone>
    <clone nlines="36" distance="8">
        <source file="org/gjt/sp/jedit/EditBus.java" startline="260" startcolumn="5" endline="295" endcolumn="5">
try
				{
					for (EBMessageHandler emh : handlers)
					{
						if (!isExact &amp;&amp;
						    emh.source != null &amp;&amp;
						    emh.source.exact())
						{
							continue;
						}
						if(Debug.EB_TIMER)
						{
							long start = System.nanoTime();
							dispatch(emh, message);
							long time = System.nanoTime() - start;
							if(time &gt;= 1000000)
							{
								Log.log(Log.DEBUG,EditBus.class,emh.comp + ": " + time + " ns");
							}
						}
						else
							dispatch(emh, message);
					}
				}
				catch (InvocationTargetException t)
				{
					Log.log(Log.ERROR,EditBus.class,"Exception"
						+ " while sending message on EditBus:");
					Log.log(Log.ERROR, EditBus.class, t.getCause());
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,EditBus.class,"Exception"
						+ " while sending message on EditBus:");
					Log.log(Log.ERROR,EditBus.class,t);
				}
</source>
        <source file="org/gjt/sp/jedit/EditBus.java" startline="258" startcolumn="4" endline="296" endcolumn="4">
if (handlers != null)
			{
				try
				{
					for (EBMessageHandler emh : handlers)
					{
						if (!isExact &amp;&amp;
						    emh.source != null &amp;&amp;
						    emh.source.exact())
						{
							continue;
						}
						if(Debug.EB_TIMER)
						{
							long start = System.nanoTime();
							dispatch(emh, message);
							long time = System.nanoTime() - start;
							if(time &gt;= 1000000)
							{
								Log.log(Log.DEBUG,EditBus.class,emh.comp + ": " + time + " ns");
							}
						}
						else
							dispatch(emh, message);
					}
				}
				catch (InvocationTargetException t)
				{
					Log.log(Log.ERROR,EditBus.class,"Exception"
						+ " while sending message on EditBus:");
					Log.log(Log.ERROR, EditBus.class, t.getCause());
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,EditBus.class,"Exception"
						+ " while sending message on EditBus:");
					Log.log(Log.ERROR,EditBus.class,t);
				}
			}
</source>
    </clone>
    <clone nlines="40" distance="6">
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1746" startcolumn="3" endline="1785" endcolumn="52">
if(win != null)
		{
			Dimension size = popup.getPreferredSize();

			Rectangle screenSize = getScreenBounds();

			if(x + offsetX + size.width + win.getX() &gt; screenSize.width
				&amp;&amp; x + offsetX + win.getX() &gt;= size.width)
			{
				//System.err.println("x overflow");
				if(point)
					x -= size.width + extraOffset;
				else
					x = win.getWidth() - size.width - offsetX + extraOffset;
			}
			else
			{
				x += extraOffset;
			}

			//System.err.println("y=" + y + ",offsetY=" + offsetY
			//	+ ",size.height=" + size.height
			//	+ ",win.height=" + win.getHeight());
			if(y + offsetY + size.height + win.getY() &gt; screenSize.height
				&amp;&amp; y + offsetY + win.getY() &gt;= size.height)
			{
				if(point)
					y = win.getHeight() - size.height - offsetY + extraOffset;
				else
					y = -size.height - 1;
			}
			else
			{
				y += extraOffset;
			}

			popup.show(comp,x,y);
		}
		else
			popup.show(comp,x + extraOffset,y + extraOffset);
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="6331" startcolumn="3" endline="6371" endcolumn="52">
if(win != null)
		{
			Dimension size = popup.getPreferredSize();

			Rectangle screenSize = GraphicsEnvironment
				.getLocalGraphicsEnvironment().getMaximumWindowBounds();

			if(x + offsetX + size.width + win.getX() &gt; screenSize.width
				&amp;&amp; x + offsetX + win.getX() &gt;= size.width)
			{
				//System.err.println("x overflow");
				if(point)
					x -= size.width + extraOffset;
				else
					x = win.getWidth() - size.width - offsetX + extraOffset;
			}
			else
			{
				x += extraOffset;
			}

			//System.err.println("y=" + y + ",offsetY=" + offsetY
			//	+ ",size.height=" + size.height
			//	+ ",win.height=" + win.getHeight());
			if(y + offsetY + size.height + win.getY() &gt; screenSize.height
				&amp;&amp; y + offsetY + win.getY() &gt;= size.height)
			{
				if(point)
					y = win.getHeight() - size.height - offsetY + extraOffset;
				else
					y = -size.height - 1;
			}
			else
			{
				y += extraOffset;
			}

			popup.show(comp,x,y);
		}
		else
			popup.show(comp,x + extraOffset,y + extraOffset);
</source>
    </clone>
    <clone nlines="53" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1527" startcolumn="5" endline="1579" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case LSHIFTX:
      case RSIGNEDSHIFT:
      case RSIGNEDSHIFTX:
      case RUNSIGNEDSHIFT:
      case RUNSIGNEDSHIFTX:
        ;
        break;
      default:
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case LSHIFTX:
        t = jj_consume_token(LSHIFTX);
        break;
      case RSIGNEDSHIFT:
        t = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RSIGNEDSHIFTX:
        t = jj_consume_token(RSIGNEDSHIFTX);
        break;
      case RUNSIGNEDSHIFT:
        t = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFTX:
        t = jj_consume_token(RUNSIGNEDSHIFTX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001,  2);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.kind = t.kind;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1526" startcolumn="5" endline="1579" endcolumn="5">
label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case LSHIFTX:
      case RSIGNEDSHIFT:
      case RSIGNEDSHIFTX:
      case RUNSIGNEDSHIFT:
      case RUNSIGNEDSHIFTX:
        ;
        break;
      default:
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case LSHIFTX:
        t = jj_consume_token(LSHIFTX);
        break;
      case RSIGNEDSHIFT:
        t = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RSIGNEDSHIFTX:
        t = jj_consume_token(RSIGNEDSHIFTX);
        break;
      case RUNSIGNEDSHIFT:
        t = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFTX:
        t = jj_consume_token(RUNSIGNEDSHIFTX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001,  2);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.kind = t.kind;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    }
</source>
    </clone>
    <clone nlines="37" distance="6">
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/Type.java" startline="579" startcolumn="7" endline="615" endcolumn="7">
if (d.isPrimitive()) {
        char car;
        if (d == Integer.TYPE) {
          car = 'I';
        } else if (d == Void.TYPE) {
          car = 'V';
        } else if (d == Boolean.TYPE) {
          car = 'Z';
        } else if (d == Byte.TYPE) {
          car = 'B';
        } else if (d == Character.TYPE) {
          car = 'C';
        } else if (d == Short.TYPE) {
          car = 'S';
        } else if (d == Double.TYPE) {
          car = 'D';
        } else if (d == Float.TYPE) {
          car = 'F';
        } else /*if (d == Long.TYPE)*/ {
          car = 'J';
        }
        buf.append(car);
        return;
      } else if (d.isArray()) {
        buf.append('[');
        d = d.getComponentType();
      } else {
        buf.append('L');
        String name = d.getName();
        int len = name.length();
        for (int i = 0; i &lt; len; ++i) {
          char car = name.charAt(i);
          buf.append(car == '.' ? '/' : car);
        }
        buf.append(';');
        return;
      }
</source>
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/Type.java" startline="578" startcolumn="5" endline="616" endcolumn="5">
while (true) {
      if (d.isPrimitive()) {
        char car;
        if (d == Integer.TYPE) {
          car = 'I';
        } else if (d == Void.TYPE) {
          car = 'V';
        } else if (d == Boolean.TYPE) {
          car = 'Z';
        } else if (d == Byte.TYPE) {
          car = 'B';
        } else if (d == Character.TYPE) {
          car = 'C';
        } else if (d == Short.TYPE) {
          car = 'S';
        } else if (d == Double.TYPE) {
          car = 'D';
        } else if (d == Float.TYPE) {
          car = 'F';
        } else /*if (d == Long.TYPE)*/ {
          car = 'J';
        }
        buf.append(car);
        return;
      } else if (d.isArray()) {
        buf.append('[');
        d = d.getComponentType();
      } else {
        buf.append('L');
        String name = d.getName();
        int len = name.length();
        for (int i = 0; i &lt; len; ++i) {
          char car = name.charAt(i);
          buf.append(car == '.' ? '/' : car);
        }
        buf.append(';');
        return;
      }
    }
</source>
    </clone>
    <clone nlines="64" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="168" startcolumn="5" endline="231" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                if ( !lookahead )
                        try {
                                if ( mods == null ) mods = new Modifiers();
                                mods.addModifier( context, getToken(0).image );
                        } catch ( IllegalStateException e ) {
                                {if (true) throw createParseException( e.getMessage() );}
                        }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="167" startcolumn="5" endline="231" endcolumn="5">
label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                if ( !lookahead )
                        try {
                                if ( mods == null ) mods = new Modifiers();
                                mods.addModifier( context, getToken(0).image );
                        } catch ( IllegalStateException e ) {
                                {if (true) throw createParseException( e.getMessage() );}
                        }
    }
</source>
    </clone>
    <clone nlines="61" distance="2">
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1460" startcolumn="5" endline="1520" endcolumn="5">
while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GTX:
      case LT:
      case LTX:
      case LE:
      case LEX:
      case GE:
      case GEX:
        ;
        break;
      default:
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case LTX:
        t = jj_consume_token(LTX);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case GTX:
        t = jj_consume_token(GTX);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case LEX:
        t = jj_consume_token(LEX);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case GEX:
        t = jj_consume_token(GEX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001,  2);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.kind = t.kind;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1459" startcolumn="5" endline="1520" endcolumn="5">
label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GTX:
      case LT:
      case LTX:
      case LE:
      case LEX:
      case GE:
      case GEX:
        ;
        break;
      default:
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case LTX:
        t = jj_consume_token(LTX);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case GTX:
        t = jj_consume_token(GTX);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case LEX:
        t = jj_consume_token(LEX);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case GEX:
        t = jj_consume_token(GEX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001,  2);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.kind = t.kind;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    }
</source>
    </clone>
    <clone nlines="56" distance="2">
        <source file="org/gjt/sp/jedit/browser/VFSBrowser.java" startline="1214" startcolumn="3" endline="1269" endcolumn="3">
for (VFSFile file : selectedFiles)
		{
			if (file.getType() == VFSFile.DIRECTORY ||
			    file.getType() == VFSFile.FILESYSTEM)
			{
				if (mode == M_OPEN_NEW_VIEW &amp;&amp; this.mode == BROWSER)
					browseDirectoryInNewWindow(view, file.getPath());
				else if (selectedFiles.length == 1)
					setDirectory(file.getPath());
			}
			else if (this.mode == BROWSER || this.mode == BROWSER_DIALOG)
			{
				if (mode == M_INSERT)
				{
					view.getBuffer().insertFile(view, file.getPath());
					continue check_selected;
				}

				Buffer _buffer = jEdit.getBuffer(file.getPath());
				if (_buffer == null)
				{
					Hashtable&lt;String, Object&gt; props = new Hashtable&lt;String, Object&gt;();
					if (currentEncoding != null)
					{
						props.put(JEditBuffer.ENCODING, currentEncoding);
					}
					props.put(Buffer.ENCODING_AUTODETECT, autoDetectEncoding);
					_buffer = jEdit.openFile(view, null, file.getPath(), false, props);
				}
				else if (doubleClickClose &amp;&amp; canDoubleClickClose &amp;&amp;
					 this.mode != BROWSER_DIALOG &amp;&amp;
					 selectedFiles.length == 1)
				{
					// close if this buffer is currently
					// visible in the view.
					EditPane[] editPanes = view.getEditPanes();
					for (EditPane editPane : editPanes)
					{
						if (editPane.getBuffer() == _buffer)
						{
							jEdit.closeBuffer(view, _buffer);
							return;
						}
					}
				}

				if (_buffer != null)
					buffer = _buffer;
			}
			else
			{
				// if a file is selected in OPEN_DIALOG or
				// SAVE_DIALOG mode, just let the listener(s)
				// handle it
			}
		}
</source>
        <source file="org/gjt/sp/jedit/browser/VFSBrowser.java" startline="1213" startcolumn="1" endline="1269" endcolumn="3">
check_selected:
		for (VFSFile file : selectedFiles)
		{
			if (file.getType() == VFSFile.DIRECTORY ||
			    file.getType() == VFSFile.FILESYSTEM)
			{
				if (mode == M_OPEN_NEW_VIEW &amp;&amp; this.mode == BROWSER)
					browseDirectoryInNewWindow(view, file.getPath());
				else if (selectedFiles.length == 1)
					setDirectory(file.getPath());
			}
			else if (this.mode == BROWSER || this.mode == BROWSER_DIALOG)
			{
				if (mode == M_INSERT)
				{
					view.getBuffer().insertFile(view, file.getPath());
					continue check_selected;
				}

				Buffer _buffer = jEdit.getBuffer(file.getPath());
				if (_buffer == null)
				{
					Hashtable&lt;String, Object&gt; props = new Hashtable&lt;String, Object&gt;();
					if (currentEncoding != null)
					{
						props.put(JEditBuffer.ENCODING, currentEncoding);
					}
					props.put(Buffer.ENCODING_AUTODETECT, autoDetectEncoding);
					_buffer = jEdit.openFile(view, null, file.getPath(), false, props);
				}
				else if (doubleClickClose &amp;&amp; canDoubleClickClose &amp;&amp;
					 this.mode != BROWSER_DIALOG &amp;&amp;
					 selectedFiles.length == 1)
				{
					// close if this buffer is currently
					// visible in the view.
					EditPane[] editPanes = view.getEditPanes();
					for (EditPane editPane : editPanes)
					{
						if (editPane.getBuffer() == _buffer)
						{
							jEdit.closeBuffer(view, _buffer);
							return;
						}
					}
				}

				if (_buffer != null)
					buffer = _buffer;
			}
			else
			{
				// if a file is selected in OPEN_DIALOG or
				// SAVE_DIALOG mode, just let the listener(s)
				// handle it
			}
		}
</source>
    </clone>
    <clone nlines="64" distance="2">
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="2041" startcolumn="3" endline="2104" endcolumn="3">
for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 &lt; curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind &gt;&gt; 6] &amp; (1L &lt;&lt; (jjmatchedKind &amp; 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind &gt;&gt; 6] &amp; (1L &lt;&lt; (jjmatchedKind &amp; 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos &lt;= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos &lt;= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="2040" startcolumn="3" endline="2104" endcolumn="3">
EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 &lt; curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind &gt;&gt; 6] &amp; (1L &lt;&lt; (jjmatchedKind &amp; 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind &gt;&gt; 6] &amp; (1L &lt;&lt; (jjmatchedKind &amp; 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos &lt;= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos &lt;= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
</source>
    </clone>
    <clone nlines="56" distance="2">
        <source file="org/gjt/sp/jedit/print/BufferPrintable.java" startline="278" startcolumn="13" endline="333" endcolumn="3">
for(;;)
		{
			if(currentPhysicalLine == buffer.getLineCount())
			{
				Log.log(Log.DEBUG,this,"Finished buffer");
				end = true;
				break print_loop;
			}
			if (!jEdit.getBooleanProperty("print.folds",true) &amp;&amp;
				!view.getTextArea().getDisplayManager().isLineVisible(currentPhysicalLine))
			{
				
				Log.log(Log.DEBUG,this,"Skipping invisible line");
				currentPhysicalLine++;
				continue;
			}
				
			lineList.clear();

			tokenHandler.init(styles,frc,e,lineList,
				(float)(pageWidth - lineNumberWidth), -1);

			buffer.markTokens(currentPhysicalLine,tokenHandler);
			if(lineList.isEmpty())
				lineList.add(null);

			if(y + (lm.getHeight() * lineList.size()) &gt;= pageHeight)
			{
				Log.log(Log.DEBUG,this,"Finished page before line " + currentPhysicalLine);
				break print_loop;
			}

			if(lineNumbers &amp;&amp; actuallyPaint)
			{
				gfx.setFont(font);
				gfx.setColor(lineNumberColor);
				gfx.drawString(String.valueOf(currentPhysicalLine + 1),
					(float)pageX,(float)(pageY + y + lm.getHeight()));
			}

			for (Chunk chunk : lineList)
			{
				y += lm.getHeight();
				Chunk chunks = chunk;
				if (chunks != null &amp;&amp; actuallyPaint)
				{
					FontMetrics metrics = gfx.getFontMetrics();
					Chunk.paintChunkBackgrounds(chunks, gfx, (float) (pageX + lineNumberWidth),
								    (float) (pageY + y), metrics.getHeight());
					Chunk.paintChunkList(chunks, gfx, (float) (pageX + lineNumberWidth),
							     (float) (pageY + y), glyphVector);
				}
			}

			currentPhysicalLine++;
		}
</source>
        <source file="org/gjt/sp/jedit/print/BufferPrintable.java" startline="278" startcolumn="1" endline="333" endcolumn="3">
print_loop:	for(;;)
		{
			if(currentPhysicalLine == buffer.getLineCount())
			{
				Log.log(Log.DEBUG,this,"Finished buffer");
				end = true;
				break print_loop;
			}
			if (!jEdit.getBooleanProperty("print.folds",true) &amp;&amp;
				!view.getTextArea().getDisplayManager().isLineVisible(currentPhysicalLine))
			{
				
				Log.log(Log.DEBUG,this,"Skipping invisible line");
				currentPhysicalLine++;
				continue;
			}
				
			lineList.clear();

			tokenHandler.init(styles,frc,e,lineList,
				(float)(pageWidth - lineNumberWidth), -1);

			buffer.markTokens(currentPhysicalLine,tokenHandler);
			if(lineList.isEmpty())
				lineList.add(null);

			if(y + (lm.getHeight() * lineList.size()) &gt;= pageHeight)
			{
				Log.log(Log.DEBUG,this,"Finished page before line " + currentPhysicalLine);
				break print_loop;
			}

			if(lineNumbers &amp;&amp; actuallyPaint)
			{
				gfx.setFont(font);
				gfx.setColor(lineNumberColor);
				gfx.drawString(String.valueOf(currentPhysicalLine + 1),
					(float)pageX,(float)(pageY + y + lm.getHeight()));
			}

			for (Chunk chunk : lineList)
			{
				y += lm.getHeight();
				Chunk chunks = chunk;
				if (chunks != null &amp;&amp; actuallyPaint)
				{
					FontMetrics metrics = gfx.getFontMetrics();
					Chunk.paintChunkBackgrounds(chunks, gfx, (float) (pageX + lineNumberWidth),
								    (float) (pageY + y), metrics.getHeight());
					Chunk.paintChunkList(chunks, gfx, (float) (pageX + lineNumberWidth),
							     (float) (pageY + y), glyphVector);
				}
			}

			currentPhysicalLine++;
		}
</source>
    </clone>
    <clone nlines="84" distance="2">
        <source file="org/jedit/io/Native2ASCIIEncoding.java" startline="330" startcolumn="4" endline="413" endcolumn="4">
for (i = 0; (i &lt; read) &amp;&amp; (i &lt; len); i++)
			{
				// character under consideration
				char c = buf[i];
				// does not start escape sequence
				if ((c != '\\') || escaped)
				{
					// add to result buffer and
					// continue to next character
					escaped = false;
					cbuf[off + result++] = c;
					continue;
				}
				// less than 5 characters left after current
				// position because either there was no more
				// input available or because of EOF
				if (read - i - 1 &lt; 5)
				{
					// try to read in more characters to
					// complete the escape sequence
					while (read &lt; i + 1 + 5)
					{
						// read in missing characters
						int read2 = in.read(buf, read, i + 1 + 5 - read);
						// EOF reached
						if (read2 == -1)
						{
							// add to result buffer and continue to next character if
							// - permissive or
							// - EOF reached after backslash or
							// - not an escape sequence,
							// otherwise throw exception
							if (permissive || (read - i - 1 == 0) || (buf[i + 1] != 'u'))
							{
								escaped = true;
								cbuf[off + result++] = c;
								continue outer;
							} else
							{
								throw new MalformedInputException(1);
							}
						}
						read += read2;
					}
				}
				// no unicode escape without 'u' at second position
				if (buf[i + 1] != 'u')
				{
					// add to result buffer and
					// continue to next character
					escaped = true;
					cbuf[off + result++] = c;
					continue;
				}
				// no unicode escape with non-hex characters in positions 3-6
				for (int j = i + 2, j2 = i + 6; j &lt; j2; j++)
				{
					char e = buf[j];
					if (!(((e &gt;= '0') &amp;&amp; (e &lt;= '9')) || ((e &gt;= 'a') &amp;&amp; (e &lt;= 'f')) || ((e &gt;= 'A')
													   &amp;&amp; (e
													       &lt;= 'F'))))
					{
						// add to result buffer and continue to next character
						// if permissive, otherwise throw exception
						if (permissive)
						{
							escaped = true;
							cbuf[off + result++] = c;
							continue outer;
						} else
						{
							throw new MalformedInputException(1);
						}
					}
				}
				// valid unicode escape
				escaped = false;
				cbuf[off + result++] = (char) Integer.parseInt(new String(buf, i + 2, 4), 16);
				// need 5 more chars that were consumed for escape collapsing,
				// but only if the escape sequence was not in the additional space
				needed += Math.min(len - i - 1, 5);
				// advance pointer
				i += 5;
			}
</source>
        <source file="org/jedit/io/Native2ASCIIEncoding.java" startline="329" startcolumn="1" endline="413" endcolumn="4">
outer:
			for (i = 0; (i &lt; read) &amp;&amp; (i &lt; len); i++)
			{
				// character under consideration
				char c = buf[i];
				// does not start escape sequence
				if ((c != '\\') || escaped)
				{
					// add to result buffer and
					// continue to next character
					escaped = false;
					cbuf[off + result++] = c;
					continue;
				}
				// less than 5 characters left after current
				// position because either there was no more
				// input available or because of EOF
				if (read - i - 1 &lt; 5)
				{
					// try to read in more characters to
					// complete the escape sequence
					while (read &lt; i + 1 + 5)
					{
						// read in missing characters
						int read2 = in.read(buf, read, i + 1 + 5 - read);
						// EOF reached
						if (read2 == -1)
						{
							// add to result buffer and continue to next character if
							// - permissive or
							// - EOF reached after backslash or
							// - not an escape sequence,
							// otherwise throw exception
							if (permissive || (read - i - 1 == 0) || (buf[i + 1] != 'u'))
							{
								escaped = true;
								cbuf[off + result++] = c;
								continue outer;
							} else
							{
								throw new MalformedInputException(1);
							}
						}
						read += read2;
					}
				}
				// no unicode escape without 'u' at second position
				if (buf[i + 1] != 'u')
				{
					// add to result buffer and
					// continue to next character
					escaped = true;
					cbuf[off + result++] = c;
					continue;
				}
				// no unicode escape with non-hex characters in positions 3-6
				for (int j = i + 2, j2 = i + 6; j &lt; j2; j++)
				{
					char e = buf[j];
					if (!(((e &gt;= '0') &amp;&amp; (e &lt;= '9')) || ((e &gt;= 'a') &amp;&amp; (e &lt;= 'f')) || ((e &gt;= 'A')
													   &amp;&amp; (e
													       &lt;= 'F'))))
					{
						// add to result buffer and continue to next character
						// if permissive, otherwise throw exception
						if (permissive)
						{
							escaped = true;
							cbuf[off + result++] = c;
							continue outer;
						} else
						{
							throw new MalformedInputException(1);
						}
					}
				}
				// valid unicode escape
				escaped = false;
				cbuf[off + result++] = (char) Integer.parseInt(new String(buf, i + 2, 4), 16);
				// need 5 more chars that were consumed for escape collapsing,
				// but only if the escape sequence was not in the additional space
				needed += Math.min(len - i - 1, 5);
				// advance pointer
				i += 5;
			}
</source>
    </clone>
    <clone nlines="109" distance="2">
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="483" startcolumn="8" endline="591" endcolumn="4">
for(;;)
			{
				while(path != null)
				{
					Buffer buffer = jEdit.openTemporary(
						view,null,path,false);

					/* this is stupid and misleading.
					 * but 'path' is not used anywhere except
					 * the above line, and if this is done
					 * after the 'continue', then we will
					 * either hang, or be forced to duplicate
					 * it inside the buffer == null, or add
					 * a 'finally' clause. you decide which one's
					 * worse. */
					if (reverse)
					{
						path = fileset.getPrevFile(view, path);
					}
					else
					{
						path = fileset.getNextFile(view, path);
					}

					if(buffer == null)
						continue loop;

					// Wait for the buffer to load
					if(!buffer.isLoaded())
						TaskManager.instance.waitForIoTasks();

					int start;

					if(view.getBuffer() == buffer &amp;&amp; !repeat)
					{
						JEditTextArea textArea = view.getTextArea();
						Selection s = textArea.getSelectionAtOffset(
							textArea.getCaretPosition());
						if(s == null)
							start = textArea.getCaretPosition();
						else if(reverse)
							start = s.getStart();
						else
							start = s.getEnd();
					}
					else if(reverse)
						start = buffer.getLength();
					else
						start = 0;

					if(find(view,buffer,start,repeat,reverse))
						return true;
				}

				if(repeat)
				{
					if(!BeanShell.isScriptRunning())
					{
						view.getStatus().setMessageAndClear(
							jEdit.getProperty("view.status.search-not-found"));

						view.getToolkit().beep();
					}
					return false;
				}

				boolean restart;

				// if auto wrap is on, always restart search.
				// if auto wrap is off, and we're called from
				// a macro, stop search. If we're called
				// interactively, ask the user what to do.
				if(wrap)
				{
					if(!BeanShell.isScriptRunning())
					{
						view.getStatus().setMessageAndClear(
							jEdit.getProperty("view.status.auto-wrap"));
						// beep if beep property set
						if(jEdit.getBooleanProperty("search.beepOnSearchAutoWrap"))
						{
							view.getToolkit().beep();
						}
					}
					restart = true;
				}
				else if(BeanShell.isScriptRunning())
				{
					restart = false;
				}
				else
				{
					Integer[] args = {Integer.valueOf(reverse ? 1 : 0)};
					int result = GUIUtilities.confirm(comp,
						"keepsearching",args,
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE);
					restart = (result == JOptionPane.YES_OPTION);
				}

				if(restart)
				{
					// start search from beginning
					path = fileset.getFirstFile(view);
					repeat = true;
				}
				else
					break loop;
			}
</source>
        <source file="org/gjt/sp/jedit/search/SearchAndReplace.java" startline="483" startcolumn="1" endline="591" endcolumn="4">
loop:		for(;;)
			{
				while(path != null)
				{
					Buffer buffer = jEdit.openTemporary(
						view,null,path,false);

					/* this is stupid and misleading.
					 * but 'path' is not used anywhere except
					 * the above line, and if this is done
					 * after the 'continue', then we will
					 * either hang, or be forced to duplicate
					 * it inside the buffer == null, or add
					 * a 'finally' clause. you decide which one's
					 * worse. */
					if (reverse)
					{
						path = fileset.getPrevFile(view, path);
					}
					else
					{
						path = fileset.getNextFile(view, path);
					}

					if(buffer == null)
						continue loop;

					// Wait for the buffer to load
					if(!buffer.isLoaded())
						TaskManager.instance.waitForIoTasks();

					int start;

					if(view.getBuffer() == buffer &amp;&amp; !repeat)
					{
						JEditTextArea textArea = view.getTextArea();
						Selection s = textArea.getSelectionAtOffset(
							textArea.getCaretPosition());
						if(s == null)
							start = textArea.getCaretPosition();
						else if(reverse)
							start = s.getStart();
						else
							start = s.getEnd();
					}
					else if(reverse)
						start = buffer.getLength();
					else
						start = 0;

					if(find(view,buffer,start,repeat,reverse))
						return true;
				}

				if(repeat)
				{
					if(!BeanShell.isScriptRunning())
					{
						view.getStatus().setMessageAndClear(
							jEdit.getProperty("view.status.search-not-found"));

						view.getToolkit().beep();
					}
					return false;
				}

				boolean restart;

				// if auto wrap is on, always restart search.
				// if auto wrap is off, and we're called from
				// a macro, stop search. If we're called
				// interactively, ask the user what to do.
				if(wrap)
				{
					if(!BeanShell.isScriptRunning())
					{
						view.getStatus().setMessageAndClear(
							jEdit.getProperty("view.status.auto-wrap"));
						// beep if beep property set
						if(jEdit.getBooleanProperty("search.beepOnSearchAutoWrap"))
						{
							view.getToolkit().beep();
						}
					}
					restart = true;
				}
				else if(BeanShell.isScriptRunning())
				{
					restart = false;
				}
				else
				{
					Integer[] args = {Integer.valueOf(reverse ? 1 : 0)};
					int result = GUIUtilities.confirm(comp,
						"keepsearching",args,
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE);
					restart = (result == JOptionPane.YES_OPTION);
				}

				if(restart)
				{
					// start search from beginning
					path = fileset.getFirstFile(view);
					repeat = true;
				}
				else
					break loop;
			}
</source>
    </clone>
    <clone nlines="96" distance="2">
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="128" startcolumn="12" endline="223" endcolumn="3">
for(pos = line.offset; pos &lt; lineLength; pos++)
		{
			//{{{ check if we have to stop parsing (happens if the terminateChar has been exceeded)
			if(terminateChar &gt;= 0 &amp;&amp; pos - line.offset &gt;= terminateChar
				&amp;&amp; !terminated)
			{
				terminated = true;
				context = new LineContext(ParserRuleSet
					.getStandardRuleSet(context.rules
					.getDefault()),context);
				keywords = context.rules.getKeywords();
			} //}}}

			//{{{ Check for the escape rule before anything else.
			if (context.escapeRule != null &amp;&amp;
				handleRuleStart(context.escapeRule))
			{
				continue main_loop;
			} //}}}

			//{{{ check for end of delegate
			if (context.parent != null
			    &amp;&amp; context.parent.inRule != null
			    &amp;&amp; checkDelegateEnd(context.parent.inRule))
			{
				seenWhitespaceEnd = true;
				continue main_loop;
			} //}}}

			//{{{ check every rule
			Character ch = Character.valueOf(line.array[pos]);
			List&lt;ParserRule&gt; rules = context.rules.getRules(ch);
			for (ParserRule rule : rules)
			{
				// stop checking rules if there was a match
				if (handleRuleStart(rule))
				{
					seenWhitespaceEnd = true;
					continue main_loop;
				}
			} //}}}

			//{{{ check if current character is a word separator
			if(Character.isWhitespace(ch))
			{
				if(!seenWhitespaceEnd)
					whitespaceEnd = pos + 1;

				if(context.inRule != null)
					handleRuleEnd(context.inRule);

				handleNoWordBreak();

				markKeyword(false);

				if(lastOffset != pos)
				{
					tokenHandler.handleToken(line,
						context.rules.getDefault(),
						lastOffset - line.offset,
						pos - lastOffset,
						context);
				}

				tokenHandler.handleToken(line,
					context.rules.getDefault(),
					pos - line.offset,1,context);
				lastOffset = pos + 1;
			}
			else
			{
				if(keywords != null || context.rules.getRuleCount() != 0)
				{
					String noWordSep = context.rules.getNoWordSep();

					if(!Character.isLetterOrDigit(ch)
						&amp;&amp; noWordSep.indexOf(ch) == -1)
					{
						if(context.inRule != null)
							handleRuleEnd(context.inRule);

						handleNoWordBreak();

						markKeyword(true);

						tokenHandler.handleToken(line,
							context.rules.getDefault(),
							lastOffset - line.offset,1,
							context);
						lastOffset = pos + 1;
					}
				}

				seenWhitespaceEnd = true;
			} //}}}
		}
</source>
        <source file="org/gjt/sp/jedit/syntax/TokenMarker.java" startline="128" startcolumn="1" endline="223" endcolumn="3">
main_loop:	for(pos = line.offset; pos &lt; lineLength; pos++)
		{
			//{{{ check if we have to stop parsing (happens if the terminateChar has been exceeded)
			if(terminateChar &gt;= 0 &amp;&amp; pos - line.offset &gt;= terminateChar
				&amp;&amp; !terminated)
			{
				terminated = true;
				context = new LineContext(ParserRuleSet
					.getStandardRuleSet(context.rules
					.getDefault()),context);
				keywords = context.rules.getKeywords();
			} //}}}

			//{{{ Check for the escape rule before anything else.
			if (context.escapeRule != null &amp;&amp;
				handleRuleStart(context.escapeRule))
			{
				continue main_loop;
			} //}}}

			//{{{ check for end of delegate
			if (context.parent != null
			    &amp;&amp; context.parent.inRule != null
			    &amp;&amp; checkDelegateEnd(context.parent.inRule))
			{
				seenWhitespaceEnd = true;
				continue main_loop;
			} //}}}

			//{{{ check every rule
			Character ch = Character.valueOf(line.array[pos]);
			List&lt;ParserRule&gt; rules = context.rules.getRules(ch);
			for (ParserRule rule : rules)
			{
				// stop checking rules if there was a match
				if (handleRuleStart(rule))
				{
					seenWhitespaceEnd = true;
					continue main_loop;
				}
			} //}}}

			//{{{ check if current character is a word separator
			if(Character.isWhitespace(ch))
			{
				if(!seenWhitespaceEnd)
					whitespaceEnd = pos + 1;

				if(context.inRule != null)
					handleRuleEnd(context.inRule);

				handleNoWordBreak();

				markKeyword(false);

				if(lastOffset != pos)
				{
					tokenHandler.handleToken(line,
						context.rules.getDefault(),
						lastOffset - line.offset,
						pos - lastOffset,
						context);
				}

				tokenHandler.handleToken(line,
					context.rules.getDefault(),
					pos - line.offset,1,context);
				lastOffset = pos + 1;
			}
			else
			{
				if(keywords != null || context.rules.getRuleCount() != 0)
				{
					String noWordSep = context.rules.getNoWordSep();

					if(!Character.isLetterOrDigit(ch)
						&amp;&amp; noWordSep.indexOf(ch) == -1)
					{
						if(context.inRule != null)
							handleRuleEnd(context.inRule);

						handleNoWordBreak();

						markKeyword(true);

						tokenHandler.handleToken(line,
							context.rules.getDefault(),
							lastOffset - line.offset,1,
							context);
						lastOffset = pos + 1;
					}
				}

				seenWhitespaceEnd = true;
			} //}}}
		}
</source>
    </clone>
    <clone nlines="73" distance="2">
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1793" startcolumn="21" endline="1865" endcolumn="32">
do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind &gt; 6)
                        kind = 6;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind &gt; 69)
                        kind = 69;
                     jjCheckNAdd(35);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind &gt; 6)
                     kind = 6;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(21, 23);
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 34:
               case 35:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 57:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind &gt; 7)
                     kind = 7;
                  jjAddStates(18, 20);
                  break;
               case 62:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 68:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
               case 71:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(71, 69);
                  break;
               default : break;
            }
         } while(i != startsAt);
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1793" startcolumn="10" endline="1865" endcolumn="32">
MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind &gt; 6)
                        kind = 6;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind &gt; 69)
                        kind = 69;
                     jjCheckNAdd(35);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind &gt; 6)
                     kind = 6;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(21, 23);
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 34:
               case 35:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 57:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind &gt; 7)
                     kind = 7;
                  jjAddStates(18, 20);
                  break;
               case 62:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 68:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
               case 71:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(71, 69);
                  break;
               default : break;
            }
         } while(i != startsAt);
</source>
    </clone>
    <clone nlines="107" distance="7">
        <source file="org/gjt/sp/jedit/bsh/Interpreter.java" startline="445" startcolumn="13" endline="551" endcolumn="13">
try
            {
                // try to sync up the console
                System.out.flush();
                System.err.flush();
                Thread.yield();  // this helps a little

                if ( interactive )
                    print( getBshPrompt() );

                eof = Line();

                if( get_jjtree().nodeArity() &gt; 0 )  // number of child nodes
                {
                    SimpleNode node = (SimpleNode)(get_jjtree().rootNode());

                    if(DEBUG)
                        node.dump("&gt;");

                    Object ret = node.eval( callstack, this );

					// sanity check during development
					if ( callstack.depth() &gt; 1 )
						throw new InterpreterError(
							"Callstack growing: "+callstack);

                    if(ret instanceof ReturnControl)
                        ret = ((ReturnControl)ret).value;

                    if( ret != Primitive.VOID )
                    {
                        setu("$_", ret);
						if ( showResults )
                            println("&lt;" + ret + "&gt;");
                    }
                }
            }
            catch(ParseException e)
            {
                error("Parser Error: " + e.getMessage(DEBUG));
				if ( DEBUG )
                	e.printStackTrace();
                if(!interactive)
                    eof = true;

                parser.reInitInput(in);
            }
            catch(InterpreterError e)
            {
                error("Internal Error: " + e.getMessage());
                e.printStackTrace();
                if(!interactive)
                    eof = true;
            }
            catch(TargetError e)
            {
                error("// Uncaught Exception: " + e );
				if ( e.inNativeCode() )
					e.printStackTrace( DEBUG, err );
                if(!interactive)
                    eof = true;
				setu("$_e", e.getTarget());
            }
            catch (EvalError e)
            {
				if ( interactive )
					error( "EvalError: "+e.toString() );
				else
					error( "EvalError: "+e.getMessage() );

                if(DEBUG)
                    e.printStackTrace();

                if(!interactive)
                    eof = true;
            }
            catch(Exception e)
            {
                error("Unknown error: " + e);
				if ( DEBUG )
                	e.printStackTrace();
                if(!interactive)
                    eof = true;
            }
            catch(TokenMgrError e)
            {
				error("Error parsing input: " + e);

				/*
					We get stuck in infinite loops here when unicode escapes
					fail.  Must re-init the char stream reader
					(ASCII_UCodeESC_CharStream.java)
				*/
				parser.reInitTokenInput( in );

                if(!interactive)
                    eof = true;
            }
            finally
            {
                get_jjtree().reset();
				// reinit the callstack
				if ( callstack.depth() &gt; 1 ) {
					callstack.clear();
					callstack.push( globalNameSpace );
				}
            }
</source>
        <source file="org/gjt/sp/jedit/bsh/Interpreter.java" startline="443" startcolumn="9" endline="552" endcolumn="9">
while( !eof )
        {
            try
            {
                // try to sync up the console
                System.out.flush();
                System.err.flush();
                Thread.yield();  // this helps a little

                if ( interactive )
                    print( getBshPrompt() );

                eof = Line();

                if( get_jjtree().nodeArity() &gt; 0 )  // number of child nodes
                {
                    SimpleNode node = (SimpleNode)(get_jjtree().rootNode());

                    if(DEBUG)
                        node.dump("&gt;");

                    Object ret = node.eval( callstack, this );

					// sanity check during development
					if ( callstack.depth() &gt; 1 )
						throw new InterpreterError(
							"Callstack growing: "+callstack);

                    if(ret instanceof ReturnControl)
                        ret = ((ReturnControl)ret).value;

                    if( ret != Primitive.VOID )
                    {
                        setu("$_", ret);
						if ( showResults )
                            println("&lt;" + ret + "&gt;");
                    }
                }
            }
            catch(ParseException e)
            {
                error("Parser Error: " + e.getMessage(DEBUG));
				if ( DEBUG )
                	e.printStackTrace();
                if(!interactive)
                    eof = true;

                parser.reInitInput(in);
            }
            catch(InterpreterError e)
            {
                error("Internal Error: " + e.getMessage());
                e.printStackTrace();
                if(!interactive)
                    eof = true;
            }
            catch(TargetError e)
            {
                error("// Uncaught Exception: " + e );
				if ( e.inNativeCode() )
					e.printStackTrace( DEBUG, err );
                if(!interactive)
                    eof = true;
				setu("$_e", e.getTarget());
            }
            catch (EvalError e)
            {
				if ( interactive )
					error( "EvalError: "+e.toString() );
				else
					error( "EvalError: "+e.getMessage() );

                if(DEBUG)
                    e.printStackTrace();

                if(!interactive)
                    eof = true;
            }
            catch(Exception e)
            {
                error("Unknown error: " + e);
				if ( DEBUG )
                	e.printStackTrace();
                if(!interactive)
                    eof = true;
            }
            catch(TokenMgrError e)
            {
				error("Error parsing input: " + e);

				/*
					We get stuck in infinite loops here when unicode escapes
					fail.  Must re-init the char stream reader
					(ASCII_UCodeESC_CharStream.java)
				*/
				parser.reInitTokenInput( in );

                if(!interactive)
                    eof = true;
            }
            finally
            {
                get_jjtree().reset();
				// reinit the callstack
				if ( callstack.depth() &gt; 1 ) {
					callstack.clear();
					callstack.push( globalNameSpace );
				}
            }
        }
</source>
    </clone>
    <clone nlines="96" distance="2">
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1689" startcolumn="21" endline="1784" endcolumn="32">
do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 35:
                  if ((0x7fffffe87fffffeL &amp; l) == 0L)
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 2:
                  jjAddStates(21, 23);
                  break;
               case 9:
                  if ((0x100000001000L &amp; l) != 0L &amp;&amp; kind &gt; 60)
                     kind = 60;
                  break;
               case 12:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 15:
                  if ((0x5000000050L &amp; l) != 0L &amp;&amp; kind &gt; 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0xffffffffefffffffL &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 20:
                  if ((0x14404410000000L &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if ((0xffffffffefffffffL &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 28:
                  if ((0x14404410000000L &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 40:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 44:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 48:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 52:
                  if ((0x100000001000000L &amp; l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x7e0000007eL &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(53, 9);
                  break;
               case 57:
                  if (kind &gt; 7)
                     kind = 7;
                  jjAddStates(18, 20);
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  jjCheckNAddTwoStates(65, 63);
                  break;
               case 68:
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
               case 71:
                  jjCheckNAddTwoStates(71, 69);
                  break;
               default : break;
            }
         } while(i != startsAt);
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1689" startcolumn="10" endline="1784" endcolumn="32">
MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 35:
                  if ((0x7fffffe87fffffeL &amp; l) == 0L)
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 2:
                  jjAddStates(21, 23);
                  break;
               case 9:
                  if ((0x100000001000L &amp; l) != 0L &amp;&amp; kind &gt; 60)
                     kind = 60;
                  break;
               case 12:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 15:
                  if ((0x5000000050L &amp; l) != 0L &amp;&amp; kind &gt; 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0xffffffffefffffffL &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 20:
                  if ((0x14404410000000L &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if ((0xffffffffefffffffL &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 28:
                  if ((0x14404410000000L &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 40:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 44:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 48:
                  if ((0x2000000020L &amp; l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 52:
                  if ((0x100000001000000L &amp; l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x7e0000007eL &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(53, 9);
                  break;
               case 57:
                  if (kind &gt; 7)
                     kind = 7;
                  jjAddStates(18, 20);
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  jjCheckNAddTwoStates(65, 63);
                  break;
               case 68:
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
               case 71:
                  jjCheckNAddTwoStates(71, 69);
                  break;
               default : break;
            }
         } while(i != startsAt);
</source>
    </clone>
    <clone nlines="92" distance="8">
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="533" startcolumn="4" endline="624" endcolumn="4">
if (takeSizesIntoAccount)
			{
				boolean grow = total_size &lt; free_size;
				// calculate the size that is available for redistribution
				free_size = (free_size - total_size) * (grow ? 1 : -1);
				while (free_size != 0)
				{
					// calculate the amount of elements that can be resized without violating
					// the minimum and maximum sizes and their current cumulated size
					int modifyableAmount = 0;
					int modifySize = 0;
					for (int i = 0 ; i &lt; nelements ; i++)
					{
						if ((grow &amp;&amp; (element_sizes[i] &lt; maximum_element_sizes[i])) ||
						    (!grow &amp;&amp; (element_sizes[i] &gt; minimum_element_sizes[i])))
						{
							modifyableAmount++;
							modifySize += element_sizes[i];
						}
					}
					boolean checkBounds = true;
					// if all elements are at their minimum or maximum size, resize all elements
					if (0 == modifyableAmount)
					{
						for (int i = 0 ; i &lt; nelements ; i++)
						{
							modifySize += element_sizes[i];
						}
						checkBounds = false;
						modifyableAmount = nelements;
					}
					// to prevent an endless loop if the container gets resized to a very small amount
					if (modifySize == 0)
					{
						break;
					}
					// resize the elements
					if (free_size &lt; modifyableAmount)
					{
						for (int i = 0 ; i &lt; nelements ; i++)
						{
							if ((free_size != 0) &amp;&amp;
							    (!checkBounds ||
							     (checkBounds &amp;&amp;
							      (grow &amp;&amp; (element_sizes[i] &lt; maximum_element_sizes[i])) ||
							      (!grow &amp;&amp; (element_sizes[i] &gt; minimum_element_sizes[i])))))
							{
								element_sizes[i] += (grow ? 1 : -1);
								if (0 &gt; element_sizes[i])
								{
									element_sizes[i] = 0;
								}
								free_size--;
							}
						}
					}
					else
					{
						int modifySizeAddition = 0;
						for (int i = 0 ; i &lt; nelements ; i++)
						{
							int modifyableSize = (checkBounds ? (grow ? maximum_element_sizes[i] - element_sizes[i] : element_sizes[i] - minimum_element_sizes[i]) : Integer.MAX_VALUE - element_sizes[i]);
							int elementModifySize = (int)((double)free_size / (double)modifySize * (double)element_sizes[i]);
							if (elementModifySize &lt;= modifyableSize)
							{
								element_sizes[i] += (grow ? elementModifySize : -elementModifySize);
								modifySizeAddition += (grow ? elementModifySize : -elementModifySize);
								free_size -= elementModifySize;
							}
							else
							{
								element_sizes[i] += (grow ? modifyableSize : -modifyableSize);
								modifySizeAddition += (grow ? modifyableSize : -modifyableSize);
								free_size -= modifyableSize;
							}
							if (0 &gt; element_sizes[i])
							{
								element_sizes[i] = 0;
							}
						}
						modifySize += modifySizeAddition;
					}
				}
			}
			else
			{
				double d = (double)free_size / (double)total_size;
				for (int i = 0; i &lt; nelements; i++)
				{
					element_sizes[i] = (int)(element_sizes[i] * d);
				}
			}
</source>
        <source file="org/gjt/sp/jedit/gui/VariableGridLayout.java" startline="531" startcolumn="3" endline="625" endcolumn="3">
if (total_size != free_size)
		{
			if (takeSizesIntoAccount)
			{
				boolean grow = total_size &lt; free_size;
				// calculate the size that is available for redistribution
				free_size = (free_size - total_size) * (grow ? 1 : -1);
				while (free_size != 0)
				{
					// calculate the amount of elements that can be resized without violating
					// the minimum and maximum sizes and their current cumulated size
					int modifyableAmount = 0;
					int modifySize = 0;
					for (int i = 0 ; i &lt; nelements ; i++)
					{
						if ((grow &amp;&amp; (element_sizes[i] &lt; maximum_element_sizes[i])) ||
						    (!grow &amp;&amp; (element_sizes[i] &gt; minimum_element_sizes[i])))
						{
							modifyableAmount++;
							modifySize += element_sizes[i];
						}
					}
					boolean checkBounds = true;
					// if all elements are at their minimum or maximum size, resize all elements
					if (0 == modifyableAmount)
					{
						for (int i = 0 ; i &lt; nelements ; i++)
						{
							modifySize += element_sizes[i];
						}
						checkBounds = false;
						modifyableAmount = nelements;
					}
					// to prevent an endless loop if the container gets resized to a very small amount
					if (modifySize == 0)
					{
						break;
					}
					// resize the elements
					if (free_size &lt; modifyableAmount)
					{
						for (int i = 0 ; i &lt; nelements ; i++)
						{
							if ((free_size != 0) &amp;&amp;
							    (!checkBounds ||
							     (checkBounds &amp;&amp;
							      (grow &amp;&amp; (element_sizes[i] &lt; maximum_element_sizes[i])) ||
							      (!grow &amp;&amp; (element_sizes[i] &gt; minimum_element_sizes[i])))))
							{
								element_sizes[i] += (grow ? 1 : -1);
								if (0 &gt; element_sizes[i])
								{
									element_sizes[i] = 0;
								}
								free_size--;
							}
						}
					}
					else
					{
						int modifySizeAddition = 0;
						for (int i = 0 ; i &lt; nelements ; i++)
						{
							int modifyableSize = (checkBounds ? (grow ? maximum_element_sizes[i] - element_sizes[i] : element_sizes[i] - minimum_element_sizes[i]) : Integer.MAX_VALUE - element_sizes[i]);
							int elementModifySize = (int)((double)free_size / (double)modifySize * (double)element_sizes[i]);
							if (elementModifySize &lt;= modifyableSize)
							{
								element_sizes[i] += (grow ? elementModifySize : -elementModifySize);
								modifySizeAddition += (grow ? elementModifySize : -elementModifySize);
								free_size -= elementModifySize;
							}
							else
							{
								element_sizes[i] += (grow ? modifyableSize : -modifyableSize);
								modifySizeAddition += (grow ? modifyableSize : -modifyableSize);
								free_size -= modifyableSize;
							}
							if (0 &gt; element_sizes[i])
							{
								element_sizes[i] = 0;
							}
						}
						modifySize += modifySizeAddition;
					}
				}
			}
			else
			{
				double d = (double)free_size / (double)total_size;
				for (int i = 0; i &lt; nelements; i++)
				{
					element_sizes[i] = (int)(element_sizes[i] * d);
				}
			}
		}
</source>
    </clone>
    <clone nlines="99" distance="6">
        <source file="org/gjt/sp/jedit/View.java" startline="1738" startcolumn="4" endline="1836" endcolumn="4">
switch(st.nextToken())
			{
			case StreamTokenizer.TT_EOF:
				break loop;
			case StreamTokenizer.TT_WORD:
				if("vertical".equals(st.sval) || "horizontal".equals(st.sval))
				{
					int orientation
						= "vertical".equals(st.sval)
						? JSplitPane.VERTICAL_SPLIT
						: JSplitPane.HORIZONTAL_SPLIT;
					int divider = (Integer) stack.pop();
					Object obj1 = stack.pop();
					Object obj2 = stack.pop();
					// Backward compatibility with pre-bufferset versions
					if (obj1 instanceof Buffer)
					{
						Buffer b1 = buffer = (Buffer) obj1;
						obj1 = editPane = createEditPane(b1);
					}
					if (obj2 instanceof Buffer)
					{
						Buffer b2 = (Buffer) obj2;
						obj2 = createEditPane(b2);
					}
					stack.push(splitPane = new JSplitPane(
						orientation,
						(Component)obj1,
						(Component)obj2));
					splitPane.setOneTouchExpandable(true);
					splitPane.setBorder(null);
					splitPane.setMinimumSize(
						new Dimension(0,0));
					splitPane.setDividerLocation(divider);
				}
				else if("buffer".equals(st.sval))
				{
					Object obj = stack.pop();
					if(obj instanceof Integer)
					{
						int index = (Integer) obj;
						if(index &gt;= 0 &amp;&amp; index &lt; buffers.length)
							buffer = buffers[index];
					}
					else if(obj instanceof String)
					{
						String path = (String)obj;
						buffer = jEdit.getBuffer(path);
						if (buffer == null)
						{
							buffer = jEdit.openTemporary(jEdit.getActiveView(), null,
												path, true, null);
							jEdit.commitTemporary(buffer);
						}
					}

					if(buffer == null)
						buffer = jEdit.getFirstBuffer();
					stack.push(buffer);
					editPaneBuffers.add(buffer);
				}
				else if ("buff".equals(st.sval))
				{
					String path = (String)stack.pop();
					buffer = jEdit.getBuffer(path);
					if (buffer == null)
					{
						Log.log(Log.WARNING, this, "Buffer " + path + " doesn't exist");
					}
					else
					{
						editPaneBuffers.add(buffer);
					}
				}
				else if ("bufferset".equals(st.sval))
				{
					// pop the bufferset scope. Not used anymore but still here for compatibility
					// with old perspectives
					stack.pop();
					buffer = (Buffer) stack.pop();
					editPane = createEditPane(buffer);
					stack.push(editPane);
					BufferSet bufferSet = editPane.getBufferSet();
					int i = 0;
					for (Buffer buff : editPaneBuffers)
					{
						bufferSet.addBufferAt(buff,i);
						i++;
					}
					editPaneBuffers.clear();
				}
				break;
			case StreamTokenizer.TT_NUMBER:
				stack.push((int)st.nval);
				break;
			case '"':
				stack.push(st.sval);
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/View.java" startline="1736" startcolumn="8" endline="1837" endcolumn="3">
while (true)
		{
			switch(st.nextToken())
			{
			case StreamTokenizer.TT_EOF:
				break loop;
			case StreamTokenizer.TT_WORD:
				if("vertical".equals(st.sval) || "horizontal".equals(st.sval))
				{
					int orientation
						= "vertical".equals(st.sval)
						? JSplitPane.VERTICAL_SPLIT
						: JSplitPane.HORIZONTAL_SPLIT;
					int divider = (Integer) stack.pop();
					Object obj1 = stack.pop();
					Object obj2 = stack.pop();
					// Backward compatibility with pre-bufferset versions
					if (obj1 instanceof Buffer)
					{
						Buffer b1 = buffer = (Buffer) obj1;
						obj1 = editPane = createEditPane(b1);
					}
					if (obj2 instanceof Buffer)
					{
						Buffer b2 = (Buffer) obj2;
						obj2 = createEditPane(b2);
					}
					stack.push(splitPane = new JSplitPane(
						orientation,
						(Component)obj1,
						(Component)obj2));
					splitPane.setOneTouchExpandable(true);
					splitPane.setBorder(null);
					splitPane.setMinimumSize(
						new Dimension(0,0));
					splitPane.setDividerLocation(divider);
				}
				else if("buffer".equals(st.sval))
				{
					Object obj = stack.pop();
					if(obj instanceof Integer)
					{
						int index = (Integer) obj;
						if(index &gt;= 0 &amp;&amp; index &lt; buffers.length)
							buffer = buffers[index];
					}
					else if(obj instanceof String)
					{
						String path = (String)obj;
						buffer = jEdit.getBuffer(path);
						if (buffer == null)
						{
							buffer = jEdit.openTemporary(jEdit.getActiveView(), null,
												path, true, null);
							jEdit.commitTemporary(buffer);
						}
					}

					if(buffer == null)
						buffer = jEdit.getFirstBuffer();
					stack.push(buffer);
					editPaneBuffers.add(buffer);
				}
				else if ("buff".equals(st.sval))
				{
					String path = (String)stack.pop();
					buffer = jEdit.getBuffer(path);
					if (buffer == null)
					{
						Log.log(Log.WARNING, this, "Buffer " + path + " doesn't exist");
					}
					else
					{
						editPaneBuffers.add(buffer);
					}
				}
				else if ("bufferset".equals(st.sval))
				{
					// pop the bufferset scope. Not used anymore but still here for compatibility
					// with old perspectives
					stack.pop();
					buffer = (Buffer) stack.pop();
					editPane = createEditPane(buffer);
					stack.push(editPane);
					BufferSet bufferSet = editPane.getBufferSet();
					int i = 0;
					for (Buffer buff : editPaneBuffers)
					{
						bufferSet.addBufferAt(buff,i);
						i++;
					}
					editPaneBuffers.clear();
				}
				break;
			case StreamTokenizer.TT_NUMBER:
				stack.push((int)st.nval);
				break;
			case '"':
				stack.push(st.sval);
				break;
			}
		}
</source>
    </clone>
    <clone nlines="99" distance="8">
        <source file="org/gjt/sp/jedit/View.java" startline="1738" startcolumn="4" endline="1836" endcolumn="4">
switch(st.nextToken())
			{
			case StreamTokenizer.TT_EOF:
				break loop;
			case StreamTokenizer.TT_WORD:
				if("vertical".equals(st.sval) || "horizontal".equals(st.sval))
				{
					int orientation
						= "vertical".equals(st.sval)
						? JSplitPane.VERTICAL_SPLIT
						: JSplitPane.HORIZONTAL_SPLIT;
					int divider = (Integer) stack.pop();
					Object obj1 = stack.pop();
					Object obj2 = stack.pop();
					// Backward compatibility with pre-bufferset versions
					if (obj1 instanceof Buffer)
					{
						Buffer b1 = buffer = (Buffer) obj1;
						obj1 = editPane = createEditPane(b1);
					}
					if (obj2 instanceof Buffer)
					{
						Buffer b2 = (Buffer) obj2;
						obj2 = createEditPane(b2);
					}
					stack.push(splitPane = new JSplitPane(
						orientation,
						(Component)obj1,
						(Component)obj2));
					splitPane.setOneTouchExpandable(true);
					splitPane.setBorder(null);
					splitPane.setMinimumSize(
						new Dimension(0,0));
					splitPane.setDividerLocation(divider);
				}
				else if("buffer".equals(st.sval))
				{
					Object obj = stack.pop();
					if(obj instanceof Integer)
					{
						int index = (Integer) obj;
						if(index &gt;= 0 &amp;&amp; index &lt; buffers.length)
							buffer = buffers[index];
					}
					else if(obj instanceof String)
					{
						String path = (String)obj;
						buffer = jEdit.getBuffer(path);
						if (buffer == null)
						{
							buffer = jEdit.openTemporary(jEdit.getActiveView(), null,
												path, true, null);
							jEdit.commitTemporary(buffer);
						}
					}

					if(buffer == null)
						buffer = jEdit.getFirstBuffer();
					stack.push(buffer);
					editPaneBuffers.add(buffer);
				}
				else if ("buff".equals(st.sval))
				{
					String path = (String)stack.pop();
					buffer = jEdit.getBuffer(path);
					if (buffer == null)
					{
						Log.log(Log.WARNING, this, "Buffer " + path + " doesn't exist");
					}
					else
					{
						editPaneBuffers.add(buffer);
					}
				}
				else if ("bufferset".equals(st.sval))
				{
					// pop the bufferset scope. Not used anymore but still here for compatibility
					// with old perspectives
					stack.pop();
					buffer = (Buffer) stack.pop();
					editPane = createEditPane(buffer);
					stack.push(editPane);
					BufferSet bufferSet = editPane.getBufferSet();
					int i = 0;
					for (Buffer buff : editPaneBuffers)
					{
						bufferSet.addBufferAt(buff,i);
						i++;
					}
					editPaneBuffers.clear();
				}
				break;
			case StreamTokenizer.TT_NUMBER:
				stack.push((int)st.nval);
				break;
			case '"':
				stack.push(st.sval);
				break;
			}
</source>
        <source file="org/gjt/sp/jedit/View.java" startline="1736" startcolumn="1" endline="1837" endcolumn="3">
loop:		while (true)
		{
			switch(st.nextToken())
			{
			case StreamTokenizer.TT_EOF:
				break loop;
			case StreamTokenizer.TT_WORD:
				if("vertical".equals(st.sval) || "horizontal".equals(st.sval))
				{
					int orientation
						= "vertical".equals(st.sval)
						? JSplitPane.VERTICAL_SPLIT
						: JSplitPane.HORIZONTAL_SPLIT;
					int divider = (Integer) stack.pop();
					Object obj1 = stack.pop();
					Object obj2 = stack.pop();
					// Backward compatibility with pre-bufferset versions
					if (obj1 instanceof Buffer)
					{
						Buffer b1 = buffer = (Buffer) obj1;
						obj1 = editPane = createEditPane(b1);
					}
					if (obj2 instanceof Buffer)
					{
						Buffer b2 = (Buffer) obj2;
						obj2 = createEditPane(b2);
					}
					stack.push(splitPane = new JSplitPane(
						orientation,
						(Component)obj1,
						(Component)obj2));
					splitPane.setOneTouchExpandable(true);
					splitPane.setBorder(null);
					splitPane.setMinimumSize(
						new Dimension(0,0));
					splitPane.setDividerLocation(divider);
				}
				else if("buffer".equals(st.sval))
				{
					Object obj = stack.pop();
					if(obj instanceof Integer)
					{
						int index = (Integer) obj;
						if(index &gt;= 0 &amp;&amp; index &lt; buffers.length)
							buffer = buffers[index];
					}
					else if(obj instanceof String)
					{
						String path = (String)obj;
						buffer = jEdit.getBuffer(path);
						if (buffer == null)
						{
							buffer = jEdit.openTemporary(jEdit.getActiveView(), null,
												path, true, null);
							jEdit.commitTemporary(buffer);
						}
					}

					if(buffer == null)
						buffer = jEdit.getFirstBuffer();
					stack.push(buffer);
					editPaneBuffers.add(buffer);
				}
				else if ("buff".equals(st.sval))
				{
					String path = (String)stack.pop();
					buffer = jEdit.getBuffer(path);
					if (buffer == null)
					{
						Log.log(Log.WARNING, this, "Buffer " + path + " doesn't exist");
					}
					else
					{
						editPaneBuffers.add(buffer);
					}
				}
				else if ("bufferset".equals(st.sval))
				{
					// pop the bufferset scope. Not used anymore but still here for compatibility
					// with old perspectives
					stack.pop();
					buffer = (Buffer) stack.pop();
					editPane = createEditPane(buffer);
					stack.push(editPane);
					BufferSet bufferSet = editPane.getBufferSet();
					int i = 0;
					for (Buffer buff : editPaneBuffers)
					{
						bufferSet.addBufferAt(buff,i);
						i++;
					}
					editPaneBuffers.clear();
				}
				break;
			case StreamTokenizer.TT_NUMBER:
				stack.push((int)st.nval);
				break;
			case '"':
				stack.push(st.sval);
				break;
			}
		}
</source>
    </clone>
    <clone nlines="102" distance="2">
        <source file="org/gjt/sp/jedit/View.java" startline="1736" startcolumn="8" endline="1837" endcolumn="3">
while (true)
		{
			switch(st.nextToken())
			{
			case StreamTokenizer.TT_EOF:
				break loop;
			case StreamTokenizer.TT_WORD:
				if("vertical".equals(st.sval) || "horizontal".equals(st.sval))
				{
					int orientation
						= "vertical".equals(st.sval)
						? JSplitPane.VERTICAL_SPLIT
						: JSplitPane.HORIZONTAL_SPLIT;
					int divider = (Integer) stack.pop();
					Object obj1 = stack.pop();
					Object obj2 = stack.pop();
					// Backward compatibility with pre-bufferset versions
					if (obj1 instanceof Buffer)
					{
						Buffer b1 = buffer = (Buffer) obj1;
						obj1 = editPane = createEditPane(b1);
					}
					if (obj2 instanceof Buffer)
					{
						Buffer b2 = (Buffer) obj2;
						obj2 = createEditPane(b2);
					}
					stack.push(splitPane = new JSplitPane(
						orientation,
						(Component)obj1,
						(Component)obj2));
					splitPane.setOneTouchExpandable(true);
					splitPane.setBorder(null);
					splitPane.setMinimumSize(
						new Dimension(0,0));
					splitPane.setDividerLocation(divider);
				}
				else if("buffer".equals(st.sval))
				{
					Object obj = stack.pop();
					if(obj instanceof Integer)
					{
						int index = (Integer) obj;
						if(index &gt;= 0 &amp;&amp; index &lt; buffers.length)
							buffer = buffers[index];
					}
					else if(obj instanceof String)
					{
						String path = (String)obj;
						buffer = jEdit.getBuffer(path);
						if (buffer == null)
						{
							buffer = jEdit.openTemporary(jEdit.getActiveView(), null,
												path, true, null);
							jEdit.commitTemporary(buffer);
						}
					}

					if(buffer == null)
						buffer = jEdit.getFirstBuffer();
					stack.push(buffer);
					editPaneBuffers.add(buffer);
				}
				else if ("buff".equals(st.sval))
				{
					String path = (String)stack.pop();
					buffer = jEdit.getBuffer(path);
					if (buffer == null)
					{
						Log.log(Log.WARNING, this, "Buffer " + path + " doesn't exist");
					}
					else
					{
						editPaneBuffers.add(buffer);
					}
				}
				else if ("bufferset".equals(st.sval))
				{
					// pop the bufferset scope. Not used anymore but still here for compatibility
					// with old perspectives
					stack.pop();
					buffer = (Buffer) stack.pop();
					editPane = createEditPane(buffer);
					stack.push(editPane);
					BufferSet bufferSet = editPane.getBufferSet();
					int i = 0;
					for (Buffer buff : editPaneBuffers)
					{
						bufferSet.addBufferAt(buff,i);
						i++;
					}
					editPaneBuffers.clear();
				}
				break;
			case StreamTokenizer.TT_NUMBER:
				stack.push((int)st.nval);
				break;
			case '"':
				stack.push(st.sval);
				break;
			}
		}
</source>
        <source file="org/gjt/sp/jedit/View.java" startline="1736" startcolumn="1" endline="1837" endcolumn="3">
loop:		while (true)
		{
			switch(st.nextToken())
			{
			case StreamTokenizer.TT_EOF:
				break loop;
			case StreamTokenizer.TT_WORD:
				if("vertical".equals(st.sval) || "horizontal".equals(st.sval))
				{
					int orientation
						= "vertical".equals(st.sval)
						? JSplitPane.VERTICAL_SPLIT
						: JSplitPane.HORIZONTAL_SPLIT;
					int divider = (Integer) stack.pop();
					Object obj1 = stack.pop();
					Object obj2 = stack.pop();
					// Backward compatibility with pre-bufferset versions
					if (obj1 instanceof Buffer)
					{
						Buffer b1 = buffer = (Buffer) obj1;
						obj1 = editPane = createEditPane(b1);
					}
					if (obj2 instanceof Buffer)
					{
						Buffer b2 = (Buffer) obj2;
						obj2 = createEditPane(b2);
					}
					stack.push(splitPane = new JSplitPane(
						orientation,
						(Component)obj1,
						(Component)obj2));
					splitPane.setOneTouchExpandable(true);
					splitPane.setBorder(null);
					splitPane.setMinimumSize(
						new Dimension(0,0));
					splitPane.setDividerLocation(divider);
				}
				else if("buffer".equals(st.sval))
				{
					Object obj = stack.pop();
					if(obj instanceof Integer)
					{
						int index = (Integer) obj;
						if(index &gt;= 0 &amp;&amp; index &lt; buffers.length)
							buffer = buffers[index];
					}
					else if(obj instanceof String)
					{
						String path = (String)obj;
						buffer = jEdit.getBuffer(path);
						if (buffer == null)
						{
							buffer = jEdit.openTemporary(jEdit.getActiveView(), null,
												path, true, null);
							jEdit.commitTemporary(buffer);
						}
					}

					if(buffer == null)
						buffer = jEdit.getFirstBuffer();
					stack.push(buffer);
					editPaneBuffers.add(buffer);
				}
				else if ("buff".equals(st.sval))
				{
					String path = (String)stack.pop();
					buffer = jEdit.getBuffer(path);
					if (buffer == null)
					{
						Log.log(Log.WARNING, this, "Buffer " + path + " doesn't exist");
					}
					else
					{
						editPaneBuffers.add(buffer);
					}
				}
				else if ("bufferset".equals(st.sval))
				{
					// pop the bufferset scope. Not used anymore but still here for compatibility
					// with old perspectives
					stack.pop();
					buffer = (Buffer) stack.pop();
					editPane = createEditPane(buffer);
					stack.push(editPane);
					BufferSet bufferSet = editPane.getBufferSet();
					int i = 0;
					for (Buffer buff : editPaneBuffers)
					{
						bufferSet.addBufferAt(buff,i);
						i++;
					}
					editPaneBuffers.clear();
				}
				break;
			case StreamTokenizer.TT_NUMBER:
				stack.push((int)st.nval);
				break;
			case '"':
				stack.push(st.sval);
				break;
			}
		}
</source>
    </clone>
    <clone nlines="354" distance="2">
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1331" startcolumn="21" endline="1684" endcolumn="32">
do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x1ffffffffL &amp; l) != 0L)
                  {
                     if (kind &gt; 6)
                        kind = 6;
                     jjCheckNAdd(0);
                  }
                  else if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 9);
                  else if (curChar == 36)
                  {
                     if (kind &gt; 69)
                        kind = 69;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L &amp; l) != 0L)
                  {
                     if (kind &gt; 60)
                        kind = 60;
                     jjCheckNAddTwoStates(8, 9);
                  }
                  else if (curChar == 48)
                  {
                     if (kind &gt; 60)
                        kind = 60;
                     jjCheckNAddStates(15, 17);
                  }
                  break;
               case 56:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 47)
                  {
                     if (kind &gt; 7)
                        kind = 7;
                     jjCheckNAddStates(18, 20);
                  }
                  if (curChar == 42)
                     jjCheckNAdd(62);
                  break;
               case 0:
                  if ((0x1ffffffffL &amp; l) == 0L)
                     break;
                  if (kind &gt; 6)
                     kind = 6;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 33)
                     jjCheckNAddStates(21, 23);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL &amp; l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 3:
                  if ((0x2400L &amp; l) != 0L &amp;&amp; kind &gt; 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 10 &amp;&amp; kind &gt; 8)
                     kind = 8;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0x3fe000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddStates(24, 26);
                  break;
               case 13:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if (curChar == 39 &amp;&amp; kind &gt; 66)
                     kind = 66;
                  break;
               case 20:
                  if ((0x8400000000L &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(22, 18);
                  break;
               case 22:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 23:
                  if ((0xf000000000000L &amp; l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 28:
                  if ((0x8400000000L &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if (curChar == 34 &amp;&amp; kind &gt; 67)
                     kind = 67;
                  break;
               case 30:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 31:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 32:
                  if ((0xf000000000000L &amp; l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar != 36)
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff001000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 37:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar != 46)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddStates(31, 33);
                  break;
               case 39:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddStates(31, 33);
                  break;
               case 41:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddTwoStates(42, 15);
                  break;
               case 43:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddTwoStates(46, 15);
                  break;
               case 47:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 49:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(50, 15);
                  break;
               case 51:
                  if (curChar != 48)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddStates(15, 17);
                  break;
               case 53:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(53, 9);
                  break;
               case 54:
                  if ((0xff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(54, 9);
                  break;
               case 55:
                  if (curChar == 47)
                     jjAddStates(7, 9);
                  break;
               case 57:
                  if ((0xffffffffffffdbffL &amp; l) == 0L)
                     break;
                  if (kind &gt; 7)
                     kind = 7;
                  jjCheckNAddStates(18, 20);
                  break;
               case 58:
                  if ((0x2400L &amp; l) != 0L &amp;&amp; kind &gt; 7)
                     kind = 7;
                  break;
               case 59:
                  if (curChar == 10 &amp;&amp; kind &gt; 7)
                     kind = 7;
                  break;
               case 60:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 42)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddStates(37, 39);
                  break;
               case 64:
                  if ((0xffff7bffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 65:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 66:
                  if (curChar == 47 &amp;&amp; kind &gt; 9)
                     kind = 9;
                  break;
               case 67:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 42)
                     jjCheckNAddStates(40, 42);
                  break;
               case 70:
                  if ((0xffff7bffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(71, 69);
                  break;
               case 71:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(71, 69);
                  break;
               case 72:
                  if (curChar == 47 &amp;&amp; kind &gt; 68)
                     kind = 68;
                  break;
               case 73:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1331" startcolumn="10" endline="1684" endcolumn="32">
MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x1ffffffffL &amp; l) != 0L)
                  {
                     if (kind &gt; 6)
                        kind = 6;
                     jjCheckNAdd(0);
                  }
                  else if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 9);
                  else if (curChar == 36)
                  {
                     if (kind &gt; 69)
                        kind = 69;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L &amp; l) != 0L)
                  {
                     if (kind &gt; 60)
                        kind = 60;
                     jjCheckNAddTwoStates(8, 9);
                  }
                  else if (curChar == 48)
                  {
                     if (kind &gt; 60)
                        kind = 60;
                     jjCheckNAddStates(15, 17);
                  }
                  break;
               case 56:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 47)
                  {
                     if (kind &gt; 7)
                        kind = 7;
                     jjCheckNAddStates(18, 20);
                  }
                  if (curChar == 42)
                     jjCheckNAdd(62);
                  break;
               case 0:
                  if ((0x1ffffffffL &amp; l) == 0L)
                     break;
                  if (kind &gt; 6)
                     kind = 6;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 33)
                     jjCheckNAddStates(21, 23);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL &amp; l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 3:
                  if ((0x2400L &amp; l) != 0L &amp;&amp; kind &gt; 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 10 &amp;&amp; kind &gt; 8)
                     kind = 8;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0x3fe000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddStates(24, 26);
                  break;
               case 13:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if (curChar == 39 &amp;&amp; kind &gt; 66)
                     kind = 66;
                  break;
               case 20:
                  if ((0x8400000000L &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(22, 18);
                  break;
               case 22:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 23:
                  if ((0xf000000000000L &amp; l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 28:
                  if ((0x8400000000L &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if (curChar == 34 &amp;&amp; kind &gt; 67)
                     kind = 67;
                  break;
               case 30:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 31:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 32:
                  if ((0xf000000000000L &amp; l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L &amp; l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar != 36)
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff001000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 69)
                     kind = 69;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 37:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar != 46)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddStates(31, 33);
                  break;
               case 39:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddStates(31, 33);
                  break;
               case 41:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddTwoStates(42, 15);
                  break;
               case 43:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 64)
                     kind = 64;
                  jjCheckNAddTwoStates(46, 15);
                  break;
               case 47:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 49:
                  if ((0x280000000000L &amp; l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L &amp; l) != 0L)
                     jjCheckNAddTwoStates(50, 15);
                  break;
               case 51:
                  if (curChar != 48)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddStates(15, 17);
                  break;
               case 53:
                  if ((0x3ff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(53, 9);
                  break;
               case 54:
                  if ((0xff000000000000L &amp; l) == 0L)
                     break;
                  if (kind &gt; 60)
                     kind = 60;
                  jjCheckNAddTwoStates(54, 9);
                  break;
               case 55:
                  if (curChar == 47)
                     jjAddStates(7, 9);
                  break;
               case 57:
                  if ((0xffffffffffffdbffL &amp; l) == 0L)
                     break;
                  if (kind &gt; 7)
                     kind = 7;
                  jjCheckNAddStates(18, 20);
                  break;
               case 58:
                  if ((0x2400L &amp; l) != 0L &amp;&amp; kind &gt; 7)
                     kind = 7;
                  break;
               case 59:
                  if (curChar == 10 &amp;&amp; kind &gt; 7)
                     kind = 7;
                  break;
               case 60:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 42)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddStates(37, 39);
                  break;
               case 64:
                  if ((0xffff7bffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 65:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 66:
                  if (curChar == 47 &amp;&amp; kind &gt; 9)
                     kind = 9;
                  break;
               case 67:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 42)
                     jjCheckNAddStates(40, 42);
                  break;
               case 70:
                  if ((0xffff7bffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(71, 69);
                  break;
               case 71:
                  if ((0xfffffbffffffffffL &amp; l) != 0L)
                     jjCheckNAddTwoStates(71, 69);
                  break;
               case 72:
                  if (curChar == 47 &amp;&amp; kind &gt; 68)
                     kind = 68;
                  break;
               case 73:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
</source>
    </clone>
</clones>
