<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<clones>
    <clone nlines="25" distance="3">
        <source file="javax/xml/xpath/XPathFactoryFinder.java" startline="238" startcolumn="5" endline="263" endcolumn="5">
private Class&lt;?&gt; createClass(String className) {
        Class clazz;
        // make sure we have access to restricted packages
        boolean internal = false;
        if (System.getSecurityManager() != null) {
            if (className != null &amp;&amp; className.startsWith(DEFAULT_PACKAGE)) {
                internal = true;
            }
        }

        // use approprite ClassLoader
        try {
            if (classLoader != null &amp;&amp; !internal) {
                    clazz = Class.forName(className, false, classLoader);
            } else {
                    clazz = Class.forName(className);
            }
        } catch (Throwable t) {
            if(debug) {
                t.printStackTrace();
            }
            return null;
        }

        return clazz;
    }
</source>
        <source file="javax/xml/validation/SchemaFactoryFinder.java" startline="243" startcolumn="5" endline="267" endcolumn="5">
private Class&lt;?&gt; createClass(String className) {
        Class&lt;?&gt; clazz;
        // make sure we have access to restricted packages
        boolean internal = false;
        if (System.getSecurityManager() != null) {
            if (className != null &amp;&amp; className.startsWith(DEFAULT_PACKAGE)) {
                internal = true;
            }
        }

        try {
            if (classLoader != null &amp;&amp; !internal) {
                clazz = Class.forName(className, false, classLoader);
            } else {
                clazz = Class.forName(className);
            }
        } catch (Throwable t) {
            if(debug)  {
                t.printStackTrace();
            }
            return null;
        }

        return clazz;
    }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaDOM.java" startline="293" startcolumn="5" endline="307" endcolumn="5">
public void printDOM() {
        /*
         for (int i=0; i&lt;relations.length; i++) {
         if (relations[i][0] != null) {
         for (int j=0; j&lt;relations[i].length; j++) {
         if (relations[i][j] != null) {
         System.out.print(relations[i][j].nodeType+"-"+relations[i][j].parentRow+"  ");
         }
         }
         System.out.println("");
         }
         }
         */
        //traverse(getDocumentElement(), 0);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1952" startcolumn="5" endline="1970" endcolumn="5">
public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaDOM.java" startline="293" startcolumn="5" endline="307" endcolumn="5">
public void printDOM() {
        /*
         for (int i=0; i&lt;relations.length; i++) {
         if (relations[i][0] != null) {
         for (int j=0; j&lt;relations[i].length; j++) {
         if (relations[i][j] != null) {
         System.out.print(relations[i][j].nodeType+"-"+relations[i][j].parentRow+"  ");
         }
         }
         System.out.println("");
         }
         }
         */
        //traverse(getDocumentElement(), 0);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="417" startcolumn="5" endline="440" endcolumn="5">
public void endCDATA() throws SAXException
    {
        /* Normally we would do somthing with this but we ignore it.
         * The neccessary call to m_lexHandler.endCDATA() will be made
         * in flushPending().
         *
         * This is so that if we get calls like these:
         *   this.startCDATA();
         *   this.characters(chars1, off1, len1);
         *   this.endCDATA();
         *   this.startCDATA();
         *   this.characters(chars2, off2, len2);
         *   this.endCDATA();
         *
         * that we will only make these calls to the wrapped handlers:
         *
         *   m_lexHandler.startCDATA();
         *   m_saxHandler.characters(chars1, off1, len1);
         *   m_saxHandler.characters(chars1, off2, len2);
         *   m_lexHandler.endCDATA();
         *
         * We will merge adjacent CDATA blocks.
         */
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/LocPathIterator.java" startline="137" startcolumn="3" endline="149" endcolumn="3">
private void readObject(java.io.ObjectInputStream stream)
          throws java.io.IOException, javax.xml.transform.TransformerException
  {
    try
    {
      stream.defaultReadObject();
      m_clones =  new IteratorPool(this);
    }
    catch (ClassNotFoundException cnfe)
    {
      throw new javax.xml.transform.TransformerException(cnfe);
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="66" startcolumn="3" endline="79" endcolumn="3">
private void readObject(java.io.ObjectInputStream stream)
          throws java.io.IOException, javax.xml.transform.TransformerException
  {
    try
    {
      stream.defaultReadObject();
      m_predicateIndex = -1;
      resetProximityPositions();
    }
    catch (ClassNotFoundException cnfe)
    {
      throw new javax.xml.transform.TransformerException(cnfe);
    }
  }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="259" startcolumn="3" endline="271" endcolumn="3">
private void readObject(java.io.ObjectInputStream stream)
          throws java.io.IOException, javax.xml.transform.TransformerException
  {
    try
    {
      stream.defaultReadObject();
      m_clones =  new IteratorPool(this);
    }
    catch (ClassNotFoundException cnfe)
    {
      throw new javax.xml.transform.TransformerException(cnfe);
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="66" startcolumn="3" endline="79" endcolumn="3">
private void readObject(java.io.ObjectInputStream stream)
          throws java.io.IOException, javax.xml.transform.TransformerException
  {
    try
    {
      stream.defaultReadObject();
      m_predicateIndex = -1;
      resetProximityPositions();
    }
    catch (ClassNotFoundException cnfe)
    {
      throw new javax.xml.transform.TransformerException(cnfe);
    }
  }
</source>
    </clone>
    <clone nlines="19" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="417" startcolumn="5" endline="440" endcolumn="5">
public void endCDATA() throws SAXException
    {
        /* Normally we would do somthing with this but we ignore it.
         * The neccessary call to m_lexHandler.endCDATA() will be made
         * in flushPending().
         *
         * This is so that if we get calls like these:
         *   this.startCDATA();
         *   this.characters(chars1, off1, len1);
         *   this.endCDATA();
         *   this.startCDATA();
         *   this.characters(chars2, off2, len2);
         *   this.endCDATA();
         *
         * that we will only make these calls to the wrapped handlers:
         *
         *   m_lexHandler.startCDATA();
         *   m_saxHandler.characters(chars1, off1, len1);
         *   m_saxHandler.characters(chars1, off2, len2);
         *   m_lexHandler.endCDATA();
         *
         * We will merge adjacent CDATA blocks.
         */
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1952" startcolumn="5" endline="1970" endcolumn="5">
public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/XMLCatalogResolver.java" startline="464" startcolumn="5" endline="473" endcolumn="5">
public final synchronized String resolveSystem (String systemId)
        throws IOException {

        if (fCatalogsChanged) {
            parseCatalogs();
            fCatalogsChanged = false;
        }
        return (fCatalog != null)
            ? fCatalog.resolveSystem(systemId) : null;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XMLCatalogResolver.java" startline="490" startcolumn="5" endline="499" endcolumn="5">
public final synchronized String resolvePublic (String publicId, String systemId)
        throws IOException {

        if (fCatalogsChanged) {
            parseCatalogs();
            fCatalogsChanged = false;
        }
        return (fCatalog != null)
            ? fCatalog.resolvePublic(publicId, systemId) : null;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/XMLCatalogResolver.java" startline="519" startcolumn="5" endline="528" endcolumn="5">
public final synchronized String resolveURI (String uri)
        throws IOException {

        if (fCatalogsChanged) {
            parseCatalogs();
            fCatalogsChanged = false;
        }
        return (fCatalog != null)
            ? fCatalog.resolveURI(uri) : null;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XMLCatalogResolver.java" startline="490" startcolumn="5" endline="499" endcolumn="5">
public final synchronized String resolvePublic (String publicId, String systemId)
        throws IOException {

        if (fCatalogsChanged) {
            parseCatalogs();
            fCatalogsChanged = false;
        }
        return (fCatalog != null)
            ? fCatalog.resolvePublic(publicId, systemId) : null;
    }
</source>
    </clone>
    <clone nlines="28" distance="2">
        <source file="javax/xml/parsers/FactoryFinder.java" startline="287" startcolumn="5" endline="314" endcolumn="5">
private static &lt;T&gt; T findServiceProvider(final Class&lt;T&gt; type) {
        try {
            return AccessController.doPrivileged(new PrivilegedAction&lt;T&gt;() {
                public T run() {
                    final ServiceLoader&lt;T&gt; serviceLoader = ServiceLoader.load(type);
                    final Iterator&lt;T&gt; iterator = serviceLoader.iterator();
                    if (iterator.hasNext()) {
                        return iterator.next();
                    } else {
                        return null;
                    }
                 }
            });
        } catch(ServiceConfigurationError e) {
            // It is not possible to wrap an error directly in
            // FactoryConfigurationError - so we need to wrap the
            // ServiceConfigurationError in a RuntimeException.
            // The alternative would be to modify the logic in
            // FactoryConfigurationError to allow setting a
            // Throwable as the cause, but that could cause
            // compatibility issues down the road.
            final RuntimeException x = new RuntimeException(
                    "Provider for " + type + " cannot be created", e);
            final FactoryConfigurationError error =
                    new FactoryConfigurationError(x, x.getMessage());
            throw error;
        }
    }
</source>
        <source file="javax/xml/transform/FactoryFinder.java" startline="319" startcolumn="5" endline="348" endcolumn="5">
private static &lt;T&gt; T findServiceProvider(final Class&lt;T&gt; type)
        throws TransformerFactoryConfigurationError
    {
      try {
            return AccessController.doPrivileged(new PrivilegedAction&lt;T&gt;() {
                public T run() {
                    final ServiceLoader&lt;T&gt; serviceLoader = ServiceLoader.load(type);
                    final Iterator&lt;T&gt; iterator = serviceLoader.iterator();
                    if (iterator.hasNext()) {
                        return iterator.next();
                    } else {
                        return null;
                    }
                 }
            });
        } catch(ServiceConfigurationError e) {
            // It is not possible to wrap an error directly in
            // FactoryConfigurationError - so we need to wrap the
            // ServiceConfigurationError in a RuntimeException.
            // The alternative would be to modify the logic in
            // FactoryConfigurationError to allow setting a
            // Throwable as the cause, but that could cause
            // compatibility issues down the road.
            final RuntimeException x = new RuntimeException(
                    "Provider for " + type + " cannot be created", e);
            final TransformerFactoryConfigurationError error =
                    new TransformerFactoryConfigurationError(x, x.getMessage());
            throw error;
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="65" startcolumn="5" endline="78" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="65" startcolumn="5" endline="78" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/stream/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/stream/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/transform/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/transform/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/validation/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/validation/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="66" startcolumn="5" endline="79" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="66" startcolumn="5" endline="79" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="101" startcolumn="5" endline="114" endcolumn="5">
FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="65" startcolumn="5" endline="78" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="65" startcolumn="5" endline="78" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="65" startcolumn="5" endline="78" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/stream/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/stream/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="javax/xml/stream/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/transform/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/transform/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="javax/xml/transform/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/validation/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/validation/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="javax/xml/validation/SecuritySupport.java" startline="69" startcolumn="5" endline="82" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="66" startcolumn="5" endline="79" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="66" startcolumn="5" endline="79" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="66" startcolumn="5" endline="79" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="67" startcolumn="5" endline="80" endcolumn="5">
FileInputStream getFileInputStream(final File file)
        throws FileNotFoundException
    {
        try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="84" startcolumn="5" endline="97" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="105" startcolumn="5" endline="116" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException) e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="118" startcolumn="5" endline="129" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
            throws FileNotFoundException {
        try {
            return (FileInputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="81" startcolumn="5" endline="94" endcolumn="5">
InputStream getURLInputStream(final URL url)
        throws IOException
    {
        try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="107" startcolumn="5" endline="120" endcolumn="5">
static FileInputStream getFileInputStream(final File file)
    throws FileNotFoundException
    {
        try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="80" startcolumn="5" endline="95" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/parsers/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/stream/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/transform/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="99" startcolumn="5" endline="114" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="137" startcolumn="5" endline="152" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="96" startcolumn="5" endline="111" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="134" startcolumn="5" endline="149" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="80" startcolumn="5" endline="95" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/parsers/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/stream/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/transform/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="99" startcolumn="5" endline="114" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="137" startcolumn="5" endline="152" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="96" startcolumn="5" endline="111" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="134" startcolumn="5" endline="149" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="116" startcolumn="5" endline="131" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="80" startcolumn="5" endline="95" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="80" startcolumn="5" endline="95" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="80" startcolumn="5" endline="95" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/stream/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/stream/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/stream/SecuritySupport.java" startline="84" startcolumn="5" endline="99" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/transform/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/transform/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/transform/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="99" startcolumn="5" endline="114" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="99" startcolumn="5" endline="114" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="99" startcolumn="5" endline="114" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="137" startcolumn="5" endline="152" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="137" startcolumn="5" endline="152" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="137" startcolumn="5" endline="152" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="96" startcolumn="5" endline="111" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="96" startcolumn="5" endline="111" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="96" startcolumn="5" endline="111" endcolumn="5">
URL getResourceAsURL(final ClassLoader cl,
                                           final String name)
    {
        return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="134" startcolumn="5" endline="149" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="134" startcolumn="5" endline="149" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="134" startcolumn="5" endline="149" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="130" startcolumn="5" endline="143" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="143" startcolumn="5" endline="156" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name) {
        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="82" startcolumn="5" endline="97" endcolumn="5">
InputStream getResourceAsStream(final ClassLoader cl,
                                           final String name)
    {
        return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="133" startcolumn="5" endline="148" endcolumn="5">
public static InputStream getResourceAsStream(final ClassLoader cl,
            final String name)
    {
        return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="31" distance="3">
        <source file="javax/xml/stream/FactoryFinder.java" startline="101" startcolumn="5" endline="131" endcolumn="5">
static private Class getProviderClass(String className, ClassLoader cl,
            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
    {
        try {
            if (cl == null) {
                if (useBSClsLoader) {
                    return Class.forName(className, false, FactoryFinder.class.getClassLoader());
                } else {
                    cl = ss.getContextClassLoader();
                    if (cl == null) {
                        throw new ClassNotFoundException();
                    }
                    else {
                        return Class.forName(className, false, cl);
                    }
                }
            }
            else {
                return Class.forName(className, false, cl);
            }
        }
        catch (ClassNotFoundException e1) {
            if (doFallback) {
                // Use current class loader - should always be bootstrap CL
                return Class.forName(className, false, FactoryFinder.class.getClassLoader());
            }
            else {
                throw e1;
            }
        }
    }
</source>
        <source file="javax/xml/datatype/FactoryFinder.java" startline="100" startcolumn="5" endline="130" endcolumn="5">
static private Class&lt;?&gt; getProviderClass(String className, ClassLoader cl,
            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
    {
        try {
            if (cl == null) {
                if (useBSClsLoader) {
                    return Class.forName(className, false, FactoryFinder.class.getClassLoader());
                } else {
                    cl = ss.getContextClassLoader();
                    if (cl == null) {
                        throw new ClassNotFoundException();
                    }
                    else {
                        return Class.forName(className, false, cl);
                    }
                }
            }
            else {
                return Class.forName(className, false, cl);
            }
        }
        catch (ClassNotFoundException e1) {
            if (doFallback) {
                // Use current class loader - should always be bootstrap CL
                return Class.forName(className, false, FactoryFinder.class.getClassLoader());
            }
            else {
                throw e1;
            }
        }
    }
</source>
    </clone>
    <clone nlines="31" distance="3">
        <source file="javax/xml/stream/FactoryFinder.java" startline="101" startcolumn="5" endline="131" endcolumn="5">
static private Class getProviderClass(String className, ClassLoader cl,
            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
    {
        try {
            if (cl == null) {
                if (useBSClsLoader) {
                    return Class.forName(className, false, FactoryFinder.class.getClassLoader());
                } else {
                    cl = ss.getContextClassLoader();
                    if (cl == null) {
                        throw new ClassNotFoundException();
                    }
                    else {
                        return Class.forName(className, false, cl);
                    }
                }
            }
            else {
                return Class.forName(className, false, cl);
            }
        }
        catch (ClassNotFoundException e1) {
            if (doFallback) {
                // Use current class loader - should always be bootstrap CL
                return Class.forName(className, false, FactoryFinder.class.getClassLoader());
            }
            else {
                throw e1;
            }
        }
    }
</source>
        <source file="javax/xml/parsers/FactoryFinder.java" startline="100" startcolumn="5" endline="130" endcolumn="5">
static private Class&lt;?&gt; getProviderClass(String className, ClassLoader cl,
            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
    {
        try {
            if (cl == null) {
                if (useBSClsLoader) {
                    return Class.forName(className, false, FactoryFinder.class.getClassLoader());
                } else {
                    cl = ss.getContextClassLoader();
                    if (cl == null) {
                        throw new ClassNotFoundException();
                    }
                    else {
                        return Class.forName(className, false, cl);
                    }
                }
            }
            else {
                return Class.forName(className, false, cl);
            }
        }
        catch (ClassNotFoundException e1) {
            if (doFallback) {
                // Use current class loader - should always be bootstrap CL
                return Class.forName(className, false, FactoryFinder.class.getClassLoader());
            }
            else {
                throw e1;
            }
        }
    }
</source>
    </clone>
    <clone nlines="31" distance="3">
        <source file="javax/xml/stream/FactoryFinder.java" startline="101" startcolumn="5" endline="131" endcolumn="5">
static private Class getProviderClass(String className, ClassLoader cl,
            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
    {
        try {
            if (cl == null) {
                if (useBSClsLoader) {
                    return Class.forName(className, false, FactoryFinder.class.getClassLoader());
                } else {
                    cl = ss.getContextClassLoader();
                    if (cl == null) {
                        throw new ClassNotFoundException();
                    }
                    else {
                        return Class.forName(className, false, cl);
                    }
                }
            }
            else {
                return Class.forName(className, false, cl);
            }
        }
        catch (ClassNotFoundException e1) {
            if (doFallback) {
                // Use current class loader - should always be bootstrap CL
                return Class.forName(className, false, FactoryFinder.class.getClassLoader());
            }
            else {
                throw e1;
            }
        }
    }
</source>
        <source file="javax/xml/transform/FactoryFinder.java" startline="103" startcolumn="5" endline="133" endcolumn="5">
static private Class&lt;?&gt; getProviderClass(String className, ClassLoader cl,
            boolean doFallback, boolean useBSClsLoader) throws ClassNotFoundException
    {
        try {
            if (cl == null) {
                if (useBSClsLoader) {
                    return Class.forName(className, false, FactoryFinder.class.getClassLoader());
                } else {
                    cl = ss.getContextClassLoader();
                    if (cl == null) {
                        throw new ClassNotFoundException();
                    }
                    else {
                        return Class.forName(className, false, cl);
                    }
                }
            }
            else {
                return Class.forName(className, false, cl);
            }
        }
        catch (ClassNotFoundException e1) {
            if (doFallback) {
                // Use current class loader - should always be bootstrap CL
                return Class.forName(className, false, FactoryFinder.class.getClassLoader());
            }
            else {
                throw e1;
            }
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="1346" startcolumn="5" endline="1356" endcolumn="5">
final boolean inTemporaryOutputState()
    {
        /* This is a hack. We should really be letting the serializer know
         * that it is in temporary output state with an explicit call, but
         * from a pragmatic point of view (for now anyways) having no output
         * encoding at all, not even the default UTF-8 indicates that the serializer
         * is being used for temporary RTF.
         */
        return (getEncoding() == null);

    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/Text.java" startline="207" startcolumn="5" endline="217" endcolumn="5">
public boolean canLoadAsArrayOffsetLength() {
        // Magic number!  21845*3 == 65535.  BCEL uses a DataOutputStream to
        // serialize class files.  The Java run-time places a limit on the size
        // of String data written using a DataOutputStream - it cannot require
        // more than 64KB when represented as UTF-8.  The number of bytes
        // required to represent a Java string as UTF-8 cannot be greater
        // than three times the number of char's in the string, hence the
        // check for 21845.

        return (_text.length() &lt;= 21845);
    }
</source>
    </clone>
    <clone nlines="19" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1952" startcolumn="5" endline="1970" endcolumn="5">
public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="2304" startcolumn="5" endline="2323" endcolumn="5">
@Override
    public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1952" startcolumn="5" endline="1970" endcolumn="5">
public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1899" startcolumn="5" endline="1944" endcolumn="5">
public Text replaceWholeText(String content)
                                 throws DOMException{
/*

        if (needsSyncData()) {
            synchronizeData();
        }

        // make sure we can make the replacement
        if (!canModify(nextSibling)) {
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null));
        }

        Node parent = this.getParentNode();
        if (content == null || content.length() == 0) {
            // remove current node
            if (parent !=null) { // check if node in the tree
                parent.removeChild(this);
                return null;
            }
        }
        Text currentNode = null;
        if (isReadOnly()){
            Text newNode = this.ownerDocument().createTextNode(content);
            if (parent !=null) { // check if node in the tree
                parent.insertBefore(newNode, this);
                parent.removeChild(this);
                currentNode = newNode;
            } else {
                return newNode;
            }
        }  else {
            this.setData(content);
            currentNode = this;
        }
        Node sibling =  currentNode.getNextSibling();
        while ( sibling !=null) {
            parent.removeChild(sibling);
            sibling = currentNode.getNextSibling();
        }

        return currentNode;
*/
        return null; //Pending
    }
</source>
    </clone>
    <clone nlines="19" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1952" startcolumn="5" endline="1970" endcolumn="5">
public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="560" startcolumn="3" endline="589" endcolumn="3">
public int hashCode()
  {
    // Commenting this out because in JDK1.1.8 and VJ++
    // we don't match XMLStrings. Defaulting to the super
    // causes us to create a string, but at this point
    // this only seems to get called in key processing.
    // Maybe we can live with it?

/*
    int h = m_hash;

    if (h == 0)
    {
      int off = m_start;
      int len = m_length;
      FastStringBuffer fsb = fsb();

      for (int i = 0; i &lt; len; i++)
      {
        h = 31 * h + fsb.charAt(off);

        off++;
      }

      m_hash = h;
    }
    */

    return super.hashCode(); // h;
  }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1952" startcolumn="5" endline="1970" endcolumn="5">
public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
        <source file="com/sun/org/apache/xpath/internal/operations/Variable.java" startline="328" startcolumn="3" endline="349" endcolumn="3">
public int getAnalysisBits()
  {

    // J2SE does not support Xalan interpretive
    /*
        com.sun.org.apache.xalan.internal.templates.ElemVariable vvar = getElemVariable();
        if(null != vvar)
        {
                XPath xpath = vvar.getSelect();
                if(null != xpath)
                {
                        Expression expr = xpath.getExpression();
                        if(null != expr &amp;&amp; expr instanceof PathComponent)
                        {
                                return ((PathComponent)expr).getAnalysisBits();
                        }
                }
        }
    */

    return WalkerFactory.BIT_FILTER;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="560" startcolumn="3" endline="589" endcolumn="3">
public int hashCode()
  {
    // Commenting this out because in JDK1.1.8 and VJ++
    // we don't match XMLStrings. Defaulting to the super
    // causes us to create a string, but at this point
    // this only seems to get called in key processing.
    // Maybe we can live with it?

/*
    int h = m_hash;

    if (h == 0)
    {
      int off = m_start;
      int len = m_length;
      FastStringBuffer fsb = fsb();

      for (int i = 0; i &lt; len; i++)
      {
        h = 31 * h + fsb.charAt(off);

        off++;
      }

      m_hash = h;
    }
    */

    return super.hashCode(); // h;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/Text.java" startline="207" startcolumn="5" endline="217" endcolumn="5">
public boolean canLoadAsArrayOffsetLength() {
        // Magic number!  21845*3 == 65535.  BCEL uses a DataOutputStream to
        // serialize class files.  The Java run-time places a limit on the size
        // of String data written using a DataOutputStream - it cannot require
        // more than 64KB when represented as UTF-8.  The number of bytes
        // required to represent a Java string as UTF-8 cannot be greater
        // than three times the number of char's in the string, hence the
        // check for 21845.

        return (_text.length() &lt;= 21845);
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xpath/internal/objects/XNodeSet.java" startline="387" startcolumn="3" endline="400" endcolumn="3">
public DTMIterator iter()
  {
    try
    {
        if(hasCache())
                return cloneWithReset();
        else
                return this; // don't bother to clone... won't do any good!
    }
    catch (CloneNotSupportedException cnse)
    {
      throw new RuntimeException(cnse.getMessage());
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XNodeSet.java" startline="407" startcolumn="3" endline="420" endcolumn="3">
public XObject getFresh()
  {
    try
    {
        if(hasCache())
                return (XObject)cloneWithReset();
        else
                return this; // don't bother to clone... won't do any good!
    }
    catch (CloneNotSupportedException cnse)
    {
      throw new RuntimeException(cnse.getMessage());
    }
  }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="252" startcolumn="5" endline="269" endcolumn="5">
public void printSpace()
        throws IOException
    {
        try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = ' ';
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="232" startcolumn="5" endline="249" endcolumn="5">
public void printText( char ch )
        throws IOException
    {
        try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = ch;
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="272" startcolumn="5" endline="289" endcolumn="5">
public void breakLine()
        throws IOException
    {
        try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = '\n';
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="232" startcolumn="5" endline="249" endcolumn="5">
public void printText( char ch )
        throws IOException
    {
        try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = ch;
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/xml/internal/stream/writers/XMLDOMWriterImpl.java" startline="559" startcolumn="5" endline="569" endcolumn="5">
public void writeStartDocument() throws XMLStreamException {
        try{
            if(mXmlVersion != null){
                mXmlVersion.invoke(ownerDoc, new Object[] {"1.0"});
            }
        }catch(IllegalAccessException iae){
            throw new XMLStreamException(iae);
        }catch(InvocationTargetException ite){
            throw new XMLStreamException(ite);
        }
    }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLDOMWriterImpl.java" startline="577" startcolumn="5" endline="587" endcolumn="5">
public void writeStartDocument(String version) throws XMLStreamException {
        try{
            if(mXmlVersion != null){
                mXmlVersion.invoke(ownerDoc, new Object[] {version});
            }
        }catch(IllegalAccessException iae){
            throw new XMLStreamException(iae);
        }catch(InvocationTargetException ite){
            throw new XMLStreamException(ite);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/Messages.java" startline="150" startcolumn="5" endline="161" endcolumn="5">
public final String createMessage(String msgKey, Object args[])
    {
        if (m_resourceBundle == null)
            m_resourceBundle = SecuritySupport.getResourceBundle(m_resourceBundleName);

        if (m_resourceBundle != null)
        {
            return createMsg(m_resourceBundle, msgKey, args);
        }
        else
            return "Could not load the resource bundles: "+ m_resourceBundleName;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/res/XMLMessages.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public static final String createXMLMessage(String msgKey, Object args[])
  {
    if (XMLBundle == null) {
        XMLBundle = SecuritySupport.getResourceBundle(XML_ERROR_RESOURCES);
    }

    if (XMLBundle != null)
    {
      return createMsg(XMLBundle, msgKey, args);
    }
    else
      return "Could not load any resource bundles.";
  }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.java" startline="3283" startcolumn="5" endline="3292" endcolumn="5">
protected XMLString getString(){
        if(fAttributeCacheUsedCount &lt; initialCacheCount || fAttributeCacheUsedCount &lt; attributeValueCache.size()){
            return (XMLString)attributeValueCache.get(fAttributeCacheUsedCount++);
        } else{
            XMLString str = new XMLString();
            fAttributeCacheUsedCount++;
            attributeValueCache.add(str);
            return str;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="1463" startcolumn="5" endline="1472" endcolumn="5">
XMLStringBuffer getStringBuffer(){
        if((fStringBufferIndex &lt; initialCacheCount )|| (fStringBufferIndex &lt; stringBufferCache.size())){
            return (XMLStringBuffer)stringBufferCache.get(fStringBufferIndex++);
        }else{
            XMLStringBuffer tmpObj = new XMLStringBuffer();
            fStringBufferIndex++;
            stringBufferCache.add(tmpObj);
            return tmpObj;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.java" startline="1289" startcolumn="9" endline="1299" endcolumn="9">
protected boolean scanRootElementHook()
        throws IOException, XNIException {

            if (scanStartElement()) {
                setScannerState(SCANNER_STATE_TRAILING_MISC);
                setDriver(fTrailingMiscDriver);
                return true;
            }
            return false;

        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNSDocumentScannerImpl.java" startline="601" startcolumn="9" endline="612" endcolumn="9">
protected boolean scanRootElementHook()
        throws IOException, XNIException {

            reconfigurePipeline();
            if (scanStartElement()) {
                setScannerState(SCANNER_STATE_TRAILING_MISC);
                setDriver(fTrailingMiscDriver);
                return true;
            }
            return false;

        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="265" startcolumn="3" endline="274" endcolumn="3">
private final void readFields() throws IOException, ClassFormatException
  {
    int fields_count;

    fields_count = file.readUnsignedShort();
    fields       = new Field[fields_count];

    for(int i=0; i &lt; fields_count; i++)
      fields[i] = new Field(file, constant_pool);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="217" startcolumn="3" endline="226" endcolumn="3">
private final void readAttributes() throws IOException, ClassFormatException
  {
    int attributes_count;

    attributes_count = file.readUnsignedShort();
    attributes       = new Attribute[attributes_count];

    for(int i=0; i &lt; attributes_count; i++)
      attributes[i] = Attribute.readAttribute(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="311" startcolumn="3" endline="320" endcolumn="3">
private final void readMethods() throws IOException, ClassFormatException
  {
    int methods_count;

    methods_count = file.readUnsignedShort();
    methods       = new Method[methods_count];

    for(int i=0; i &lt; methods_count; i++)
      methods[i] = new Method(file, constant_pool);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="217" startcolumn="3" endline="226" endcolumn="3">
private final void readAttributes() throws IOException, ClassFormatException
  {
    int attributes_count;

    attributes_count = file.readUnsignedShort();
    attributes       = new Attribute[attributes_count];

    for(int i=0; i &lt; attributes_count; i++)
      attributes[i] = Attribute.readAttribute(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="18" distance="1">
        <source file="com/sun/org/apache/bcel/internal/generic/MethodGen.java" startline="416" startcolumn="3" endline="433" endcolumn="3">
private LocalVariableGen[] getLocalVariableTypes() {
    int                size = type_vec.size();
    LocalVariableGen[] lg   = new LocalVariableGen[size];
    type_vec.toArray(lg);

    for(int i=0; i &lt; size; i++) {
      if(lg[i].getStart() == null)
        lg[i].setStart(il.getStart());

      if(lg[i].getEnd() == null)
        lg[i].setEnd(il.getEnd());
    }

    if(size &gt; 1)
      sort(lg, 0, size - 1);

    return lg;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/MethodGen.java" startline="391" startcolumn="3" endline="408" endcolumn="3">
public LocalVariableGen[] getLocalVariables() {
    int                size = variable_vec.size();
    LocalVariableGen[] lg   = new LocalVariableGen[size];
    variable_vec.toArray(lg);

    for(int i=0; i &lt; size; i++) {
      if(lg[i].getStart() == null)
        lg[i].setStart(il.getStart());

      if(lg[i].getEnd() == null)
        lg[i].setEnd(il.getEnd());
    }

    if(size &gt; 1)
      sort(lg, 0, size - 1);

    return lg;
  }
</source>
    </clone>
    <clone nlines="20" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="2304" startcolumn="5" endline="2323" endcolumn="5">
@Override
    public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="2250" startcolumn="5" endline="2296" endcolumn="5">
@Override
    public Text replaceWholeText(String content)
                                 throws DOMException{
/*

        if (needsSyncData()) {
            synchronizeData();
        }

        // make sure we can make the replacement
        if (!canModify(nextSibling)) {
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null));
        }

        Node parent = this.getParentNode();
        if (content == null || content.length() == 0) {
            // remove current node
            if (parent !=null) { // check if node in the tree
                parent.removeChild(this);
                return null;
            }
        }
        Text currentNode = null;
        if (isReadOnly()){
            Text newNode = this.ownerDocument().createTextNode(content);
            if (parent !=null) { // check if node in the tree
                parent.insertBefore(newNode, this);
                parent.removeChild(this);
                currentNode = newNode;
            } else {
                return newNode;
            }
        }  else {
            this.setData(content);
            currentNode = this;
        }
        Node sibling =  currentNode.getNextSibling();
        while ( sibling !=null) {
            parent.removeChild(sibling);
            sibling = currentNode.getNextSibling();
        }

        return currentNode;
*/
        return null; //Pending
    }
</source>
    </clone>
    <clone nlines="20" distance="5">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="2304" startcolumn="5" endline="2323" endcolumn="5">
@Override
    public String getWholeText(){

/*
        if (needsSyncData()) {
            synchronizeData();
        }
        if (nextSibling == null) {
            return data;
        }
        StringBuffer buffer = new StringBuffer();
        if (data != null &amp;&amp; data.length() != 0) {
            buffer.append(data);
        }
        getWholeText(nextSibling, buffer);
        return buffer.toString();
*/
        return null; // PENDING

    }
</source>
        <source file="com/sun/org/apache/xpath/internal/operations/Variable.java" startline="328" startcolumn="3" endline="349" endcolumn="3">
public int getAnalysisBits()
  {

    // J2SE does not support Xalan interpretive
    /*
        com.sun.org.apache.xalan.internal.templates.ElemVariable vvar = getElemVariable();
        if(null != vvar)
        {
                XPath xpath = vvar.getSelect();
                if(null != xpath)
                {
                        Expression expr = xpath.getExpression();
                        if(null != expr &amp;&amp; expr instanceof PathComponent)
                        {
                                return ((PathComponent)expr).getAnalysisBits();
                        }
                }
        }
    */

    return WalkerFactory.BIT_FILTER;
  }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1074" startcolumn="5" endline="1083" endcolumn="5">
@Override
    public TransformerHandler newTransformerHandler()
        throws TransformerConfigurationException
    {
        final Transformer transformer = newTransformer();
        if (_uriResolver != null) {
            transformer.setURIResolver(_uriResolver);
        }
        return new TransformerHandlerImpl((TransformerImpl) transformer);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1095" startcolumn="5" endline="1104" endcolumn="5">
@Override
    public TransformerHandler newTransformerHandler(Source src)
        throws TransformerConfigurationException
    {
        final Transformer transformer = newTransformer(src);
        if (_uriResolver != null) {
            transformer.setURIResolver(_uriResolver);
        }
        return new TransformerHandlerImpl((TransformerImpl) transformer);
    }
</source>
    </clone>
    <clone nlines="18" distance="1">
        <source file="com/sun/org/apache/xalan/internal/utils/FeaturePropertyBase.java" startline="197" startcolumn="5" endline="214" endcolumn="5">
void getSystemProperty(Enum property, String systemProperty) {
        try {
            String value = SecuritySupport.getSystemProperty(systemProperty);
            if (value != null) {
                values[property.ordinal()] = value;
                states[property.ordinal()] = State.SYSTEMPROPERTY;
                return;
            }

            value = SecuritySupport.readJAXPProperty(systemProperty);
            if (value != null) {
                values[property.ordinal()] = value;
                states[property.ordinal()] = State.JAXPDOTPROPERTIES;
            }
        } catch (NumberFormatException e) {
            //invalid setting ignored
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/XMLSecurityPropertyManager.java" startline="207" startcolumn="5" endline="224" endcolumn="5">
private void getSystemProperty(Property property, String systemProperty) {
        try {
            String value = SecuritySupport.getSystemProperty(systemProperty);
            if (value != null) {
                values[property.ordinal()] = value;
                states[property.ordinal()] = State.SYSTEMPROPERTY;
                return;
            }

            value = SecuritySupport.readJAXPProperty(systemProperty);
            if (value != null) {
                values[property.ordinal()] = value;
                states[property.ordinal()] = State.JAXPDOTPROPERTIES;
            }
        } catch (NumberFormatException e) {
            //invalid setting ignored
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingXMLReader.java" startline="63" startcolumn="3" endline="75" endcolumn="3">
public ResolvingXMLReader() {
    super();
    SAXParserFactory spf = catalogManager.useServicesMechanism() ?
                    SAXParserFactory.newInstance() : new SAXParserFactoryImpl();
    spf.setNamespaceAware(namespaceAware);
    spf.setValidating(validating);
    try {
      SAXParser parser = spf.newSAXParser();
      setParent(parser.getXMLReader());
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingXMLReader.java" startline="84" startcolumn="3" endline="96" endcolumn="3">
public ResolvingXMLReader(CatalogManager manager) {
    super(manager);
    SAXParserFactory spf = catalogManager.useServicesMechanism() ?
                    SAXParserFactory.newInstance() : new SAXParserFactoryImpl();
    spf.setNamespaceAware(namespaceAware);
    spf.setValidating(validating);
    try {
      SAXParser parser = spf.newSAXParser();
      setParent(parser.getXMLReader());
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="125" startcolumn="3" endline="134" endcolumn="3">
public Object peek()
  {
    try {
      return m_map[m_firstFree - 1];
    }
    catch (ArrayIndexOutOfBoundsException e)
    {
      throw new EmptyStackException();
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="122" startcolumn="3" endline="131" endcolumn="3">
public final int peek()
  {
    try {
      return m_map[m_firstFree - 1];
    }
    catch (ArrayIndexOutOfBoundsException e)
    {
      throw new EmptyStackException();
    }
  }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="com/sun/org/apache/xpath/internal/NodeSetDTM.java" startline="387" startcolumn="3" endline="400" endcolumn="3">
public int nextNode()
  {

    if ((m_next) &lt; this.size())
    {
      int next = this.elementAt(m_next);

      m_next++;

      return next;
    }
    else
      return DTM.NULL;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="243" startcolumn="3" endline="256" endcolumn="3">
public Node nextNode() throws DOMException
  {

    if ((m_next) &lt; this.size())
    {
      Node next = this.elementAt(m_next);

      m_next++;

      return next;
    }
    else
      return null;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DatatypeFactoryImpl.java" startline="218" startcolumn="9" endline="229" endcolumn="9">
public Duration newDurationYearMonth(
                final boolean isPositive,
                final BigInteger year,
                final BigInteger month) {

                return new DurationYearMonthImpl(
                         isPositive,
                         year,
                         month
                 );

        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DatatypeFactoryImpl.java" startline="248" startcolumn="5" endline="258" endcolumn="17">
@Override
        public Duration newDurationYearMonth(
                final boolean isPositive,
                final int year,
                final int month) {

                return new DurationYearMonthImpl(
                        isPositive,
                        year,
                        month);
                }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1172" startcolumn="3" endline="1184" endcolumn="3">
public void removeAllElements()
  {

    if (null == m_map)
      return;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      m_map[i] = null;
    }

    m_firstFree = 0;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="430" startcolumn="3" endline="442" endcolumn="3">
public void removeAllElements()
  {

    if (null == m_map)
      return;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      m_map[i] = DTM.NULL;
    }

    m_firstFree = 0;
  }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xpath/internal/patterns/UnionPattern.java" startline="82" startcolumn="3" endline="93" endcolumn="3">
public void setPatterns(StepPattern[] patterns)
  {
    m_patterns = patterns;
    if(null != patterns)
    {
        for(int i = 0; i &lt; patterns.length; i++)
        {
                patterns[i].exprSetParent(this);
        }
    }

  }
</source>
        <source file="com/sun/org/apache/xpath/internal/patterns/StepPattern.java" startline="285" startcolumn="3" endline="298" endcolumn="3">
public void setPredicates(Expression[] predicates)
  {

    m_predicates = predicates;
    if(null != predicates)
    {
        for(int i = 0; i &lt; predicates.length; i++)
        {
                predicates[i].exprSetParent(this);
        }
    }

    calcScore();
  }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="699" startcolumn="5" endline="718" endcolumn="5">
public void namespaceAfterStartElement(
        final String prefix,
        final String uri)
        throws SAXException
    {
        // hack for XSLTC with finding URI for default namespace
        if (m_elemContext.m_elementURI == null)
        {
            String prefix1 = getPrefixPart(m_elemContext.m_elementName);
            if (prefix1 == null &amp;&amp; EMPTYSTRING.equals(prefix))
            {
                // the elements URI is not known yet, and it
                // doesn't have a prefix, and we are currently
                // setting the uri for prefix "", so we have
                // the uri for the element... lets remember it
                m_elemContext.m_elementURI = uri;
            }
        }
        startPrefixMapping(prefix,uri,false);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLStream.java" startline="542" startcolumn="5" endline="564" endcolumn="5">
public void namespaceAfterStartElement(
        final String prefix,
        final String uri)
        throws SAXException
    {

        // hack for XSLTC with finding URI for default namespace
        if (m_elemContext.m_elementURI == null)
        {
            String prefix1 = getPrefixPart(m_elemContext.m_elementName);
            if (prefix1 == null &amp;&amp; EMPTYSTRING.equals(prefix))
            {
                // the elements URI is not known yet, and it
                // doesn't have a prefix, and we are currently
                // setting the uri for prefix "", so we have
                // the uri for the element... lets remember it
                m_elemContext.m_elementURI = uri;
            }
        }
        startPrefixMapping(prefix,uri,false);
        return;

    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="317" startcolumn="5" endline="326" endcolumn="5">
public void copy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(node, handler);
        }
        else {
            super.copy(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="339" startcolumn="5" endline="348" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.shallowCopy(node, handler);
        }
        else {
            return super.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="366" startcolumn="5" endline="375" endcolumn="5">
public void characters(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.characters(node, handler);
        }
        else {
            super.characters(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="339" startcolumn="5" endline="348" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.shallowCopy(node, handler);
        }
        else {
            return super.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="317" startcolumn="5" endline="326" endcolumn="5">
public void copy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(node, handler);
        }
        else {
            super.copy(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="314" startcolumn="5" endline="323" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.shallowCopy(node, handler);
        }
        else {
            return _dom.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="366" startcolumn="5" endline="375" endcolumn="5">
public void characters(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.characters(node, handler);
        }
        else {
            super.characters(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="314" startcolumn="5" endline="323" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.shallowCopy(node, handler);
        }
        else {
            return _dom.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="317" startcolumn="5" endline="326" endcolumn="5">
public void copy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(node, handler);
        }
        else {
            super.copy(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="330" startcolumn="5" endline="339" endcolumn="5">
public void characters(final int textNode, SerializationHandler handler)
      throws TransletException
    {
        if (_enhancedDOM != null) {
            _enhancedDOM.characters(textNode, handler);
        }
        else {
            _dom.characters(textNode, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="366" startcolumn="5" endline="375" endcolumn="5">
public void characters(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.characters(node, handler);
        }
        else {
            super.characters(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="330" startcolumn="5" endline="339" endcolumn="5">
public void characters(final int textNode, SerializationHandler handler)
      throws TransletException
    {
        if (_enhancedDOM != null) {
            _enhancedDOM.characters(textNode, handler);
        }
        else {
            _dom.characters(textNode, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="317" startcolumn="5" endline="326" endcolumn="5">
public void copy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(node, handler);
        }
        else {
            super.copy(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="487" startcolumn="5" endline="496" endcolumn="5">
public String lookupNamespace(int node, String prefix)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.lookupNamespace(node, prefix);
        }
        else {
            return super.lookupNamespace(node, prefix);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="366" startcolumn="5" endline="375" endcolumn="5">
public void characters(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.characters(node, handler);
        }
        else {
            super.characters(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="487" startcolumn="5" endline="496" endcolumn="5">
public String lookupNamespace(int node, String prefix)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.lookupNamespace(node, prefix);
        }
        else {
            return super.lookupNamespace(node, prefix);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="330" startcolumn="5" endline="339" endcolumn="5">
public void characters(final int textNode, SerializationHandler handler)
      throws TransletException
    {
        if (_enhancedDOM != null) {
            _enhancedDOM.characters(textNode, handler);
        }
        else {
            _dom.characters(textNode, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="339" startcolumn="5" endline="348" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.shallowCopy(node, handler);
        }
        else {
            return super.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="330" startcolumn="5" endline="339" endcolumn="5">
public void characters(final int textNode, SerializationHandler handler)
      throws TransletException
    {
        if (_enhancedDOM != null) {
            _enhancedDOM.characters(textNode, handler);
        }
        else {
            _dom.characters(textNode, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="314" startcolumn="5" endline="323" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.shallowCopy(node, handler);
        }
        else {
            return _dom.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="330" startcolumn="5" endline="339" endcolumn="5">
public void characters(final int textNode, SerializationHandler handler)
      throws TransletException
    {
        if (_enhancedDOM != null) {
            _enhancedDOM.characters(textNode, handler);
        }
        else {
            _dom.characters(textNode, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="487" startcolumn="5" endline="496" endcolumn="5">
public String lookupNamespace(int node, String prefix)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.lookupNamespace(node, prefix);
        }
        else {
            return super.lookupNamespace(node, prefix);
        }
    }
</source>
    </clone>
    <clone nlines="46" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="1490" startcolumn="5" endline="1535" endcolumn="5">
protected void addRecognizedParamsAndSetDefaults(XMLComponent component) {

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);

        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i &lt; recognizedFeatures.length; ++i) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fFeatures.containsKey(featureId)) {
                        fFeatures.put(featureId, state);
                        // For newly added components who recognize this feature
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i &lt; recognizedProperties.length; ++i) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fProperties.containsKey(propertyId)) {
                        fProperties.put(propertyId, value);
                        // For newly added components who recognize this property
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="940" startcolumn="5" endline="985" endcolumn="5">
private void addRecognizedParamsAndSetDefaults(XMLComponent component) {

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);

        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i &lt; recognizedFeatures.length; ++i) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fFeatures.containsKey(featureId)) {
                        fFeatures.put(featureId, state);
                        // For newly added components who recognize this feature
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i &lt; recognizedProperties.length; ++i) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fProperties.containsKey(propertyId)) {
                        fProperties.put(propertyId, value);
                        // For newly added components who recognize this property
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
    }
</source>
    </clone>
    <clone nlines="46" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="1266" startcolumn="5" endline="1311" endcolumn="5">
protected void addRecognizedParamsAndSetDefaults(XMLComponent component) {

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);

        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i &lt; recognizedFeatures.length; ++i) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fFeatures.containsKey(featureId)) {
                        fFeatures.put(featureId, state);
                        // For newly added components who recognize this feature
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i &lt; recognizedProperties.length; ++i) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fProperties.containsKey(propertyId)) {
                        fProperties.put(propertyId, value);
                        // For newly added components who recognize this property
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="940" startcolumn="5" endline="985" endcolumn="5">
private void addRecognizedParamsAndSetDefaults(XMLComponent component) {

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);

        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i &lt; recognizedFeatures.length; ++i) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fFeatures.containsKey(featureId)) {
                        fFeatures.put(featureId, state);
                        // For newly added components who recognize this feature
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i &lt; recognizedProperties.length; ++i) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fProperties.containsKey(propertyId)) {
                        fProperties.put(propertyId, value);
                        // For newly added components who recognize this property
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
    }
</source>
    </clone>
    <clone nlines="46" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="1165" startcolumn="5" endline="1210" endcolumn="5">
protected void addRecognizedParamsAndSetDefaults(XMLComponent component) {

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);

        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i &lt; recognizedFeatures.length; ++i) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fFeatures.containsKey(featureId)) {
                        fFeatures.put(featureId, state);
                        // For newly added components who recognize this feature
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i &lt; recognizedProperties.length; ++i) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fProperties.containsKey(propertyId)) {
                        fProperties.put(propertyId, value);
                        // For newly added components who recognize this property
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="940" startcolumn="5" endline="985" endcolumn="5">
private void addRecognizedParamsAndSetDefaults(XMLComponent component) {

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);

        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i &lt; recognizedFeatures.length; ++i) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fFeatures.containsKey(featureId)) {
                        fFeatures.put(featureId, state);
                        // For newly added components who recognize this feature
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i &lt; recognizedProperties.length; ++i) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    // Do not overwrite values already set on the configuration.
                    if (!fProperties.containsKey(propertyId)) {
                        fProperties.put(propertyId, value);
                        // For newly added components who recognize this property
                        // but did not offer a default value, we need to make
                        // sure these components will get an opportunity to read
                        // the value before parsing begins.
                        fConfigUpdated = true;
                    }
                }
            }
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="296" startcolumn="3" endline="305" endcolumn="3">
private final void readInterfaces() throws IOException, ClassFormatException
  {
    int interfaces_count;

    interfaces_count = file.readUnsignedShort();
    interfaces       = new int[interfaces_count];

    for(int i=0; i &lt; interfaces_count; i++)
      interfaces[i] = file.readUnsignedShort();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="217" startcolumn="3" endline="226" endcolumn="3">
private final void readAttributes() throws IOException, ClassFormatException
  {
    int attributes_count;

    attributes_count = file.readUnsignedShort();
    attributes       = new Attribute[attributes_count];

    for(int i=0; i &lt; attributes_count; i++)
      attributes[i] = Attribute.readAttribute(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="296" startcolumn="3" endline="305" endcolumn="3">
private final void readInterfaces() throws IOException, ClassFormatException
  {
    int interfaces_count;

    interfaces_count = file.readUnsignedShort();
    interfaces       = new int[interfaces_count];

    for(int i=0; i &lt; interfaces_count; i++)
      interfaces[i] = file.readUnsignedShort();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="265" startcolumn="3" endline="274" endcolumn="3">
private final void readFields() throws IOException, ClassFormatException
  {
    int fields_count;

    fields_count = file.readUnsignedShort();
    fields       = new Field[fields_count];

    for(int i=0; i &lt; fields_count; i++)
      fields[i] = new Field(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="296" startcolumn="3" endline="305" endcolumn="3">
private final void readInterfaces() throws IOException, ClassFormatException
  {
    int interfaces_count;

    interfaces_count = file.readUnsignedShort();
    interfaces       = new int[interfaces_count];

    for(int i=0; i &lt; interfaces_count; i++)
      interfaces[i] = file.readUnsignedShort();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/ClassParser.java" startline="311" startcolumn="3" endline="320" endcolumn="3">
private final void readMethods() throws IOException, ClassFormatException
  {
    int methods_count;

    methods_count = file.readUnsignedShort();
    methods       = new Method[methods_count];

    for(int i=0; i &lt; methods_count; i++)
      methods[i] = new Method(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xpointer/ElementSchemePointer.java" startline="582" startcolumn="9" endline="592" endcolumn="9">
private void addToken(int token) {
            try {
                fTokens[fTokenCount] = token;
            } catch (ArrayIndexOutOfBoundsException ex) {
                int[] oldList = fTokens;
                fTokens = new int[fTokenCount &lt;&lt; 1];
                System.arraycopy(oldList, 0, fTokens, 0, fTokenCount);
                fTokens[fTokenCount] = token;
            }
            fTokenCount++;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/XPath.java" startline="961" startcolumn="9" endline="971" endcolumn="9">
public void addToken(int token) {
            try {
                fTokens[fTokenCount] = token;
            } catch (ArrayIndexOutOfBoundsException ex) {
                int[] oldList = fTokens;
                fTokens = new int[fTokenCount &lt;&lt; 1];
                System.arraycopy(oldList, 0, fTokens, 0, fTokenCount);
                fTokens[fTokenCount] = token;
            }
            fTokenCount++;
        }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xpointer/XPointerHandler.java" startline="533" startcolumn="9" endline="543" endcolumn="9">
private void addToken(int token) {
            try {
                fTokens[fTokenCount] = token;
            } catch (ArrayIndexOutOfBoundsException ex) {
                int[] oldList = fTokens;
                fTokens = new int[fTokenCount &lt;&lt; 1];
                System.arraycopy(oldList, 0, fTokens, 0, fTokenCount);
                fTokens[fTokenCount] = token;
            }
            fTokenCount++;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/XPath.java" startline="961" startcolumn="9" endline="971" endcolumn="9">
public void addToken(int token) {
            try {
                fTokens[fTokenCount] = token;
            } catch (ArrayIndexOutOfBoundsException ex) {
                int[] oldList = fTokens;
                fTokens = new int[fTokenCount &lt;&lt; 1];
                System.arraycopy(oldList, 0, fTokens, 0, fTokenCount);
                fTokens[fTokenCount] = token;
            }
            fTokenCount++;
        }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="45" startcolumn="5" endline="58" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }
                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/parsers/SecuritySupport.java" startline="43" startcolumn="5" endline="58" endcolumn="5">
ClassLoader getContextClassLoader() throws SecurityException{
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }

                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();

                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="45" startcolumn="5" endline="58" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }
                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/stream/SecuritySupport.java" startline="43" startcolumn="5" endline="58" endcolumn="5">
ClassLoader getContextClassLoader() throws SecurityException{
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }

                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();

                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="45" startcolumn="5" endline="58" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }
                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/transform/SecuritySupport.java" startline="43" startcolumn="5" endline="56" endcolumn="5">
ClassLoader getContextClassLoader() throws SecurityException{
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }
                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="45" startcolumn="5" endline="58" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }
                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();
                return cl;
            }
        });
    }
</source>
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="41" startcolumn="5" endline="56" endcolumn="5">
ClassLoader getContextClassLoader() throws SecurityException{
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                //try {
                cl = Thread.currentThread().getContextClassLoader();
                //} catch (SecurityException ex) { }

                if (cl == null)
                    cl = ClassLoader.getSystemClassLoader();

                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="76" startcolumn="5" endline="90" endcolumn="5">
ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="81" startcolumn="5" endline="95" endcolumn="5">
static ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {
                }

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="76" startcolumn="5" endline="90" endcolumn="5">
ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="86" startcolumn="5" endline="100" endcolumn="5">
static ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {
                }

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="76" startcolumn="5" endline="90" endcolumn="5">
ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="82" startcolumn="5" endline="96" endcolumn="5">
static ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="76" startcolumn="5" endline="90" endcolumn="5">
ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="81" startcolumn="5" endline="95" endcolumn="5">
static ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {
                }

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="76" startcolumn="5" endline="90" endcolumn="5">
ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="86" startcolumn="5" endline="100" endcolumn="5">
static ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {
                }

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="76" startcolumn="5" endline="90" endcolumn="5">
ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="82" startcolumn="5" endline="96" endcolumn="5">
static ClassLoader getParentClassLoader(final ClassLoader cl) {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader parent = null;
                try {
                    parent = cl.getParent();
                } catch (SecurityException ex) {}

                // eliminate loops in case of the boot
                // ClassLoader returning itself as a parent
                return (parent == cl) ? null : parent;
            }
        });
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="346" startcolumn="3" endline="356" endcolumn="3">
@Override
  public final Node getParentNode()
  {

    if (getNodeType() == Node.ATTRIBUTE_NODE)
      return null;

    int newnode = dtm.getParent(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
  }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="435" startcolumn="3" endline="446" endcolumn="3">
@Override
  public final Node getNextSibling()
  {

    // Attr's Next is defined at DTM level, but not at DOM level.
    if (dtm.getNodeType(node) == Node.ATTRIBUTE_NODE)
      return null;

    int newnode = dtm.getNextSibling(node);

    return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);
  }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/DoubleDV.java" startline="85" startcolumn="9" endline="101" endcolumn="9">
public XDouble(String s) throws NumberFormatException {
            if (isPossibleFP(s)) {
                value = Double.parseDouble(s);
            }
            else if ( s.equals("INF") ) {
                value = Double.POSITIVE_INFINITY;
            }
            else if ( s.equals("-INF") ) {
                value = Double.NEGATIVE_INFINITY;
            }
            else if ( s.equals("NaN" ) ) {
                value = Double.NaN;
            }
            else {
                throw new NumberFormatException(s);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/FloatDV.java" startline="69" startcolumn="9" endline="85" endcolumn="9">
public XFloat(String s) throws NumberFormatException {
            if (DoubleDV.isPossibleFP(s)) {
                value = Float.parseFloat(s);
            }
            else if ( s.equals("INF") ) {
                value = Float.POSITIVE_INFINITY;
            }
            else if ( s.equals("-INF") ) {
                value = Float.NEGATIVE_INFINITY;
            }
            else if ( s.equals("NaN") ) {
                value = Float.NaN;
            }
            else {
                throw new NumberFormatException(s);
            }
        }
</source>
    </clone>
    <clone nlines="22" distance="3">
        <source file="com/sun/org/apache/xpath/internal/operations/Variable.java" startline="328" startcolumn="3" endline="349" endcolumn="3">
public int getAnalysisBits()
  {

    // J2SE does not support Xalan interpretive
    /*
        com.sun.org.apache.xalan.internal.templates.ElemVariable vvar = getElemVariable();
        if(null != vvar)
        {
                XPath xpath = vvar.getSelect();
                if(null != xpath)
                {
                        Expression expr = xpath.getExpression();
                        if(null != expr &amp;&amp; expr instanceof PathComponent)
                        {
                                return ((PathComponent)expr).getAnalysisBits();
                        }
                }
        }
    */

    return WalkerFactory.BIT_FILTER;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="560" startcolumn="3" endline="589" endcolumn="3">
public int hashCode()
  {
    // Commenting this out because in JDK1.1.8 and VJ++
    // we don't match XMLStrings. Defaulting to the super
    // causes us to create a string, but at this point
    // this only seems to get called in key processing.
    // Maybe we can live with it?

/*
    int h = m_hash;

    if (h == 0)
    {
      int off = m_start;
      int len = m_length;
      FastStringBuffer fsb = fsb();

      for (int i = 0; i &lt; len; i++)
      {
        h = 31 * h + fsb.charAt(off);

        off++;
      }

      m_hash = h;
    }
    */

    return super.hashCode(); // h;
  }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="188" startcolumn="9" endline="200" endcolumn="9">
public DTMAxisIterator cloneIterator() {
            try {
                NodeValueIterator clone = (NodeValueIterator)super.clone();
                clone._source = _source.cloneIterator();
                clone.setRestartable(false);
                return clone.reset();
            }
            catch (CloneNotSupportedException e) {
                BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                          e.toString());
                return null;
            }
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/FilterIterator.java" startline="74" startcolumn="5" endline="87" endcolumn="5">
public DTMAxisIterator cloneIterator() {

        try {
            final FilterIterator clone = (FilterIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="188" startcolumn="9" endline="200" endcolumn="9">
public DTMAxisIterator cloneIterator() {
            try {
                NodeValueIterator clone = (NodeValueIterator)super.clone();
                clone._source = _source.cloneIterator();
                clone.setRestartable(false);
                return clone.reset();
            }
            catch (CloneNotSupportedException e) {
                BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                          e.toString());
                return null;
            }
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/ForwardPositionIterator.java" startline="73" startcolumn="5" endline="86" endcolumn="5">
public DTMAxisIterator cloneIterator() {
        try {
            final ForwardPositionIterator clone =
                (ForwardPositionIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="188" startcolumn="9" endline="200" endcolumn="9">
public DTMAxisIterator cloneIterator() {
            try {
                NodeValueIterator clone = (NodeValueIterator)super.clone();
                clone._source = _source.cloneIterator();
                clone.setRestartable(false);
                return clone.reset();
            }
            catch (CloneNotSupportedException e) {
                BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                          e.toString());
                return null;
            }
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MatchingIterator.java" startline="73" startcolumn="5" endline="86" endcolumn="5">
public DTMAxisIterator cloneIterator() {

        try {
            final MatchingIterator clone = (MatchingIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="269" startcolumn="3" endline="284" endcolumn="3">
public Node previousNode() throws DOMException
  {

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_ITERATE, null)); //"This NodeSet can not iterate to a previous node!");

    if ((m_next - 1) &gt; 0)
    {
      m_next--;

      return this.elementAt(m_next);
    }
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSetDTM.java" startline="413" startcolumn="3" endline="428" endcolumn="3">
public int previousNode()
  {

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE, null)); //"This NodeSetDTM can not iterate to a previous node!");

    if ((m_next - 1) &gt; 0)
    {
      m_next--;

      return this.elementAt(m_next);
    }
    else
      return DTM.NULL;
  }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/XSLTC.java" startline="389" startcolumn="5" endline="401" endcolumn="5">
public boolean compile(URL url) {
        try {
            // Open input stream from URL and wrap inside InputSource
            final InputStream stream = url.openStream();
            final InputSource input = new InputSource(stream);
            input.setSystemId(url.toString());
            return compile(input, _className);
        }
        catch (IOException e) {
            _parser.reportError(Constants.FATAL, new ErrorMsg(ErrorMsg.JAXP_COMPILE_ERR, e));
            return false;
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/XSLTC.java" startline="408" startcolumn="5" endline="420" endcolumn="5">
public boolean compile(URL url, String name) {
        try {
            // Open input stream from URL and wrap inside InputSource
            final InputStream stream = url.openStream();
            final InputSource input = new InputSource(stream);
            input.setSystemId(url.toString());
            return compile(input, name);
        }
        catch (IOException e) {
            _parser.reportError(Constants.FATAL, new ErrorMsg(ErrorMsg.JAXP_COMPILE_ERR, e));
            return false;
        }
    }
</source>
    </clone>
    <clone nlines="46" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1899" startcolumn="5" endline="1944" endcolumn="5">
public Text replaceWholeText(String content)
                                 throws DOMException{
/*

        if (needsSyncData()) {
            synchronizeData();
        }

        // make sure we can make the replacement
        if (!canModify(nextSibling)) {
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null));
        }

        Node parent = this.getParentNode();
        if (content == null || content.length() == 0) {
            // remove current node
            if (parent !=null) { // check if node in the tree
                parent.removeChild(this);
                return null;
            }
        }
        Text currentNode = null;
        if (isReadOnly()){
            Text newNode = this.ownerDocument().createTextNode(content);
            if (parent !=null) { // check if node in the tree
                parent.insertBefore(newNode, this);
                parent.removeChild(this);
                currentNode = newNode;
            } else {
                return newNode;
            }
        }  else {
            this.setData(content);
            currentNode = this;
        }
        Node sibling =  currentNode.getNextSibling();
        while ( sibling !=null) {
            parent.removeChild(sibling);
            sibling = currentNode.getNextSibling();
        }

        return currentNode;
*/
        return null; //Pending
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="2250" startcolumn="5" endline="2296" endcolumn="5">
@Override
    public Text replaceWholeText(String content)
                                 throws DOMException{
/*

        if (needsSyncData()) {
            synchronizeData();
        }

        // make sure we can make the replacement
        if (!canModify(nextSibling)) {
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null));
        }

        Node parent = this.getParentNode();
        if (content == null || content.length() == 0) {
            // remove current node
            if (parent !=null) { // check if node in the tree
                parent.removeChild(this);
                return null;
            }
        }
        Text currentNode = null;
        if (isReadOnly()){
            Text newNode = this.ownerDocument().createTextNode(content);
            if (parent !=null) { // check if node in the tree
                parent.insertBefore(newNode, this);
                parent.removeChild(this);
                currentNode = newNode;
            } else {
                return newNode;
            }
        }  else {
            this.setData(content);
            currentNode = this;
        }
        Node sibling =  currentNode.getNextSibling();
        while ( sibling !=null) {
            parent.removeChild(sibling);
            sibling = currentNode.getNextSibling();
        }

        return currentNode;
*/
        return null; //Pending
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="339" startcolumn="5" endline="348" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.shallowCopy(node, handler);
        }
        else {
            return super.shallowCopy(node, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="314" startcolumn="5" endline="323" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.shallowCopy(node, handler);
        }
        else {
            return _dom.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="20" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLStream.java" startline="198" startcolumn="5" endline="217" endcolumn="5">
public void endDocument() throws org.xml.sax.SAXException
    {
        flushPending();
        if (m_doIndent &amp;&amp; !m_isprevtext)
        {
            try
            {
            outputLineSep();
            }
            catch(IOException e)
            {
                throw new SAXException(e);
            }
        }

        flushWriter();

        if (m_tracer != null)
            super.fireEndDoc();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="722" startcolumn="5" endline="741" endcolumn="5">
public final void endDocument() throws org.xml.sax.SAXException
    {

        flushPending();
        if (m_doIndent &amp;&amp; !m_isprevtext)
        {
            try
            {
            outputLineSep();
            }
            catch(IOException e)
            {
                throw new SAXException(e);
            }
        }

        flushWriter();
        if (m_tracer != null)
            super.fireEndDoc();
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="822" startcolumn="5" endline="832" endcolumn="5">
public void endDocument() throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.endDocument();


    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/AttrImpl.java" startline="1213" startcolumn="5" endline="1222" endcolumn="5">
private void writeObject(ObjectOutputStream out) throws IOException {

        // synchronize chilren
        if (needsSyncChildren()) {
            synchronizeChildren();
        }
        // write object
        out.defaultWriteObject();

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="822" startcolumn="5" endline="832" endcolumn="5">
public void endDocument() throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.endDocument();


    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeImpl.java" startline="2013" startcolumn="5" endline="2022" endcolumn="5">
private void writeObject(ObjectOutputStream out) throws IOException {

        // synchronize data
        if (needsSyncData()) {
            synchronizeData();
        }
        // write object
        out.defaultWriteObject();

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="822" startcolumn="5" endline="832" endcolumn="5">
public void endDocument() throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.endDocument();


    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ParentNode.java" startline="999" startcolumn="5" endline="1008" endcolumn="5">
private void writeObject(ObjectOutputStream out) throws IOException {

        // synchronize chilren
        if (needsSyncChildren()) {
            synchronizeChildren();
        }
        // write object
        out.defaultWriteObject();

    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="405" startcolumn="5" endline="422" endcolumn="5">
public void removeAttribute(String name) {

        if (ownerDocument.errorChecking &amp;&amp; isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
        }

        if (needsSyncData()) {
            synchronizeData();
        }

        if (attributes == null) {
            return;
        }

        attributes.safeRemoveNamedItem(name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="718" startcolumn="5" endline="735" endcolumn="5">
public void removeAttributeNS(String namespaceURI, String localName) {

        if (ownerDocument.errorChecking &amp;&amp; isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
        }

        if (needsSyncData()) {
            synchronizeData();
        }

        if (attributes == null) {
            return;
        }

        attributes.safeRemoveNamedItemNS(namespaceURI, localName);

    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="128" startcolumn="3" endline="145" endcolumn="3">
public final void addElement(int value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public int push(int i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="128" startcolumn="3" endline="145" endcolumn="3">
public final void addElement(int value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public Object push(Object i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="128" startcolumn="3" endline="145" endcolumn="3">
public final void addElement(Object value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public int push(int i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="128" startcolumn="3" endline="145" endcolumn="3">
public final void addElement(Object value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public Object push(Object i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="95" startcolumn="3" endline="112" endcolumn="3">
public final void addElement(StringToStringTable value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      StringToStringTable newMap[] = new StringToStringTable[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public int push(int i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="95" startcolumn="3" endline="112" endcolumn="3">
public final void addElement(StringToStringTable value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      StringToStringTable newMap[] = new StringToStringTable[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public Object push(Object i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="96" startcolumn="3" endline="113" endcolumn="3">
public final void addElement(String value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public int push(int i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="96" startcolumn="3" endline="113" endcolumn="3">
public final void addElement(String value)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = value;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public Object push(Object i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="176" startcolumn="3" endline="193" endcolumn="3">
public final void push(String s)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = s;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public int push(int i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="176" startcolumn="3" endline="193" endcolumn="3">
public final void push(String s)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = s;

    m_firstFree++;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="74" startcolumn="3" endline="93" endcolumn="3">
public Object push(Object i)
  {

    if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }

    m_map[m_firstFree] = i;

    m_firstFree++;

    return i;
  }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xml/internal/res/XMLMessages.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public static final String createXMLMessage(String msgKey, Object args[])
  {
    if (XMLBundle == null) {
        XMLBundle = SecuritySupport.getResourceBundle(XML_ERROR_RESOURCES);
    }

    if (XMLBundle != null)
    {
      return createMsg(XMLBundle, msgKey, args);
    }
    else
      return "Could not load any resource bundles.";
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/res/XSLMessages.java" startline="58" startcolumn="5" endline="69" endcolumn="5">
public static String createMessage(String msgKey, Object args[]) //throws Exception
    {
        if (XSLTBundle == null) {
            XSLTBundle = SecuritySupport.getResourceBundle(XSLT_ERROR_RESOURCES);
        }

        if (XSLTBundle != null) {
            return createMsg(XSLTBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xml/internal/res/XMLMessages.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public static final String createXMLMessage(String msgKey, Object args[])
  {
    if (XMLBundle == null) {
        XMLBundle = SecuritySupport.getResourceBundle(XML_ERROR_RESOURCES);
    }

    if (XMLBundle != null)
    {
      return createMsg(XMLBundle, msgKey, args);
    }
    else
      return "Could not load any resource bundles.";
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/res/XSLMessages.java" startline="81" startcolumn="5" endline="92" endcolumn="5">
public static String createWarning(String msgKey, Object args[]) //throws Exception
    {
        if (XSLTBundle == null) {
            XSLTBundle = SecuritySupport.getResourceBundle(XSLT_ERROR_RESOURCES);
        }

        if (XSLTBundle != null) {
            return createMsg(XSLTBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/res/XMLMessages.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public static final String createXMLMessage(String msgKey, Object args[])
  {
    if (XMLBundle == null) {
        XMLBundle = SecuritySupport.getResourceBundle(XML_ERROR_RESOURCES);
    }

    if (XMLBundle != null)
    {
      return createMsg(XMLBundle, msgKey, args);
    }
    else
      return "Could not load any resource bundles.";
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
public static final String createXPATHMessage(String msgKey, Object args[]) //throws Exception
    {
        if (XPATHBundle == null) {
            XPATHBundle = SecuritySupport.getResourceBundle(XPATH_ERROR_RESOURCES);
        }

        if (XPATHBundle != null) {
            return createXPATHMsg(XPATHBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/res/XMLMessages.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public static final String createXMLMessage(String msgKey, Object args[])
  {
    if (XMLBundle == null) {
        XMLBundle = SecuritySupport.getResourceBundle(XML_ERROR_RESOURCES);
    }

    if (XMLBundle != null)
    {
      return createMsg(XMLBundle, msgKey, args);
    }
    else
      return "Could not load any resource bundles.";
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="79" startcolumn="5" endline="90" endcolumn="5">
public static final String createXPATHWarning(String msgKey, Object args[]) //throws Exception
    {
        if (XPATHBundle == null) {
            XPATHBundle = SecuritySupport.getResourceBundle(XPATH_ERROR_RESOURCES);
        }

        if (XPATHBundle != null) {
            return createXPATHMsg(XPATHBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="19" distance="5">
        <source file="com/sun/org/apache/xpath/internal/compiler/XPathParser.java" startline="492" startcolumn="3" endline="510" endcolumn="3">
private final void consumeExpected(String expected)
          throws javax.xml.transform.TransformerException
  {

    if (tokenIs(expected))
    {
      nextToken();
    }
    else
    {
      error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND, new Object[]{ expected,
                                                                     m_token });  //"Expected "+expected+", but found: "+m_token);

          // Patch for Christina's gripe. She wants her errorHandler to return from
          // this error and continue trying to parse, rather than throwing an exception.
          // Without the patch, that put us into an endless loop.
                throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);
        }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/compiler/XPathParser.java" startline="520" startcolumn="3" endline="539" endcolumn="3">
private final void consumeExpected(char expected)
          throws javax.xml.transform.TransformerException
  {

    if (tokenIs(expected))
    {
      nextToken();
    }
    else
    {
      error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,
            new Object[]{ String.valueOf(expected),
                          m_token });  //"Expected "+expected+", but found: "+m_token);

          // Patch for Christina's gripe. She wants her errorHandler to return from
          // this error and continue trying to parse, rather than throwing an exception.
          // Without the patch, that put us into an endless loop.
                throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);
    }
  }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSModelImpl.java" startline="220" startcolumn="5" endline="238" endcolumn="5">
private SymbolHash buildSubGroups() {
        SubstitutionGroupHandler sgHandler = new SubstitutionGroupHandler(null);
        for (int i = 0 ; i &lt; fGrammarCount; i++) {
            sgHandler.addSubstitutionGroup(fGrammarList[i].getSubstitutionGroups());
        }

        final XSObjectListImpl elements = getGlobalElements();
        final int len = elements.getLength();
        final SymbolHash subGroupMap = new SymbolHash(len*2);
        XSElementDecl head;
        XSElementDeclaration[] subGroup;
        for (int i = 0; i &lt; len; i++) {
            head = (XSElementDecl)elements.item(i);
            subGroup = sgHandler.getSubstitutionGroup(head);
            subGroupMap.put(head, subGroup.length &gt; 0 ?
                    new XSObjectListImpl(subGroup, subGroup.length) : XSObjectListImpl.EMPTY_LIST);
        }
        return subGroupMap;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSModelImpl.java" startline="200" startcolumn="5" endline="218" endcolumn="5">
private SymbolHash buildSubGroups_Org() {
        SubstitutionGroupHandler sgHandler = new SubstitutionGroupHandler(null);
        for (int i = 0 ; i &lt; fGrammarCount; i++) {
            sgHandler.addSubstitutionGroup(fGrammarList[i].getSubstitutionGroups());
        }

        final XSNamedMap elements = getComponents(XSConstants.ELEMENT_DECLARATION);
        final int len = elements.getLength();
        final SymbolHash subGroupMap = new SymbolHash(len*2);
        XSElementDecl head;
        XSElementDeclaration[] subGroup;
        for (int i = 0; i &lt; len; i++) {
            head = (XSElementDecl)elements.item(i);
            subGroup = sgHandler.getSubstitutionGroup(head);
            subGroupMap.put(head, subGroup.length &gt; 0 ?
                    new XSObjectListImpl(subGroup, subGroup.length) : XSObjectListImpl.EMPTY_LIST);
        }
        return subGroupMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="1070" startcolumn="5" endline="1083" endcolumn="5">
private void flushMyWriter()
    {
        if (m_writer != null)
        {
            try
            {
                m_writer.flush();
            }
            catch(IOException ioe)
            {

            }
        }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/readers/TextCatalogReader.java" startline="187" startcolumn="3" endline="196" endcolumn="3">
protected void finalize() {
    if (catfile != null) {
      try {
        catfile.close();
      } catch (IOException e) {
        // whatever...
      }
    }
    catfile = null;
  }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="60" startcolumn="5" endline="71" endcolumn="5">
public static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="55" startcolumn="5" endline="66" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
static ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="68" startcolumn="5" endline="79" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="73" startcolumn="5" endline="84" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="69" startcolumn="5" endline="80" endcolumn="5">
static ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="50" startcolumn="5" endline="61" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="43" startcolumn="5" endline="54" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="63" startcolumn="5" endline="74" endcolumn="5">
ClassLoader getSystemClassLoader() {
        return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
    }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="44" startcolumn="5" endline="55" endcolumn="5">
ClassLoader getContextClassLoader() {
        return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/bcel/internal/generic/InstructionHandle.java" startline="130" startcolumn="3" endline="141" endcolumn="3">
static final InstructionHandle getInstructionHandle(Instruction i) {
    if(ih_list == null)
      return new InstructionHandle(i);
    else {
      InstructionHandle ih = ih_list;
      ih_list = ih.next;

      ih.setInstruction(i);

      return ih;
    }
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/BranchHandle.java" startline="84" startcolumn="3" endline="95" endcolumn="3">
static final BranchHandle getBranchHandle(BranchInstruction i) {
    if(bh_list == null)
      return new BranchHandle(i);
    else {
      BranchHandle bh = bh_list;
      bh_list = (BranchHandle)bh.next;

      bh.setInstruction(i);

      return bh;
    }
  }
</source>
    </clone>
    <clone nlines="20" distance="1">
        <source file="com/sun/org/apache/xalan/internal/utils/ObjectFactory.java" startline="136" startcolumn="5" endline="155" endcolumn="5">
static Object newInstance(String className, ClassLoader cl,
                                      boolean doFallback)
        throws ConfigurationError
    {
        // assert(className != null);
        try{
            Class providerClass = findProviderClass(className, cl, doFallback);
            Object instance = providerClass.newInstance();
            if (DEBUG) debugPrintln("created new instance of " + providerClass +
                   " using ClassLoader: " + cl);
            return instance;
        } catch (ClassNotFoundException x) {
            throw new ConfigurationError(
                "Provider " + className + " not found", x);
        } catch (Exception x) {
            throw new ConfigurationError(
                "Provider " + className + " could not be instantiated: " + x,
                x);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/ObjectFactory.java" startline="151" startcolumn="5" endline="170" endcolumn="5">
public static Object newInstance(String className, ClassLoader cl,
                                      boolean doFallback)
        throws ConfigurationError
    {
        // assert(className != null);
        try{
            Class providerClass = findProviderClass(className, cl, doFallback);
            Object instance = providerClass.newInstance();
            if (DEBUG) debugPrintln("created new instance of " + providerClass +
                   " using ClassLoader: " + cl);
            return instance;
        } catch (ClassNotFoundException x) {
            throw new ConfigurationError(
                "Provider " + className + " not found", x);
        } catch (Exception x) {
            throw new ConfigurationError(
                "Provider " + className + " could not be instantiated: " + x,
                x);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1242" startcolumn="5" endline="1255" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1184" startcolumn="5" endline="1198" endcolumn="5">
@Override
    public void error(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1242" startcolumn="5" endline="1255" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1213" startcolumn="5" endline="1227" endcolumn="5">
@Override
    public void fatalError(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1242" startcolumn="5" endline="1255" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1348" startcolumn="5" endline="1362" endcolumn="5">
@Override
    public void error(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1242" startcolumn="5" endline="1255" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1377" startcolumn="5" endline="1391" endcolumn="5">
@Override
    public void fatalError(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1406" startcolumn="5" endline="1419" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1184" startcolumn="5" endline="1198" endcolumn="5">
@Override
    public void error(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1406" startcolumn="5" endline="1419" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="1213" startcolumn="5" endline="1227" endcolumn="5">
@Override
    public void fatalError(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1406" startcolumn="5" endline="1419" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1348" startcolumn="5" endline="1362" endcolumn="5">
@Override
    public void error(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.ERROR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1406" startcolumn="5" endline="1419" endcolumn="5">
@Override
    public void warning(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.WARNING_MSG,
                                            e.getMessageAndLocation()));
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerImpl.java" startline="1377" startcolumn="5" endline="1391" endcolumn="5">
@Override
    public void fatalError(TransformerException e)
        throws TransformerException
    {
        Throwable wrapped = e.getException();
        if (wrapped != null) {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_PLUS_WRAPPED_MSG,
                                            e.getMessageAndLocation(),
                                            wrapped.getMessage()));
        } else {
            System.err.println(new ErrorMsg(ErrorMsg.FATAL_ERR_MSG,
                                            e.getMessageAndLocation()));
        }
        throw e;
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="748" startcolumn="5" endline="758" endcolumn="5">
void applyFacets1(XSFacets facets, short presentFacet, short fixedFacet) {

        try {
            applyFacets(facets, presentFacet, fixedFacet, SPECIAL_PATTERN_NONE, fDummyContext);
        } catch (InvalidDatatypeFacetException e) {
            // should never gets here, internel error
            throw new RuntimeException("internal error");
        }
        // we've now applied facets; so lock this object:
        fIsImmutable = true;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="763" startcolumn="5" endline="773" endcolumn="5">
void applyFacets1(XSFacets facets, short presentFacet, short fixedFacet, short patternType) {

        try {
            applyFacets(facets, presentFacet, fixedFacet, patternType, fDummyContext);
        } catch (InvalidDatatypeFacetException e) {
            // should never gets here, internel error
            throw new RuntimeException("internal error");
        }
        // we've now applied facets; so lock this object:
        fIsImmutable = true;
    }
</source>
    </clone>
    <clone nlines="20" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="219" startcolumn="5" endline="238" endcolumn="5">
public XMLErrorReporter() {

        // REVISIT: [Q] Should the locator be passed to the reportError
        //              method? Otherwise, there is no way for a parser
        //              component to store information about where an
        //              error occurred so as to report it later.
        //
        //              An example would be to record the location of
        //              IDREFs so that, at the end of the document, if
        //              there is no associated ID declared, the error
        //              could report the location information of the
        //              reference. -Ac
        //
        // NOTE: I added another reportError method that allows the
        //       caller to specify the location of the error being
        //       reported. -Ac

        fMessageFormatters = new Hashtable();

    }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="560" startcolumn="3" endline="589" endcolumn="3">
public int hashCode()
  {
    // Commenting this out because in JDK1.1.8 and VJ++
    // we don't match XMLStrings. Defaulting to the super
    // causes us to create a string, but at this point
    // this only seems to get called in key processing.
    // Maybe we can live with it?

/*
    int h = m_hash;

    if (h == 0)
    {
      int off = m_start;
      int len = m_length;
      FastStringBuffer fsb = fsb();

      for (int i = 0; i &lt; len; i++)
      {
        h = 31 * h + fsb.charAt(off);

        off++;
      }

      m_hash = h;
    }
    */

    return super.hashCode(); // h;
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeIterator.java" startline="178" startcolumn="3" endline="187" endcolumn="5">
public Node previousNode()
    {
      if(!valid)
        throw new DTMDOMException(DOMException.INVALID_STATE_ERR);

      int handle=dtm_iter.previousNode();
      if (handle==DTM.NULL)
        return null;
      return dtm_iter.getDTM(handle).getNode(handle);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeIterator.java" startline="160" startcolumn="3" endline="169" endcolumn="5">
public Node nextNode() throws DOMException
    {
      if(!valid)
        throw new DTMDOMException(DOMException.INVALID_STATE_ERR);

      int handle=dtm_iter.nextNode();
      if (handle==DTM.NULL)
        return null;
      return dtm_iter.getDTM(handle).getNode(handle);
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="185" startcolumn="9" endline="198" endcolumn="9">
public double getNumberValue() throws XPathException {
                if (getResultType() != NUMBER_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER, new Object[] {m_xpath.getPatternString(), getTypeString(m_resultType)});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a number"
                } else {
                        try {
                           return m_resultObj.num();
                        } catch (Exception e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
        }
</source>
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="208" startcolumn="9" endline="221" endcolumn="9">
public String getStringValue() throws XPathException {
                if (getResultType() != STRING_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_STRING, new Object[] {m_xpath.getPatternString(), m_resultObj.getTypeString()});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a string."
                } else {
                        try {
                           return m_resultObj.str();
                        } catch (Exception e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
        }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="226" startcolumn="9" endline="239" endcolumn="9">
public boolean getBooleanValue() throws XPathException {
                if (getResultType() != BOOLEAN_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_BOOLEAN, new Object[] {m_xpath.getPatternString(), getTypeString(m_resultType)});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a boolean."
                } else {
                        try {
                           return m_resultObj.bool();
                        } catch (TransformerException e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
        }
</source>
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="208" startcolumn="9" endline="221" endcolumn="9">
public String getStringValue() throws XPathException {
                if (getResultType() != STRING_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_STRING, new Object[] {m_xpath.getPatternString(), m_resultObj.getTypeString()});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a string."
                } else {
                        try {
                           return m_resultObj.str();
                        } catch (Exception e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="616" startcolumn="3" endline="631" endcolumn="3">
public int indexOf(int elem)
  {

    if (null == m_map)
      return -1;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      int node = m_map[i];

      if (node == elem)
        return i;
    }

    return -1;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="589" startcolumn="3" endline="604" endcolumn="3">
public int indexOf(int elem, int index)
  {

    if (null == m_map)
      return -1;

    for (int i = index; i &lt; m_firstFree; i++)
    {
      int node = m_map[i];

      if (node == elem)
        return i;
    }

    return -1;
  }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/regexp/internal/ReaderCharacterIterator.java" startline="79" startcolumn="5" endline="90" endcolumn="5">
public char charAt(int pos)
    {
        try
        {
            ensure(pos);
            return buff.charAt(pos);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
        <source file="com/sun/org/apache/regexp/internal/ReaderCharacterIterator.java" startline="65" startcolumn="5" endline="76" endcolumn="5">
public String substring(int beginIndex)
    {
        try
        {
            readAll();
            return buff.toString().substring(beginIndex);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/regexp/internal/ReaderCharacterIterator.java" startline="79" startcolumn="5" endline="90" endcolumn="5">
public char charAt(int pos)
    {
        try
        {
            ensure(pos);
            return buff.charAt(pos);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
        <source file="com/sun/org/apache/regexp/internal/StreamCharacterIterator.java" startline="65" startcolumn="5" endline="76" endcolumn="5">
public String substring(int beginIndex)
    {
        try
        {
            readAll();
            return buff.toString().substring(beginIndex);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/regexp/internal/StreamCharacterIterator.java" startline="80" startcolumn="5" endline="91" endcolumn="5">
public char charAt(int pos)
    {
        try
        {
            ensure(pos);
            return buff.charAt(pos);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
        <source file="com/sun/org/apache/regexp/internal/ReaderCharacterIterator.java" startline="65" startcolumn="5" endline="76" endcolumn="5">
public String substring(int beginIndex)
    {
        try
        {
            readAll();
            return buff.toString().substring(beginIndex);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/regexp/internal/StreamCharacterIterator.java" startline="80" startcolumn="5" endline="91" endcolumn="5">
public char charAt(int pos)
    {
        try
        {
            ensure(pos);
            return buff.charAt(pos);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
        <source file="com/sun/org/apache/regexp/internal/StreamCharacterIterator.java" startline="65" startcolumn="5" endline="76" endcolumn="5">
public String substring(int beginIndex)
    {
        try
        {
            readAll();
            return buff.toString().substring(beginIndex);
        }
        catch (IOException e)
        {
            throw new StringIndexOutOfBoundsException(e.getMessage());
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xpath/internal/objects/XNodeSet.java" startline="703" startcolumn="3" endline="713" endcolumn="3">
public boolean equals(XObject obj2)
  {
    try
    {
      return compare(obj2, S_EQ);
    }
    catch(javax.xml.transform.TransformerException te)
    {
      throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(te);
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XBooleanStatic.java" startline="60" startcolumn="3" endline="70" endcolumn="3">
public boolean equals(XObject obj2)
  {
    try
    {
      return m_val == obj2.bool();
    }
    catch(javax.xml.transform.TransformerException te)
    {
      throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(te);
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/XslAttribute.java" startline="180" startcolumn="5" endline="189" endcolumn="5">
public Type typeCheck(SymbolTable stable) throws TypeCheckError {
        if (!_ignore) {
            _name.typeCheck(stable);
            if (_namespace != null) {
                _namespace.typeCheck(stable);
            }
            typeCheckContents(stable);
        }
        return Type.Void;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/XslElement.java" startline="164" startcolumn="5" endline="173" endcolumn="5">
public Type typeCheck(SymbolTable stable) throws TypeCheckError {
        if (!_ignore) {
            _name.typeCheck(stable);
            if (_namespace != null) {
                _namespace.typeCheck(stable);
            }
        }
        typeCheckContents(stable);
        return Type.Void;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/generic/INVOKESTATIC.java" startline="81" startcolumn="3" endline="91" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.UNSATISFIED_LINK_ERROR;
    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length+1] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;

    return cs;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/GETFIELD.java" startline="86" startcolumn="3" endline="98" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length+1] =
      ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;
    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] =
      ExceptionConstants.NULL_POINTER_EXCEPTION;

    return cs;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/generic/INVOKESTATIC.java" startline="81" startcolumn="3" endline="91" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.UNSATISFIED_LINK_ERROR;
    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length+1] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;

    return cs;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/MULTIANEWARRAY.java" startline="137" startcolumn="3" endline="147" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length+1] = ExceptionConstants.NEGATIVE_ARRAY_SIZE_EXCEPTION;
    cs[ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length]   = ExceptionConstants.ILLEGAL_ACCESS_ERROR;

    return cs;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/generic/INVOKESTATIC.java" startline="81" startcolumn="3" endline="91" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.UNSATISFIED_LINK_ERROR;
    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length+1] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;

    return cs;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/NEW.java" startline="81" startcolumn="3" endline="91" endcolumn="3">
public Class[] getExceptions(){
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length+1] = ExceptionConstants.INSTANTIATION_ERROR;
    cs[ExceptionConstants.EXCS_CLASS_AND_INTERFACE_RESOLUTION.length]   = ExceptionConstants.ILLEGAL_ACCESS_ERROR;

    return cs;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/generic/INVOKESTATIC.java" startline="81" startcolumn="3" endline="91" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.UNSATISFIED_LINK_ERROR;
    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length+1] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;

    return cs;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/PUTFIELD.java" startline="87" startcolumn="3" endline="99" endcolumn="3">
public Class[] getExceptions() {
    Class[] cs = new Class[2 + ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length];

    System.arraycopy(ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION, 0,
                     cs, 0, ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length);

    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length+1] =
      ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;
    cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] =
      ExceptionConstants.NULL_POINTER_EXCEPTION;

    return cs;
  }
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SAX2StAXStreamWriter.java" startline="82" startcolumn="9" endline="96" endcolumn="9">
public void endDocument() throws SAXException {

                try {

                        writer.writeEndDocument();

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

                super.endDocument();

        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SAX2StAXStreamWriter.java" startline="254" startcolumn="9" endline="268" endcolumn="9">
public void endCDATA() throws SAXException {

                try {

                        writer.writeCData(CDATABuffer.toString());

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

                super.endCDATA();

        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="805" startcolumn="5" endline="817" endcolumn="5">
public void skippedEntity ( String name )
        throws SAXException
    {
        try {
        endCDATA();
        content();
        _printer.printText( '&amp;' );
        _printer.printText( name );
        _printer.printText( ';' );
        } catch ( IOException except ) {
            throw new SAXException( except );
    }
    }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="947" startcolumn="5" endline="959" endcolumn="5">
public void writeEntityRef(String refName) throws XMLStreamException {
        try {
            if (fStartTagOpened) {
                closeStartTag();
            }

            fWriter.write('&amp;');
            fWriter.write(refName);
            fWriter.write(';');
        } catch (IOException e) {
            throw new XMLStreamException(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="340" startcolumn="5" endline="349" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="352" startcolumn="5" endline="364" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);

        m_saxHandler.characters(m_charsBuff, 0, length);

    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="463" startcolumn="5" endline="472" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="352" startcolumn="5" endline="364" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);

        m_saxHandler.characters(m_charsBuff, 0, length);

    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="340" startcolumn="5" endline="349" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="475" startcolumn="5" endline="484" endcolumn="5">
public void characters(final String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="463" startcolumn="5" endline="472" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="475" startcolumn="5" endline="484" endcolumn="5">
public void characters(final String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingParser.java" startline="167" startcolumn="3" endline="177" endcolumn="3">
public void parse(InputSource input)
    throws IOException,
           SAXException {
    setupParse(input.getSystemId());
    try {
      parser.parse(input);
    } catch (InternalError ie) {
      explain(input.getSystemId());
      throw ie;
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingXMLFilter.java" startline="138" startcolumn="3" endline="150" endcolumn="3">
public void parse(InputSource input)
    throws IOException, SAXException {
    allowXMLCatalogPI = true;

    setupBaseURI(input.getSystemId());

    try {
      super.parse(input);
    } catch (InternalError ie) {
      explain(input.getSystemId());
      throw ie;
    }
  }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="947" startcolumn="3" endline="957" endcolumn="3">
public final Node pop()
  {

    m_firstFree--;

    Node n = m_map[m_firstFree];

    m_map[m_firstFree] = null;

    return n;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="186" startcolumn="3" endline="196" endcolumn="3">
public final int pop()
  {

    m_firstFree--;

    int n = m_map[m_firstFree];

    m_map[m_firstFree] = DTM.NULL;

    return n;
  }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="412" startcolumn="3" endline="421" endcolumn="3">
public final void setToSize(int size) {

    Object newMap[] = new Object[size];

    System.arraycopy(m_map, 0, newMap, 0, m_firstFree);
    m_mapSize = size;

    m_map = newMap;

  }
</source>
        <source file="com/sun/org/apache/xpath/internal/compiler/OpMapVector.java" startline="107" startcolumn="3" endline="116" endcolumn="3">
public final void setToSize(int size) {

    int newMap[] = new int[size];

    System.arraycopy(m_map, 0, newMap, 0, m_map[m_lengthPos]);

    m_mapSize = size;
    m_map = newMap;

  }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/DTDDVFactory.java" startline="60" startcolumn="5" endline="69" endcolumn="5">
public static final DTDDVFactory getInstance(String factoryClass) throws DVFactoryException {
        try {
            // if the class name is not specified, use the default one
            return (DTDDVFactory)
                (ObjectFactory.newInstance(factoryClass, true));
        }
        catch (ClassCastException e) {
            throw new DVFactoryException("DTD factory class " + factoryClass + " does not extend from DTDDVFactory.");
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/SchemaDVFactory.java" startline="69" startcolumn="5" endline="78" endcolumn="5">
public static synchronized final SchemaDVFactory getInstance(String factoryClass) throws DVFactoryException {

        try {
            // if the class name is not specified, use the default one
            return (SchemaDVFactory)(ObjectFactory.newInstance(factoryClass, true));
        } catch (ClassCastException e4) {
            throw new DVFactoryException("Schema factory class " + factoryClass + " does not extend from SchemaDVFactory.");
        }

    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xalan/internal/res/XSLMessages.java" startline="58" startcolumn="5" endline="69" endcolumn="5">
public static String createMessage(String msgKey, Object args[]) //throws Exception
    {
        if (XSLTBundle == null) {
            XSLTBundle = SecuritySupport.getResourceBundle(XSLT_ERROR_RESOURCES);
        }

        if (XSLTBundle != null) {
            return createMsg(XSLTBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
public static final String createXPATHMessage(String msgKey, Object args[]) //throws Exception
    {
        if (XPATHBundle == null) {
            XPATHBundle = SecuritySupport.getResourceBundle(XPATH_ERROR_RESOURCES);
        }

        if (XPATHBundle != null) {
            return createXPATHMsg(XPATHBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xalan/internal/res/XSLMessages.java" startline="58" startcolumn="5" endline="69" endcolumn="5">
public static String createMessage(String msgKey, Object args[]) //throws Exception
    {
        if (XSLTBundle == null) {
            XSLTBundle = SecuritySupport.getResourceBundle(XSLT_ERROR_RESOURCES);
        }

        if (XSLTBundle != null) {
            return createMsg(XSLTBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="79" startcolumn="5" endline="90" endcolumn="5">
public static final String createXPATHWarning(String msgKey, Object args[]) //throws Exception
    {
        if (XPATHBundle == null) {
            XPATHBundle = SecuritySupport.getResourceBundle(XPATH_ERROR_RESOURCES);
        }

        if (XPATHBundle != null) {
            return createXPATHMsg(XPATHBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xalan/internal/res/XSLMessages.java" startline="81" startcolumn="5" endline="92" endcolumn="5">
public static String createWarning(String msgKey, Object args[]) //throws Exception
    {
        if (XSLTBundle == null) {
            XSLTBundle = SecuritySupport.getResourceBundle(XSLT_ERROR_RESOURCES);
        }

        if (XSLTBundle != null) {
            return createMsg(XSLTBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="56" startcolumn="5" endline="67" endcolumn="5">
public static final String createXPATHMessage(String msgKey, Object args[]) //throws Exception
    {
        if (XPATHBundle == null) {
            XPATHBundle = SecuritySupport.getResourceBundle(XPATH_ERROR_RESOURCES);
        }

        if (XPATHBundle != null) {
            return createXPATHMsg(XPATHBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xalan/internal/res/XSLMessages.java" startline="81" startcolumn="5" endline="92" endcolumn="5">
public static String createWarning(String msgKey, Object args[]) //throws Exception
    {
        if (XSLTBundle == null) {
            XSLTBundle = SecuritySupport.getResourceBundle(XSLT_ERROR_RESOURCES);
        }

        if (XSLTBundle != null) {
            return createMsg(XSLTBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="79" startcolumn="5" endline="90" endcolumn="5">
public static final String createXPATHWarning(String msgKey, Object args[]) //throws Exception
    {
        if (XPATHBundle == null) {
            XPATHBundle = SecuritySupport.getResourceBundle(XPATH_ERROR_RESOURCES);
        }

        if (XPATHBundle != null) {
            return createXPATHMsg(XPATHBundle, msgKey, args);
        } else {
            return "Could not load any resource bundles.";
        }
    }
</source>
    </clone>
    <clone nlines="48" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="844" startcolumn="5" endline="891" endcolumn="5">
protected void configureXML11Pipeline() {
        if (fCurrentDVFactory != fXML11DatatypeFactory) {
            fCurrentDVFactory = fXML11DatatypeFactory;
            setProperty(DATATYPE_VALIDATOR_FACTORY, fCurrentDVFactory);
        }

        // setup DTD pipeline
        if (fCurrentDTDScanner != fXML11DTDScanner) {
            fCurrentDTDScanner = fXML11DTDScanner;
            setProperty(DTD_SCANNER, fCurrentDTDScanner);
        }
        fXML11DTDScanner.setDTDHandler(fDTDHandler);
        fXML11DTDScanner.setDTDContentModelHandler(fDTDContentModelHandler);

        // setup XML 1.1 document pipeline
        if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {
            if (fCurrentScanner != fXML11NSDocScanner) {
                fCurrentScanner = fXML11NSDocScanner;
                setProperty(DOCUMENT_SCANNER, fXML11NSDocScanner);
            }

            fXML11NSDocScanner.setDTDValidator(null);
            fXML11NSDocScanner.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fXML11NSDocScanner);
            }
            fLastComponent = fXML11NSDocScanner;

        } else {
                        // create components
                          if (fXML11DocScanner == null) {
                                        // non namespace document pipeline
                                        fXML11DocScanner = new XML11DocumentScannerImpl();
                                        addXML11Component(fXML11DocScanner);
                          }
            if (fCurrentScanner != fXML11DocScanner) {
                fCurrentScanner = fXML11DocScanner;
                setProperty(DOCUMENT_SCANNER, fXML11DocScanner);
            }
            fXML11DocScanner.setDocumentHandler(fDocumentHandler);

            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fXML11DocScanner);
            }
            fLastComponent = fXML11DocScanner;
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="894" startcolumn="5" endline="942" endcolumn="5">
protected void configurePipeline() {
        if (fCurrentDVFactory != fDatatypeValidatorFactory) {
            fCurrentDVFactory = fDatatypeValidatorFactory;
            // use XML 1.0 datatype library
            setProperty(DATATYPE_VALIDATOR_FACTORY, fCurrentDVFactory);
        }

        // setup DTD pipeline
        if (fCurrentDTDScanner != fDTDScanner) {
            fCurrentDTDScanner = fDTDScanner;
            setProperty(DTD_SCANNER, fCurrentDTDScanner);
        }
        fDTDScanner.setDTDHandler(fDTDHandler);
        fDTDScanner.setDTDContentModelHandler(fDTDContentModelHandler);

        // setup document pipeline
        if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {
            if (fCurrentScanner != fNamespaceScanner) {
                fCurrentScanner = fNamespaceScanner;
                setProperty(DOCUMENT_SCANNER, fNamespaceScanner);
            }
            fNamespaceScanner.setDTDValidator(null);
            fNamespaceScanner.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fNamespaceScanner);
            }
            fLastComponent = fNamespaceScanner;
        } else {
            // create components
            if (fNonNSScanner == null) {
                fNonNSScanner = new XMLDocumentScannerImpl();
                // add components
                addComponent((XMLComponent) fNonNSScanner);

            }
            if (fCurrentScanner != fNonNSScanner) {
                fCurrentScanner = fNonNSScanner;
                setProperty(DOCUMENT_SCANNER, fNonNSScanner);

            }

            fNonNSScanner.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fNonNSScanner);
            }
            fLastComponent = fNonNSScanner;
        }

    }
</source>
    </clone>
    <clone nlines="28" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1598" startcolumn="5" endline="1625" endcolumn="5">
protected void surrogates(int high, int low) throws IOException{
        if (XMLChar.isHighSurrogate(high)) {
            if (!XMLChar.isLowSurrogate(low)) {
                //Invalid XML
                fatalError("The character '"+(char)low+"' is an invalid XML character");
            }
            else {
                int supplemental = XMLChar.supplemental((char)high, (char)low);
                if (!XMLChar.isValid(supplemental)) {
                    //Invalid XML
                    fatalError("The character '"+(char)supplemental+"' is an invalid XML character");
                }
                else {
                    if (content().inCData ) {
                        _printer.printText("]]&gt;&amp;#x");
                        _printer.printText(Integer.toHexString(supplemental));
                        _printer.printText(";&lt;![CDATA[");
                    }
                    else {
                        printHex(supplemental);
                    }
                }
            }
        } else {
            fatalError("The character '"+(char)high+"' is an invalid XML character");
        }

    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/XML11Serializer.java" startline="394" startcolumn="5" endline="421" endcolumn="5">
protected final void surrogates(int high, int low) throws IOException{
        if (XMLChar.isHighSurrogate(high)) {
            if (!XMLChar.isLowSurrogate(low)) {
                //Invalid XML
                fatalError("The character '"+(char)low+"' is an invalid XML character");
            }
            else {
                int supplemental = XMLChar.supplemental((char)high, (char)low);
                if (!XML11Char.isXML11Valid(supplemental)) {
                    //Invalid XML
                    fatalError("The character '"+(char)supplemental+"' is an invalid XML character");
                }
                else {
                    if (content().inCData ) {
                        _printer.printText("]]&gt;&amp;#x");
                        _printer.printText(Integer.toHexString(supplemental));
                        _printer.printText(";&lt;![CDATA[");
                    }
                    else {
                                                printHex(supplemental);
                    }
                }
            }
        } else {
            fatalError("The character '"+(char)high+"' is an invalid XML character");
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/io/UTF8Reader.java" startline="682" startcolumn="5" endline="691" endcolumn="5">
private void expectedByte(int position, int count)
        throws MalformedByteSequenceException {

        throw new MalformedByteSequenceException(fFormatter,
            fLocale,
            XMLMessageFormatter.XML_DOMAIN,
            "ExpectedByte",
            new Object[] {Integer.toString(position), Integer.toString(count)});

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/io/UTF8Reader.java" startline="694" startcolumn="5" endline="703" endcolumn="5">
private void invalidByte(int position, int count, int c)
        throws MalformedByteSequenceException {

        throw new MalformedByteSequenceException(fFormatter,
            fLocale,
            XMLMessageFormatter.XML_DOMAIN,
            "InvalidByte",
            new Object [] {Integer.toString(position), Integer.toString(count)});

    }
</source>
    </clone>
    <clone nlines="17" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11NSDocumentScannerImpl.java" startline="910" startcolumn="9" endline="926" endcolumn="9">
private void reconfigurePipeline() {
            if (fDTDValidator == null) {
                fBindNamespaces = true;
            }
            else if (!fDTDValidator.hasGrammar()) {
                fBindNamespaces = true;
                fPerformValidation = fDTDValidator.validate();
                // re-configure pipeline
                XMLDocumentSource source = fDTDValidator.getDocumentSource();
                XMLDocumentHandler handler = fDTDValidator.getDocumentHandler();
                source.setDocumentHandler(handler);
                if (handler != null)
                    handler.setDocumentSource(source);
                fDTDValidator.setDocumentSource(null);
                fDTDValidator.setDocumentHandler(null);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNSDocumentScannerImpl.java" startline="620" startcolumn="9" endline="637" endcolumn="9">
private void reconfigurePipeline() {
            //fDTDValidator will be null in Stax mode
            if (fNamespaces &amp;&amp; fDTDValidator == null) {
                fBindNamespaces = true;
            }
            else if (fNamespaces &amp;&amp; !fDTDValidator.hasGrammar() ) {
                fBindNamespaces = true;
                fPerformValidation = fDTDValidator.validate();
                // re-configure pipeline by removing DTDValidator
                XMLDocumentSource source = fDTDValidator.getDocumentSource();
                XMLDocumentHandler handler = fDTDValidator.getDocumentHandler();
                source.setDocumentHandler(handler);
                if (handler != null)
                    handler.setDocumentSource(source);
                fDTDValidator.setDocumentSource(null);
                fDTDValidator.setDocumentHandler(null);
            }
        }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="213" startcolumn="9" endline="226" endcolumn="9">
public int next() {

            int node;
            while ((node = _source.next()) != END) {
                String val = getStringValueX(node);
                if (_value.equals(val) == _op) {
                    if (_returnType == RETURN_CURRENT)
                        return returnNode(node);
                    else
                        return returnNode(getParent(node));
                }
            }
            return END;
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl.java" startline="412" startcolumn="9" endline="427" endcolumn="9">
public int next()
        {
            int node;
            while ((node = _source.next()) != END) {
                String val = getStringValueX(node);
                if (_value.equals(val) == _op) {
                    if (_returnType == RETURN_CURRENT) {
                        return returnNode(node);
                    }
                    else {
                        return returnNode(getParent(node));
                    }
                }
            }
            return END;
        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/NthIterator.java" startline="50" startcolumn="5" endline="62" endcolumn="5">
public DTMAxisIterator cloneIterator() {
        try {
            final NthIterator clone = (NthIterator) super.clone();
            clone._source = _source.cloneIterator();    // resets source
            clone._isRestartable = false;
            return clone;
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/FilterIterator.java" startline="74" startcolumn="5" endline="87" endcolumn="5">
public DTMAxisIterator cloneIterator() {

        try {
            final FilterIterator clone = (FilterIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/NthIterator.java" startline="50" startcolumn="5" endline="62" endcolumn="5">
public DTMAxisIterator cloneIterator() {
        try {
            final NthIterator clone = (NthIterator) super.clone();
            clone._source = _source.cloneIterator();    // resets source
            clone._isRestartable = false;
            return clone;
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/ForwardPositionIterator.java" startline="73" startcolumn="5" endline="86" endcolumn="5">
public DTMAxisIterator cloneIterator() {
        try {
            final ForwardPositionIterator clone =
                (ForwardPositionIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/NthIterator.java" startline="50" startcolumn="5" endline="62" endcolumn="5">
public DTMAxisIterator cloneIterator() {
        try {
            final NthIterator clone = (NthIterator) super.clone();
            clone._source = _source.cloneIterator();    // resets source
            clone._isRestartable = false;
            return clone;
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MatchingIterator.java" startline="73" startcolumn="5" endline="86" endcolumn="5">
public DTMAxisIterator cloneIterator() {

        try {
            final MatchingIterator clone = (MatchingIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="265" startcolumn="5" endline="279" endcolumn="5">
public Transformer newTransformer()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="287" startcolumn="5" endline="301" endcolumn="5">
public Transformer newTransformer(Source source) throws
        TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer(source);
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="265" startcolumn="5" endline="279" endcolumn="5">
public Transformer newTransformer()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="309" startcolumn="5" endline="323" endcolumn="5">
public Templates newTemplates(Source source)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xsltcFactory;
        return _currFactory.newTemplates(source);
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="330" startcolumn="5" endline="343" endcolumn="5">
public TemplatesHandler newTemplatesHandler()
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTemplatesHandler();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="370" startcolumn="5" endline="383" endcolumn="5">
public TransformerHandler newTransformerHandler(Source src)
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler(src);
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="330" startcolumn="5" endline="343" endcolumn="5">
public TemplatesHandler newTemplatesHandler()
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTemplatesHandler();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="391" startcolumn="5" endline="404" endcolumn="5">
public TransformerHandler newTransformerHandler(Templates templates)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTransformerHandler(templates);
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="350" startcolumn="5" endline="363" endcolumn="5">
public TransformerHandler newTransformerHandler()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="370" startcolumn="5" endline="383" endcolumn="5">
public TransformerHandler newTransformerHandler(Source src)
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler(src);
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="350" startcolumn="5" endline="363" endcolumn="5">
public TransformerHandler newTransformerHandler()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="391" startcolumn="5" endline="404" endcolumn="5">
public TransformerHandler newTransformerHandler(Templates templates)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTransformerHandler(templates);
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="330" startcolumn="5" endline="343" endcolumn="5">
public TemplatesHandler newTemplatesHandler()
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTemplatesHandler();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="265" startcolumn="5" endline="279" endcolumn="5">
public Transformer newTransformer()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer();
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="350" startcolumn="5" endline="363" endcolumn="5">
public TransformerHandler newTransformerHandler()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler();
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="265" startcolumn="5" endline="279" endcolumn="5">
public Transformer newTransformer()
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer();
    }
</source>
    </clone>
    <clone nlines="17" distance="3">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1297" startcolumn="3" endline="1313" endcolumn="3">
public boolean contains(Node s)
  {
    runTo(-1);

    if (null == m_map)
      return false;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      Node node = m_map[i];

      if ((null != node) &amp;&amp; node.equals(s))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1354" startcolumn="3" endline="1370" endcolumn="3">
public int indexOf(Node elem)
  {
    runTo(-1);

    if (null == m_map)
      return -1;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      Node node = m_map[i];

      if ((null != node) &amp;&amp; node.equals(elem))
        return i;
    }

    return -1;
  }
</source>
    </clone>
    <clone nlines="17" distance="4">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1354" startcolumn="3" endline="1370" endcolumn="3">
public int indexOf(Node elem)
  {
    runTo(-1);

    if (null == m_map)
      return -1;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      Node node = m_map[i];

      if ((null != node) &amp;&amp; node.equals(elem))
        return i;
    }

    return -1;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1326" startcolumn="3" endline="1342" endcolumn="3">
public int indexOf(Node elem, int index)
  {
    runTo(-1);

    if (null == m_map)
      return -1;

    for (int i = index; i &lt; m_firstFree; i++)
    {
      Node node = m_map[i];

      if ((null != node) &amp;&amp; node.equals(elem))
        return i;
    }

    return -1;
  }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/SoftReferenceGrammarPool.java" startline="187" startcolumn="5" endline="204" endcolumn="5">
public Grammar getGrammar(XMLGrammarDescription desc) {
        synchronized (fGrammars) {
            clean();
            int hash = hashCode(desc);
            int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
            for (Entry entry = fGrammars[index]; entry != null; entry = entry.next) {
                Grammar tempGrammar = (Grammar) entry.grammar.get();
                /** If the soft reference has been cleared, remove this entry from the pool. */
                if (tempGrammar == null) {
                    removeEntry(entry);
                }
                else if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                    return tempGrammar;
                }
            }
            return null;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/SoftReferenceGrammarPool.java" startline="237" startcolumn="5" endline="254" endcolumn="5">
public boolean containsGrammar(XMLGrammarDescription desc) {
        synchronized (fGrammars) {
            clean();
            int hash = hashCode(desc);
            int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
            for (Entry entry = fGrammars[index]; entry != null ; entry = entry.next) {
                Grammar tempGrammar = (Grammar) entry.grammar.get();
                /** If the soft reference has been cleared, remove this entry from the pool. */
                if (tempGrammar == null) {
                    removeEntry(entry);
                }
                else if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                    return true;
                }
            }
            return false;
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/XMLGrammarPoolImpl.java" startline="249" startcolumn="5" endline="260" endcolumn="5">
public boolean containsGrammar(XMLGrammarDescription desc) {
        synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index] ; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                return true;
            }
        }
        return false;
    }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XMLGrammarPoolImpl.java" startline="197" startcolumn="5" endline="208" endcolumn="5">
public Grammar getGrammar(XMLGrammarDescription desc) {
        synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index] ; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                return entry.grammar;
            }
        }
        return null;
    }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="559" startcolumn="5" endline="572" endcolumn="5">
public Attr createAttribute(String name)
        throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(name,xml11Version)) {
            String msg =
                DOMMessageFormatter.formatMessage(
                    DOMMessageFormatter.DOM_DOMAIN,
                    "INVALID_CHARACTER_ERR",
                    null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new AttrImpl(this, name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="662" startcolumn="5" endline="672" endcolumn="5">
public ProcessingInstruction createProcessingInstruction(String target,
    String data)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(target,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ProcessingInstructionImpl(this, target, data);

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="617" startcolumn="5" endline="626" endcolumn="5">
public Element createElement(String tagName)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(tagName,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ElementImpl(this, tagName);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="662" startcolumn="5" endline="672" endcolumn="5">
public ProcessingInstruction createProcessingInstruction(String target,
    String data)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(target,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ProcessingInstructionImpl(this, target, data);

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="638" startcolumn="5" endline="647" endcolumn="5">
public EntityReference createEntityReference(String name)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(name,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new EntityReferenceImpl(this, name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="662" startcolumn="5" endline="672" endcolumn="5">
public ProcessingInstruction createProcessingInstruction(String target,
    String data)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(target,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ProcessingInstructionImpl(this, target, data);

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="1398" startcolumn="5" endline="1408" endcolumn="5">
public Entity createEntity(String name)
    throws DOMException {


        if (errorChecking &amp;&amp; !isXMLName(name,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new EntityImpl(this, name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="662" startcolumn="5" endline="672" endcolumn="5">
public ProcessingInstruction createProcessingInstruction(String target,
    String data)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(target,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ProcessingInstructionImpl(this, target, data);

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="1422" startcolumn="5" endline="1431" endcolumn="5">
public Notation createNotation(String name)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(name,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new NotationImpl(this, name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="662" startcolumn="5" endline="672" endcolumn="5">
public ProcessingInstruction createProcessingInstruction(String target,
    String data)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(target,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ProcessingInstructionImpl(this, target, data);

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="1437" startcolumn="5" endline="1446" endcolumn="5">
public ElementDefinitionImpl createElementDefinition(String name)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(name,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ElementDefinitionImpl(this, name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDocumentImpl.java" startline="662" startcolumn="5" endline="672" endcolumn="5">
public ProcessingInstruction createProcessingInstruction(String target,
    String data)
    throws DOMException {

        if (errorChecking &amp;&amp; !isXMLName(target,xml11Version)) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        return new ProcessingInstructionImpl(this, target, data);

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/ChildTestIterator.java" startline="169" startcolumn="3" endline="178" endcolumn="3">
public void detach()
  {
    if(m_allowDetach)
    {
      m_traverser = null;

      // Always call the superclass detach last!
      super.detach();
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/DescendantIterator.java" startline="336" startcolumn="3" endline="345" endcolumn="3">
public void detach()
  {
    if (m_allowDetach) {
      m_traverser = null;
      m_extendedTypeID = 0;

      // Always call the superclass detach last!
      super.detach();
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/MatchPatternIterator.java" startline="175" startcolumn="3" endline="184" endcolumn="3">
public void detach()
  {
    if(m_allowDetach)
    {
      m_traverser = null;

      // Always call the superclass detach last!
      super.detach();
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/DescendantIterator.java" startline="336" startcolumn="3" endline="345" endcolumn="3">
public void detach()
  {
    if (m_allowDetach) {
      m_traverser = null;
      m_extendedTypeID = 0;

      // Always call the superclass detach last!
      super.detach();
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="963" startcolumn="5" endline="976" endcolumn="5">
public void setTransformer(Transformer t)
    {
        m_transformer = t;

        // If this transformer object implements the SerializerTrace interface
        // then assign m_tracer to the transformer object so it can be used
        // to fire trace events.
        if ((m_transformer instanceof SerializerTrace) &amp;&amp;
            (((SerializerTrace) m_transformer).hasTraceListeners())) {
           m_tracer = (SerializerTrace) m_transformer;
        } else {
           m_tracer = null;
        }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="1284" startcolumn="5" endline="1293" endcolumn="5">
public void setTransformer(Transformer t)
    {
        m_handler.setTransformer(t);
        if ((t instanceof SerializerTrace) &amp;&amp;
            (((SerializerTrace) t).hasTraceListeners())) {
           m_tracer = (SerializerTrace) t;
        } else {
           m_tracer = null;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/xml/internal/stream/writers/XMLDOMWriterImpl.java" startline="577" startcolumn="5" endline="587" endcolumn="5">
public void writeStartDocument(String version) throws XMLStreamException {
        try{
            if(mXmlVersion != null){
                mXmlVersion.invoke(ownerDoc, new Object[] {version});
            }
        }catch(IllegalAccessException iae){
            throw new XMLStreamException(iae);
        }catch(InvocationTargetException ite){
            throw new XMLStreamException(ite);
        }
    }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLDOMWriterImpl.java" startline="596" startcolumn="5" endline="607" endcolumn="5">
public void writeStartDocument(String encoding, String version) throws XMLStreamException {
        try{
            if(mXmlVersion != null){
                mXmlVersion.invoke(ownerDoc, new Object[] {version});
            }
        }catch(IllegalAccessException iae){
            throw new XMLStreamException(iae);
        }catch(InvocationTargetException ite){
            throw new XMLStreamException(ite);
        }
        //TODO: What to do with encoding.-Venu
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="238" startcolumn="5" endline="247" endcolumn="5">
public void comment(String data) throws SAXException
    {
        final int length = data.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        data.getChars(0, length, m_charsBuff, 0);
        comment(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="352" startcolumn="5" endline="364" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);

        m_saxHandler.characters(m_charsBuff, 0, length);

    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToSAXHandler.java" startline="122" startcolumn="5" endline="131" endcolumn="5">
public void characters(String characters) throws SAXException
    {
        final int len = characters.length();
        if (len &gt; m_charsBuff.length)
        {
           m_charsBuff = new char[len*2 + 1];
        }
        characters.getChars(0,len, m_charsBuff, 0);
        characters(m_charsBuff, 0, len);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="352" startcolumn="5" endline="364" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);

        m_saxHandler.characters(m_charsBuff, 0, length);

    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextStream.java" startline="572" startcolumn="5" endline="582" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);
        characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="352" startcolumn="5" endline="364" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);

        m_saxHandler.characters(m_charsBuff, 0, length);

    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="238" startcolumn="5" endline="247" endcolumn="5">
public void comment(String data) throws SAXException
    {
        final int length = data.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        data.getChars(0, length, m_charsBuff, 0);
        comment(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="340" startcolumn="5" endline="349" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="238" startcolumn="5" endline="247" endcolumn="5">
public void comment(String data) throws SAXException
    {
        final int length = data.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        data.getChars(0, length, m_charsBuff, 0);
        comment(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="463" startcolumn="5" endline="472" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToSAXHandler.java" startline="122" startcolumn="5" endline="131" endcolumn="5">
public void characters(String characters) throws SAXException
    {
        final int len = characters.length();
        if (len &gt; m_charsBuff.length)
        {
           m_charsBuff = new char[len*2 + 1];
        }
        characters.getChars(0,len, m_charsBuff, 0);
        characters(m_charsBuff, 0, len);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="340" startcolumn="5" endline="349" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToSAXHandler.java" startline="122" startcolumn="5" endline="131" endcolumn="5">
public void characters(String characters) throws SAXException
    {
        final int len = characters.length();
        if (len &gt; m_charsBuff.length)
        {
           m_charsBuff = new char[len*2 + 1];
        }
        characters.getChars(0,len, m_charsBuff, 0);
        characters(m_charsBuff, 0, len);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="463" startcolumn="5" endline="472" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextStream.java" startline="572" startcolumn="5" endline="582" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);
        characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="340" startcolumn="5" endline="349" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextStream.java" startline="572" startcolumn="5" endline="582" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);
        characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="463" startcolumn="5" endline="472" endcolumn="5">
public void characters(String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="238" startcolumn="5" endline="247" endcolumn="5">
public void comment(String data) throws SAXException
    {
        final int length = data.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        data.getChars(0, length, m_charsBuff, 0);
        comment(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="475" startcolumn="5" endline="484" endcolumn="5">
public void characters(final String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/ToSAXHandler.java" startline="122" startcolumn="5" endline="131" endcolumn="5">
public void characters(String characters) throws SAXException
    {
        final int len = characters.length();
        if (len &gt; m_charsBuff.length)
        {
           m_charsBuff = new char[len*2 + 1];
        }
        characters.getChars(0,len, m_charsBuff, 0);
        characters(m_charsBuff, 0, len);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="475" startcolumn="5" endline="484" endcolumn="5">
public void characters(final String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextStream.java" startline="572" startcolumn="5" endline="582" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);
        characters(m_charsBuff, 0, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="475" startcolumn="5" endline="484" endcolumn="5">
public void characters(final String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="352" startcolumn="5" endline="364" endcolumn="5">
public void characters(String characters)
    throws SAXException
    {
        final int length = characters.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        characters.getChars(0, length, m_charsBuff, 0);

        m_saxHandler.characters(m_charsBuff, 0, length);

    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="475" startcolumn="5" endline="484" endcolumn="5">
public void characters(final String chars) throws SAXException
    {
        final int length = chars.length();
        if (length &gt; m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingParser.java" startline="183" startcolumn="3" endline="193" endcolumn="3">
public void parse(String systemId)
    throws IOException,
           SAXException {
    setupParse(systemId);
    try {
      parser.parse(systemId);
    } catch (InternalError ie) {
      explain(systemId);
      throw ie;
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingXMLFilter.java" startline="156" startcolumn="3" endline="168" endcolumn="3">
public void parse(String systemId)
    throws IOException, SAXException {
    allowXMLCatalogPI = true;

    setupBaseURI(systemId);

    try {
      super.parse(systemId);
    } catch (InternalError ie) {
      explain(systemId);
      throw ie;
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextSAXHandler.java" startline="368" startcolumn="5" endline="377" endcolumn="5">
public void characters(char[] characters, int offset, int length)
    throws SAXException
    {

        m_saxHandler.characters(characters, offset, length);

        // time to fire off characters event
                if (m_tracer != null)
            super.fireCharEvent(characters, offset, length);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="606" startcolumn="5" endline="615" endcolumn="5">
public void characters(char[] ch, int off, int len) throws SAXException
    {

        flushPending();
        m_saxHandler.characters(ch, off, len);

        // time to fire off characters event
                if (m_tracer != null)
            super.fireCharEvent(ch, off, len);
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Filter.java" startline="248" startcolumn="3" endline="259" endcolumn="3">
public void endElement(java.lang.String namespaceURI, java.lang.String localName,
      java.lang.String qName)
       throws org.xml.sax.SAXException
  {
    if(--eventcounter&lt;=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.endElement(namespaceURI,localName,qName);
  }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Filter.java" startline="329" startcolumn="3" endline="340" endcolumn="3">
public void startElement(java.lang.String namespaceURI, java.lang.String localName,
      java.lang.String qName, Attributes atts)
       throws org.xml.sax.SAXException
  {
    if(--eventcounter&lt;=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.startElement(namespaceURI, localName, qName, atts);
  }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="84" startcolumn="5" endline="95" endcolumn="5">
public final  XSElementDecl getElementDecl(){
        int     chunk       = fElementDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fElementDeclIndex &amp;  CHUNK_MASK;
        ensureElementDeclCapacity(chunk);
        if (fElementDecl[chunk][index] == null) {
            fElementDecl[chunk][index] = new XSElementDecl();
        } else {
            fElementDecl[chunk][index].reset();
        }
        fElementDeclIndex++;
        return fElementDecl[chunk][index];
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="139" startcolumn="5" endline="151" endcolumn="5">
public final XSSimpleTypeDecl getSimpleTypeDecl(){
        int     chunk       = fSTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fSTDeclIndex &amp;  CHUNK_MASK;
        ensureSTDeclCapacity(chunk);
        if (fSTDecl[chunk][index] == null) {
            fSTDecl[chunk][index] = dvFactory.newXSSimpleTypeDecl();
        } else {
            fSTDecl[chunk][index].reset();
        }
        fSTDeclIndex++;
        return fSTDecl[chunk][index];

    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="97" startcolumn="5" endline="109" endcolumn="5">
public final XSAttributeDecl getAttributeDecl(){
        int     chunk       = fAttrDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fAttrDeclIndex &amp;  CHUNK_MASK;
        ensureAttrDeclCapacity(chunk);
        if (fAttrDecl[chunk][index] == null) {
            fAttrDecl[chunk][index] = new XSAttributeDecl();
        } else {
            fAttrDecl[chunk][index].reset();
        }
        fAttrDeclIndex++;
        return fAttrDecl[chunk][index];

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="139" startcolumn="5" endline="151" endcolumn="5">
public final XSSimpleTypeDecl getSimpleTypeDecl(){
        int     chunk       = fSTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fSTDeclIndex &amp;  CHUNK_MASK;
        ensureSTDeclCapacity(chunk);
        if (fSTDecl[chunk][index] == null) {
            fSTDecl[chunk][index] = dvFactory.newXSSimpleTypeDecl();
        } else {
            fSTDecl[chunk][index].reset();
        }
        fSTDeclIndex++;
        return fSTDecl[chunk][index];

    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="111" startcolumn="5" endline="123" endcolumn="5">
public final XSAttributeUseImpl getAttributeUse(){
        int     chunk       = fAttributeUseIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fAttributeUseIndex &amp;  CHUNK_MASK;
        ensureAttributeUseCapacity(chunk);
        if (fAttributeUse[chunk][index] == null) {
            fAttributeUse[chunk][index] = new XSAttributeUseImpl();
        } else {
            fAttributeUse[chunk][index].reset();
        }
        fAttributeUseIndex++;
        return fAttributeUse[chunk][index];

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="139" startcolumn="5" endline="151" endcolumn="5">
public final XSSimpleTypeDecl getSimpleTypeDecl(){
        int     chunk       = fSTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fSTDeclIndex &amp;  CHUNK_MASK;
        ensureSTDeclCapacity(chunk);
        if (fSTDecl[chunk][index] == null) {
            fSTDecl[chunk][index] = dvFactory.newXSSimpleTypeDecl();
        } else {
            fSTDecl[chunk][index].reset();
        }
        fSTDeclIndex++;
        return fSTDecl[chunk][index];

    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="125" startcolumn="5" endline="137" endcolumn="5">
public final XSComplexTypeDecl getComplexTypeDecl(){
        int     chunk       = fCTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fCTDeclIndex &amp;  CHUNK_MASK;
        ensureCTDeclCapacity(chunk);
        if (fCTDecl[chunk][index] == null) {

            fCTDecl[chunk][index] = new XSComplexTypeDecl();
        } else {
            fCTDecl[chunk][index].reset();
        }
        fCTDeclIndex++;
        return fCTDecl[chunk][index];
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="139" startcolumn="5" endline="151" endcolumn="5">
public final XSSimpleTypeDecl getSimpleTypeDecl(){
        int     chunk       = fSTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fSTDeclIndex &amp;  CHUNK_MASK;
        ensureSTDeclCapacity(chunk);
        if (fSTDecl[chunk][index] == null) {
            fSTDecl[chunk][index] = dvFactory.newXSSimpleTypeDecl();
        } else {
            fSTDecl[chunk][index].reset();
        }
        fSTDeclIndex++;
        return fSTDecl[chunk][index];

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="153" startcolumn="5" endline="164" endcolumn="5">
public final XSParticleDecl getParticleDecl(){
        int     chunk       = fParticleDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fParticleDeclIndex &amp;  CHUNK_MASK;
        ensureParticleDeclCapacity(chunk);
        if (fParticleDecl[chunk][index] == null) {
            fParticleDecl[chunk][index] = new XSParticleDecl();
        } else {
            fParticleDecl[chunk][index].reset();
        }
        fParticleDeclIndex++;
        return fParticleDecl[chunk][index];
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="139" startcolumn="5" endline="151" endcolumn="5">
public final XSSimpleTypeDecl getSimpleTypeDecl(){
        int     chunk       = fSTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fSTDeclIndex &amp;  CHUNK_MASK;
        ensureSTDeclCapacity(chunk);
        if (fSTDecl[chunk][index] == null) {
            fSTDecl[chunk][index] = dvFactory.newXSSimpleTypeDecl();
        } else {
            fSTDecl[chunk][index].reset();
        }
        fSTDeclIndex++;
        return fSTDecl[chunk][index];

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="166" startcolumn="5" endline="177" endcolumn="5">
public final XSModelGroupImpl getModelGroup(){
        int     chunk       = fModelGroupIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fModelGroupIndex &amp;  CHUNK_MASK;
        ensureModelGroupCapacity(chunk);
        if (fModelGroup[chunk][index] == null) {
            fModelGroup[chunk][index] = new XSModelGroupImpl();
        } else {
            fModelGroup[chunk][index].reset();
        }
        fModelGroupIndex++;
        return fModelGroup[chunk][index];
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSDeclarationPool.java" startline="139" startcolumn="5" endline="151" endcolumn="5">
public final XSSimpleTypeDecl getSimpleTypeDecl(){
        int     chunk       = fSTDeclIndex &gt;&gt; CHUNK_SHIFT;
        int     index       = fSTDeclIndex &amp;  CHUNK_MASK;
        ensureSTDeclCapacity(chunk);
        if (fSTDecl[chunk][index] == null) {
            fSTDecl[chunk][index] = dvFactory.newXSSimpleTypeDecl();
        } else {
            fSTDecl[chunk][index].reset();
        }
        fSTDeclIndex++;
        return fSTDecl[chunk][index];

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="545" startcolumn="5" endline="555" endcolumn="5">
public void setInputSource(XMLInputSource inputSource)
    throws XMLConfigurationException, IOException {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        fInputSource = inputSource;

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/DTDConfiguration.java" startline="473" startcolumn="5" endline="483" endcolumn="5">
public void setInputSource(XMLInputSource inputSource)
        throws XMLConfigurationException, IOException {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        fInputSource = inputSource;

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/NonValidatingConfiguration.java" startline="449" startcolumn="5" endline="459" endcolumn="5">
public void setInputSource(XMLInputSource inputSource)
        throws XMLConfigurationException, IOException {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        fInputSource = inputSource;

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="620" startcolumn="5" endline="630" endcolumn="5">
public void setInputSource(XMLInputSource inputSource)
        throws XMLConfigurationException, IOException {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        fInputSource = inputSource;

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="514" startcolumn="5" endline="524" endcolumn="5">
public void setInputSource(XMLInputSource inputSource)
        throws XMLConfigurationException, IOException {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        fInputSource = inputSource;

    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="440" startcolumn="5" endline="450" endcolumn="5">
public void setInputSource(XMLInputSource inputSource)
        throws XMLConfigurationException, IOException {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        fInputSource = inputSource;

    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="157" startcolumn="5" endline="169" endcolumn="5">
public final void setBufferSize(int size) {
        // REVISIT: Buffer size passed to entity scanner
        // was not being kept in synch with the actual size
        // of the buffers in each scanned entity. If any
        // of the buffers were actually resized, it was possible
        // that the parser would throw an ArrayIndexOutOfBoundsException
        // for documents which contained names which are longer than
        // the current buffer size. Conceivably the buffer size passed
        // to entity scanner could be used to determine a minimum size
        // for resizing, if doubling its size is smaller than this
        // minimum. -- mrglavas
        fBufferSize = size;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectPool.java" startline="161" startcolumn="3" endline="174" endcolumn="3">
public synchronized void freeInstance(Object obj)
  {

    // Make sure the object is of the correct type.
    // Remove safety.  -sb
    // if (objectType.isInstance(obj))
    // {
    freeStack.add(obj);
    // }
    // else
    // {
    //  throw new IllegalArgumentException("argument type invalid for pool");
    // }
  }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="145" startcolumn="5" endline="157" endcolumn="5">
public final void intersection(CMStateSet setToAnd)
    {
        if (fBitCount &lt; 65)
        {
            fBits1 &amp;= setToAnd.fBits1;
            fBits2 &amp;= setToAnd.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] &amp;= setToAnd.fByteArray[index];
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="220" startcolumn="5" endline="232" endcolumn="5">
public final void union(CMStateSet setToOr)
    {
        if (fBitCount &lt; 65)
        {
            fBits1 |= setToOr.fBits1;
            fBits2 |= setToOr.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] |= setToOr.fByteArray[index];
        }
    }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM.java" startline="311" startcolumn="3" endline="329" endcolumn="3">
protected int _dataOrQName(int identity)
  {

    if (identity &lt; m_size)
      return m_dataOrQName.elementAt(identity);

    // Check to see if the information requested has been processed, and,
    // if not, advance the iterator until we the information has been
    // processed.
    while (true)
    {
      boolean isMore = nextNode();

      if (!isMore)
        return NULL;
      else if (identity &lt; m_size)
        return m_dataOrQName.elementAt(identity);
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBase.java" startline="589" startcolumn="3" endline="607" endcolumn="3">
protected int _prevsib(int identity)
  {

    if (identity &lt; m_size)
      return m_prevsib.elementAt(identity);

    // Check to see if the information requested has been processed, and,
    // if not, advance the iterator until we the information has been
    // processed.
    while (true)
    {
      boolean isMore = nextNode();

      if (identity &gt;= m_size &amp;&amp; !isMore)
        return NULL;
      else if (identity &lt; m_size)
        return m_prevsib.elementAt(identity);
    }
  }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM.java" startline="311" startcolumn="3" endline="329" endcolumn="3">
protected int _dataOrQName(int identity)
  {

    if (identity &lt; m_size)
      return m_dataOrQName.elementAt(identity);

    // Check to see if the information requested has been processed, and,
    // if not, advance the iterator until we the information has been
    // processed.
    while (true)
    {
      boolean isMore = nextNode();

      if (!isMore)
        return NULL;
      else if (identity &lt; m_size)
        return m_dataOrQName.elementAt(identity);
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBase.java" startline="616" startcolumn="3" endline="634" endcolumn="3">
protected int _parent(int identity)
  {

    if (identity &lt; m_size)
      return m_parent.elementAt(identity);

    // Check to see if the information requested has been processed, and,
    // if not, advance the iterator until we the information has been
    // processed.
    while (true)
    {
      boolean isMore = nextNode();

      if (identity &gt;= m_size &amp;&amp; !isMore)
        return NULL;
      else if (identity &lt; m_size)
        return m_parent.elementAt(identity);
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="1163" startcolumn="5" endline="1172" endcolumn="5">
protected void fireStartElem(String elemName)
        throws org.xml.sax.SAXException
    {
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTELEMENT,
                elemName, m_attributes);
        }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="1191" startcolumn="5" endline="1200" endcolumn="5">
protected void fireEscapingEvent(String name, String data)
        throws org.xml.sax.SAXException
    {

        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_PI,name, data);
        }
    }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1826" startcolumn="9" endline="1844" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, String part, int partlen) {
            int i = 0;
            while (partlen-- &gt; 0) {
                final char ch1 = target[offset++] ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1918" startcolumn="9" endline="1936" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, String part, int partlen) {
            int i = 0;
            while (partlen-- &gt; 0) {
                final char ch1 = target.setIndex(offset++) ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
    </clone>
    <clone nlines="19" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1826" startcolumn="9" endline="1844" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, String part, int partlen) {
            int i = 0;
            while (partlen-- &gt; 0) {
                final char ch1 = target[offset++] ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1956" startcolumn="9" endline="1974" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, int offset2, int partlen) {
            int i = offset2;
            while (partlen-- &gt; 0) {
                final char ch1 = target.setIndex(offset++) ;
                final char ch2 = target.setIndex(i++) ;
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
    </clone>
    <clone nlines="19" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1918" startcolumn="9" endline="1936" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, String part, int partlen) {
            int i = 0;
            while (partlen-- &gt; 0) {
                final char ch1 = target.setIndex(offset++) ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1956" startcolumn="9" endline="1974" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, int offset2, int partlen) {
            int i = offset2;
            while (partlen-- &gt; 0) {
                final char ch1 = target.setIndex(offset++) ;
                final char ch2 = target.setIndex(i++) ;
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
    </clone>
    <clone nlines="28" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="2182" startcolumn="3" endline="2209" endcolumn="3">
private static boolean isURIString(String p_uric) {
    if (p_uric == null) {
      return false;
    }
    int end = p_uric.length();
    char testChar = '\0';
    for (int i = 0; i &lt; end; i++) {
      testChar = p_uric.charAt(i);
      if (testChar == '%') {
        if (i+2 &gt;= end ||
            !isHex(p_uric.charAt(i+1)) ||
            !isHex(p_uric.charAt(i+2))) {
          return false;
        }
        else {
          i += 2;
          continue;
        }
      }
      if (isURICharacter(testChar)) {
          continue;
      }
      else {
        return false;
      }
    }
    return true;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1629" startcolumn="3" endline="1670" endcolumn="3">
private static boolean isURIString(String p_uric)
  {

    if (p_uric == null)
    {
      return false;
    }

    int end = p_uric.length();
    char testChar = '\0';

    for (int i = 0; i &lt; end; i++)
    {
      testChar = p_uric.charAt(i);

      if (testChar == '%')
      {
        if (i + 2 &gt;= end ||!isHex(p_uric.charAt(i + 1))
                ||!isHex(p_uric.charAt(i + 2)))
        {
          return false;
        }
        else
        {
          i += 2;

          continue;
        }
      }

      if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar))
      {
        continue;
      }
      else
      {
        return false;
      }
    }

    return true;
  }
</source>
    </clone>
    <clone nlines="28" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="2182" startcolumn="3" endline="2209" endcolumn="3">
private static boolean isURIString(String p_uric) {
    if (p_uric == null) {
      return false;
    }
    int end = p_uric.length();
    char testChar = '\0';
    for (int i = 0; i &lt; end; i++) {
      testChar = p_uric.charAt(i);
      if (testChar == '%') {
        if (i+2 &gt;= end ||
            !isHex(p_uric.charAt(i+1)) ||
            !isHex(p_uric.charAt(i+2))) {
          return false;
        }
        else {
          i += 2;
          continue;
        }
      }
      if (isURICharacter(testChar)) {
          continue;
      }
      else {
        return false;
      }
    }
    return true;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1650" startcolumn="3" endline="1691" endcolumn="3">
private static boolean isURIString(String p_uric)
  {

    if (p_uric == null)
    {
      return false;
    }

    int end = p_uric.length();
    char testChar = '\0';

    for (int i = 0; i &lt; end; i++)
    {
      testChar = p_uric.charAt(i);

      if (testChar == '%')
      {
        if (i + 2 &gt;= end ||!isHex(p_uric.charAt(i + 1))
                ||!isHex(p_uric.charAt(i + 2)))
        {
          return false;
        }
        else
        {
          i += 2;

          continue;
        }
      }

      if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar))
      {
        continue;
      }
      else
      {
        return false;
      }
    }

    return true;
  }
</source>
    </clone>
    <clone nlines="21" distance="1">
        <source file="com/sun/org/apache/xml/internal/resolver/CatalogManager.java" startline="617" startcolumn="3" endline="637" endcolumn="3">
private boolean queryUseStaticCatalog () {
    String staticCatalog = SecuritySupport.getSystemProperty(pStatic);

    if (staticCatalog == null) {
      if (resources==null) readProperties();
      if (resources==null) return defaultUseStaticCatalog;
      try {
        staticCatalog = resources.getString("static-catalog");
      } catch (MissingResourceException e) {
        return defaultUseStaticCatalog;
      }
    }

    if (staticCatalog == null) {
      return defaultUseStaticCatalog;
    }

    return (staticCatalog.equalsIgnoreCase("true")
            || staticCatalog.equalsIgnoreCase("yes")
            || staticCatalog.equalsIgnoreCase("1"));
  }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/CatalogManager.java" startline="748" startcolumn="3" endline="768" endcolumn="3">
public boolean queryAllowOasisXMLCatalogPI () {
    String allow = SecuritySupport.getSystemProperty(pAllowPI);

    if (allow == null) {
      if (resources==null) readProperties();
      if (resources==null) return defaultOasisXMLCatalogPI;
      try {
        allow = resources.getString("allow-oasis-xml-catalog-pi");
      } catch (MissingResourceException e) {
        return defaultOasisXMLCatalogPI;
      }
    }

    if (allow == null) {
      return defaultOasisXMLCatalogPI;
    }

    return (allow.equalsIgnoreCase("true")
            || allow.equalsIgnoreCase("yes")
            || allow.equalsIgnoreCase("1"));
  }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedByteVector.java" startline="483" startcolumn="3" endline="498" endcolumn="3">
private  int lastIndexOf(byte elem)
  {
    int boffset=m_firstFree%m_blocksize;
    for(int index=m_firstFree/m_blocksize;
        index&gt;=0;
        --index)
    {
      byte[] block=m_map[index];
      if(block!=null)
        for(int offset=boffset; offset&gt;=0; --offset)
          if(block[offset]==elem)
            return offset+index*m_blocksize;
      boffset=0; // after first
    }
    return -1;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedIntVector.java" startline="524" startcolumn="3" endline="539" endcolumn="3">
private  int lastIndexOf(int elem)
  {
    int boffset=m_firstFree&amp;m_MASK;
    for(int index=m_firstFree&gt;&gt;&gt;m_SHIFT;
        index&gt;=0;
        --index)
    {
      int[] block=m_map[index];
      if(block!=null)
        for(int offset=boffset; offset&gt;=0; --offset)
          if(block[offset]==elem)
            return offset+index*m_blocksize;
      boffset=0; // after first
    }
    return -1;
  }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xpath/internal/compiler/XPathParser.java" startline="580" startcolumn="3" endline="591" endcolumn="3">
private void assertion(boolean b, String msg)
  {

    if (!b)
    {
      String fMsg = XSLMessages.createXPATHMessage(
        XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,
        new Object[]{ msg });

      throw new RuntimeException(fMsg);
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPath.java" startline="550" startcolumn="3" endline="561" endcolumn="3">
public void assertion(boolean b, String msg)
  {

    if (!b)
    {
      String fMsg = XSLMessages.createXPATHMessage(
        XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,
        new Object[]{ msg });

      throw new RuntimeException(fMsg);
    }
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1322" startcolumn="5" endline="1336" endcolumn="5">
@Override
    public void internalEntityDecl(
        String name,
        XMLString text,
        XMLString nonNormalizedText,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.internalEntityDecl(
                name,
                text,
                nonNormalizedText,
                augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="833" startcolumn="5" endline="843" endcolumn="5">
@Override
    public void doctypeDecl(
        String rootElement,
        String publicId,
        String systemId,
        Augmentations augs)
        throws XNIException {
        if (isRootDocument() &amp;&amp; fDocumentHandler != null) {
            fDocumentHandler.doctypeDecl(rootElement, publicId, systemId, augs);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1411" startcolumn="5" endline="1425" endcolumn="5">
@Override
    public void startParameterEntity(
        String name,
        XMLResourceIdentifier identifier,
        String encoding,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.startParameterEntity(
                name,
                identifier,
                encoding,
                augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="833" startcolumn="5" endline="843" endcolumn="5">
@Override
    public void doctypeDecl(
        String rootElement,
        String publicId,
        String systemId,
        Augmentations augs)
        throws XNIException {
        if (isRootDocument() &amp;&amp; fDocumentHandler != null) {
            fDocumentHandler.doctypeDecl(rootElement, publicId, systemId, augs);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1221" startcolumn="5" endline="1230" endcolumn="5">
@Override
    public void elementDecl(
        String name,
        String contentModel,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.elementDecl(name, contentModel, augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1322" startcolumn="5" endline="1336" endcolumn="5">
@Override
    public void internalEntityDecl(
        String name,
        XMLString text,
        XMLString nonNormalizedText,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.internalEntityDecl(
                name,
                text,
                nonNormalizedText,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1221" startcolumn="5" endline="1230" endcolumn="5">
@Override
    public void elementDecl(
        String name,
        String contentModel,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.elementDecl(name, contentModel, augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1411" startcolumn="5" endline="1425" endcolumn="5">
@Override
    public void startParameterEntity(
        String name,
        XMLResourceIdentifier identifier,
        String encoding,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.startParameterEntity(
                name,
                identifier,
                encoding,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1289" startcolumn="5" endline="1298" endcolumn="5">
@Override
    public void externalEntityDecl(
        String name,
        XMLResourceIdentifier identifier,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.externalEntityDecl(name, identifier, augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1322" startcolumn="5" endline="1336" endcolumn="5">
@Override
    public void internalEntityDecl(
        String name,
        XMLString text,
        XMLString nonNormalizedText,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.internalEntityDecl(
                name,
                text,
                nonNormalizedText,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1289" startcolumn="5" endline="1298" endcolumn="5">
@Override
    public void externalEntityDecl(
        String name,
        XMLResourceIdentifier identifier,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.externalEntityDecl(name, identifier, augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1411" startcolumn="5" endline="1425" endcolumn="5">
@Override
    public void startParameterEntity(
        String name,
        XMLResourceIdentifier identifier,
        String encoding,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.startParameterEntity(
                name,
                identifier,
                encoding,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="2047" startcolumn="9" endline="2058" endcolumn="9">
void reset(CharacterIterator target, int start, int limit, int nofclosures) {
            if (characterIteratorTarget == null) {
                characterIteratorTarget = new CharacterIteratorTarget(target);
            }
            else {
                characterIteratorTarget.resetTarget(target);
            }
            this.target = characterIteratorTarget;
            this.start = start;
            this.limit = limit;
            this.resetCommon(nofclosures);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="2073" startcolumn="9" endline="2084" endcolumn="9">
void reset(char[] target, int start, int limit, int nofclosures) {
            if (charArrayTarget == null) {
                charArrayTarget = new CharArrayTarget(target);
            }
            else {
                charArrayTarget.resetTarget(target);
            }
            this.target = charArrayTarget;
            this.start = start;
            this.limit = limit;
            this.resetCommon(nofclosures);
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="2060" startcolumn="9" endline="2071" endcolumn="9">
void reset(String target, int start, int limit, int nofclosures) {
            if (stringTarget == null) {
                stringTarget = new StringTarget(target);
            }
            else {
                stringTarget.resetTarget(target);
            }
            this.target = stringTarget;
            this.start = start;
            this.limit = limit;
            this.resetCommon(nofclosures);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="2073" startcolumn="9" endline="2084" endcolumn="9">
void reset(char[] target, int start, int limit, int nofclosures) {
            if (charArrayTarget == null) {
                charArrayTarget = new CharArrayTarget(target);
            }
            else {
                charArrayTarget.resetTarget(target);
            }
            this.target = charArrayTarget;
            this.start = start;
            this.limit = limit;
            this.resetCommon(nofclosures);
        }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="javax/xml/transform/dom/DOMResult.java" startline="132" startcolumn="5" endline="150" endcolumn="5">
public DOMResult(Node node, Node nextSibling) {

        // does the corrent parent/child relationship exist?
        if (nextSibling != null) {
            // cannot be a sibling of a null node
            if (node == null) {
                throw new IllegalArgumentException("Cannot create a DOMResult when the nextSibling is contained by the \"null\" node.");
            }

            // nextSibling contained by node?
            if ((node.compareDocumentPosition(nextSibling)&amp;Node.DOCUMENT_POSITION_CONTAINED_BY)==0) {
                throw new IllegalArgumentException("Cannot create a DOMResult when the nextSibling is not contained by the node.");
            }
        }

        setNode(node);
        setNextSibling(nextSibling);
        setSystemId(null);
    }
</source>
        <source file="javax/xml/transform/dom/DOMResult.java" startline="183" startcolumn="5" endline="201" endcolumn="5">
public DOMResult(Node node, Node nextSibling, String systemId) {

        // does the corrent parent/child relationship exist?
        if (nextSibling != null) {
            // cannot be a sibling of a null node
            if (node == null) {
                throw new IllegalArgumentException("Cannot create a DOMResult when the nextSibling is contained by the \"null\" node.");
            }

            // nextSibling contained by node?
            if ((node.compareDocumentPosition(nextSibling)&amp;Node.DOCUMENT_POSITION_CONTAINED_BY)==0) {
                throw new IllegalArgumentException("Cannot create a DOMResult when the nextSibling is not contained by the node.");
            }
        }

        setNode(node);
        setNextSibling(nextSibling);
        setSystemId(systemId);
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMAxisIteratorBase.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public DTMAxisIterator reset()
  {

    final boolean temp = _isRestartable;

    _isRestartable = true;

    setStartNode(_startNode);

    _isRestartable = temp;

    return this;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1906" startcolumn="3" endline="1918" endcolumn="3">
public DTMAxisIterator reset()
  {

    final boolean temp = _isRestartable;

    _isRestartable = true;

    setStartNode(makeNodeHandle(_startNode));

    _isRestartable = temp;

    return this;
  }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMAxisIteratorBase.java" startline="82" startcolumn="3" endline="94" endcolumn="3">
public DTMAxisIterator reset()
  {

    final boolean temp = _isRestartable;

    _isRestartable = true;

    setStartNode(_startNode);

    _isRestartable = temp;

    return this;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="1619" startcolumn="3" endline="1631" endcolumn="3">
public DTMAxisIterator reset()
  {

    final boolean temp = _isRestartable;

    _isRestartable = true;

    setStartNode(makeNodeHandle(_startNode));

    _isRestartable = temp;

    return this;
  }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/xml/internal/stream/dtd/nonvalidating/DTDGrammar.java" startline="908" startcolumn="9" endline="926" endcolumn="9">
public int get(String key) {
            int hash = (hash(key)+2) % HASHTABLE_SIZE;
            Object[] bucket = fHashTable[hash];

            if (bucket == null) {
                return -1;
            }
            int count = ((int[])bucket[0])[0];

            int j=1;
            for (int i=0; i&lt;count; i++){
                if ((String)bucket[j] == key) {
                    return ((int[])bucket[j+1])[0];
                }
                j += 2;
            }
            return -1;

        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar.java" startline="2752" startcolumn="9" endline="2770" endcolumn="9">
public int get(String key) {
            int hash = (key.hashCode() &amp; 0x7FFFFFFF) % HASHTABLE_SIZE;
            Object[] bucket = fHashTable[hash];

            if (bucket == null) {
                return -1;
            }
            int count = ((int[])bucket[0])[0];

            int j=1;
            for (int i=0; i&lt;count; i++){
                if ((String)bucket[j] == key) {
                    return ((int[])bucket[j+1])[0];
                }
                j += 2;
            }
            return -1;

        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/DOMHelper.java" startline="895" startcolumn="3" endline="907" endcolumn="3">
public boolean isIgnorableWhitespace(Text node)
  {

    boolean isIgnorable = false;  // return value

    // TODO: I can probably do something to figure out if this
    // space is ignorable from just the information in
    // the DOM tree.
        // -- You need to be able to distinguish whitespace
        // that is #PCDATA from whitespace that isn't.  That requires
        // DTD support, which won't be standardized until DOM Level 3.
    return isIgnorable;
  }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDValidator.java" startline="1476" startcolumn="5" endline="1490" endcolumn="5">
protected boolean invalidStandaloneAttDef(QName element, QName attribute) {
        // REVISIT: This obviously needs to be fixed! -Ac
        boolean state = true;
        /*
       if (fStandaloneReader == -1) {
          return false;
       }
       // we are normalizing a default att value...  this ok?
       if (element.rawname == -1) {
          return false;
       }
       return getAttDefIsExternal(element, attribute);
       */
        return state;
    }
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/NamespaceMappings.java" startline="159" startcolumn="5" endline="173" endcolumn="5">
public String lookupPrefix(String uri)
    {
        String foundPrefix = null;
        Iterator&lt;String&gt; itr = m_namespaces.keySet().iterator();
        while (itr.hasNext()) {
            String prefix = itr.next();
            String uri2 = lookupNamespace(prefix);
            if (uri2 != null &amp;&amp; uri2.equals(uri))
            {
                foundPrefix = prefix;
                break;
            }
        }
        return foundPrefix;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/NamespaceMappings.java" startline="175" startcolumn="5" endline="190" endcolumn="5">
MappingRecord getMappingFromURI(String uri)
    {
        MappingRecord foundMap = null;
        Iterator&lt;String&gt; itr = m_namespaces.keySet().iterator();
        while (itr.hasNext())
        {
            String prefix = itr.next();
            MappingRecord map2 = getMappingFromPrefix(prefix);
            if (map2 != null &amp;&amp; (map2.m_uri).equals(uri))
            {
                foundMap = map2;
                break;
            }
        }
        return foundMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="747" startcolumn="3" endline="759" endcolumn="3">
public boolean deepEquals(Expression expr)
  {
        if(!isSameClass(expr))
                return false;

        // If equals at the expression level calls deepEquals, I think we're
        // still safe from infinite recursion since this object overrides
        // equals.  I hope.
        if(!this.equals((XObject)expr))
                return false;

        return true;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/operations/UnaryOperation.java" startline="153" startcolumn="3" endline="162" endcolumn="3">
public boolean deepEquals(Expression expr)
  {
        if(!isSameClass(expr))
                return false;

        if(!m_right.deepEquals(((UnaryOperation)expr).m_right))
                return false;

        return true;
  }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="747" startcolumn="3" endline="759" endcolumn="3">
public boolean deepEquals(Expression expr)
  {
        if(!isSameClass(expr))
                return false;

        // If equals at the expression level calls deepEquals, I think we're
        // still safe from infinite recursion since this object overrides
        // equals.  I hope.
        if(!this.equals((XObject)expr))
                return false;

        return true;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/operations/Variable.java" startline="362" startcolumn="3" endline="379" endcolumn="3">
public boolean deepEquals(Expression expr)
  {
        if(!isSameClass(expr))
                return false;

        if(!m_qname.equals(((Variable)expr).m_qname))
                return false;

    // J2SE does not support Xalan interpretive
    /*
        // We have to make sure that the qname really references
        // the same variable element.
    if(getElemVariable() != ((Variable)expr).getElemVariable())
        return false;
        */

        return true;
  }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="561" startcolumn="3" endline="576" endcolumn="3">
public boolean contains(int s)
  {

    if (null == m_map)
      return false;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      int node = m_map[i];

      if (node == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="616" startcolumn="3" endline="631" endcolumn="3">
public int indexOf(int elem)
  {

    if (null == m_map)
      return -1;

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      int node = m_map[i];

      if (node == elem)
        return i;
    }

    return -1;
  }
</source>
    </clone>
    <clone nlines="15" distance="5">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DatatypeFactoryImpl.java" startline="439" startcolumn="9" endline="453" endcolumn="9">
public Duration newDurationDayTime(
                final boolean isPositive,
                final BigInteger day,
                final BigInteger hour,
                final BigInteger minute,
                final BigInteger second) {

                return new DurationDayTimeImpl(
                        isPositive,
                        day,
                        hour,
                        minute,
                        (second != null)? new BigDecimal(second):null
                );
        }
</source>
        <source file="javax/xml/datatype/DatatypeFactory.java" startline="480" startcolumn="5" endline="496" endcolumn="5">
public Duration newDurationDayTime(
            final boolean isPositive,
            final BigInteger day,
            final BigInteger hour,
            final BigInteger minute,
            final BigInteger second) {

            return newDuration(
                    isPositive,
                    null,  // years
                    null, // months
                    day,
                    hour,
                    minute,
                    (second != null)? new BigDecimal(second):null
            );
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/validation/ValidationState.java" startline="111" startcolumn="5" endline="120" endcolumn="5">
public void reset () {
        fExtraChecking = true;
        fFacetChecking = true;
        fNamespaces = true;
        fIdList = null;
        fIdRefList = null;
        fEntityState = null;
        fNamespaceContext = null;
        fSymbolTable = null;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="386" startcolumn="5" endline="395" endcolumn="5">
public final void dropDocumentReferences() {
        fDocument = null;
        fDocumentImpl = null;
        fDeferredDocumentImpl = null;
        fDocumentType = null;
        fCurrentNode = null;
        fCurrentCDATASection = null;
        fCurrentEntityDecl = null;
        fRoot = null;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/validation/ValidationState.java" startline="111" startcolumn="5" endline="120" endcolumn="5">
public void reset () {
        fExtraChecking = true;
        fFacetChecking = true;
        fNamespaces = true;
        fIdList = null;
        fIdRefList = null;
        fEntityState = null;
        fNamespaceContext = null;
        fSymbolTable = null;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerHandlerImpl.java" startline="503" startcolumn="4" endline="512" endcolumn="4">
public void reset() {
       _systemId = null;
       _dom = null;
       _handler = null;
       _lexHandler = null;
       _dtdHandler = null;
       _declHandler = null;
       _result = null;
       _locator = null;
   }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/validation/ValidationState.java" startline="111" startcolumn="5" endline="120" endcolumn="5">
public void reset () {
        fExtraChecking = true;
        fFacetChecking = true;
        fNamespaces = true;
        fIdList = null;
        fIdRefList = null;
        fEntityState = null;
        fNamespaceContext = null;
        fSymbolTable = null;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XPointerFramework.java" startline="92" startcolumn="5" endline="101" endcolumn="5">
public void reset(){
        fXPointerSchema = null;
        fXPointerSchema = null;
        fCountSchemaName = 0;
        schemaLength = 0;
        fSchemaPointerName = null;
        fSchemaPointerURI = null;
        fDefaultXPointerSchema = null;
        fCurrentSchemaPointer = null;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XPointerFramework.java" startline="92" startcolumn="5" endline="101" endcolumn="5">
public void reset(){
        fXPointerSchema = null;
        fXPointerSchema = null;
        fCountSchemaName = 0;
        schemaLength = 0;
        fSchemaPointerName = null;
        fSchemaPointerURI = null;
        fDefaultXPointerSchema = null;
        fCurrentSchemaPointer = null;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="386" startcolumn="5" endline="395" endcolumn="5">
public final void dropDocumentReferences() {
        fDocument = null;
        fDocumentImpl = null;
        fDeferredDocumentImpl = null;
        fDocumentType = null;
        fCurrentNode = null;
        fCurrentCDATASection = null;
        fCurrentEntityDecl = null;
        fRoot = null;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XPointerFramework.java" startline="92" startcolumn="5" endline="101" endcolumn="5">
public void reset(){
        fXPointerSchema = null;
        fXPointerSchema = null;
        fCountSchemaName = 0;
        schemaLength = 0;
        fSchemaPointerName = null;
        fSchemaPointerURI = null;
        fDefaultXPointerSchema = null;
        fCurrentSchemaPointer = null;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerHandlerImpl.java" startline="503" startcolumn="4" endline="512" endcolumn="4">
public void reset() {
       _systemId = null;
       _dom = null;
       _handler = null;
       _lexHandler = null;
       _dtdHandler = null;
       _declHandler = null;
       _result = null;
       _locator = null;
   }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="406" startcolumn="5" endline="415" endcolumn="5">
public void serialize( Element elem )
        throws IOException
    {
        reset();
        prepare();
        serializeNode( elem );
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="425" startcolumn="5" endline="434" endcolumn="5">
public void serialize( Node node ) throws IOException {
        reset();
        prepare();
        serializeNode( node );
        //Print any PIs and Comments which appeared in 'node'
        serializePreRoot();
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="406" startcolumn="5" endline="415" endcolumn="5">
public void serialize( Element elem )
        throws IOException
    {
        reset();
        prepare();
        serializeNode( elem );
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="466" startcolumn="5" endline="476" endcolumn="5">
public void serialize( Document doc )
        throws IOException
    {
        reset();
        prepare();
        serializeNode( doc );
        serializePreRoot();
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="445" startcolumn="5" endline="454" endcolumn="5">
public void serialize( DocumentFragment frag )
        throws IOException
    {
        reset();
        prepare();
        serializeNode( frag );
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="425" startcolumn="5" endline="434" endcolumn="5">
public void serialize( Node node ) throws IOException {
        reset();
        prepare();
        serializeNode( node );
        //Print any PIs and Comments which appeared in 'node'
        serializePreRoot();
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="445" startcolumn="5" endline="454" endcolumn="5">
public void serialize( DocumentFragment frag )
        throws IOException
    {
        reset();
        prepare();
        serializeNode( frag );
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="466" startcolumn="5" endline="476" endcolumn="5">
public void serialize( Document doc )
        throws IOException
    {
        reset();
        prepare();
        serializeNode( doc );
        serializePreRoot();
        _printer.flush();
        if ( _printer.getException() != null )
            throw _printer.getException();
    }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1150" startcolumn="3" endline="1167" endcolumn="3">
public void setPort(int p_port) throws MalformedURIException
  {

    if (p_port &gt;= 0 &amp;&amp; p_port &lt;= 65535)
    {
      if (m_host == null)
      {
        throw new MalformedURIException(
          XMLMessages.createXMLMessage(XMLErrorResources.ER_PORT_WHEN_HOST_NULL, null)); //"Port cannot be set when host is null!");
      }
    }
    else if (p_port != -1)
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INVALID_PORT, null)); //"Invalid port number!");
    }

    m_port = p_port;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1129" startcolumn="3" endline="1146" endcolumn="3">
public void setPort(int p_port) throws MalformedURIException
  {

    if (p_port &gt;= 0 &amp;&amp; p_port &lt;= 65535)
    {
      if (m_host == null)
      {
        throw new MalformedURIException(
          Utils.messages.createMessage(MsgKey.ER_PORT_WHEN_HOST_NULL, null)); //"Port cannot be set when host is null!");
      }
    }
    else if (p_port != -1)
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_INVALID_PORT, null)); //"Invalid port number!");
    }

    m_port = p_port;
  }
</source>
    </clone>
    <clone nlines="20" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="581" startcolumn="5" endline="600" endcolumn="5">
public void setProperty0(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        try {
            fConfiguration.setProperty(propertyId, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-supported", new Object [] {identifier}));
            }
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="692" startcolumn="9" endline="711" endcolumn="9">
private void setSchemaValidatorFeature(String name, boolean value)
            throws SAXNotRecognizedException, SAXNotSupportedException {
            try {
                fSAXParser.fSchemaValidator.setFeature(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
                }
            }
        }
</source>
    </clone>
    <clone nlines="20" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="581" startcolumn="5" endline="600" endcolumn="5">
public void setProperty0(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        try {
            fConfiguration.setProperty(propertyId, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-supported", new Object [] {identifier}));
            }
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="713" startcolumn="9" endline="732" endcolumn="9">
private void setSchemaValidatorProperty(String name, Object value)
            throws SAXNotRecognizedException, SAXNotSupportedException {
            try {
                fSAXParser.fSchemaValidator.setProperty(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
                }
            }
        }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SAX2StAXStreamWriter.java" startline="270" startcolumn="9" endline="284" endcolumn="9">
public void ignorableWhitespace(char[] ch, int start, int length)
                        throws SAXException {

                super.ignorableWhitespace(ch, start, length);
                try {

                        writer.writeCharacters(ch, start, length);

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SAX2StAXStreamWriter.java" startline="219" startcolumn="9" endline="232" endcolumn="9">
public void comment(char[] ch, int start, int length) throws SAXException {

                super.comment(ch, start, length);
                try {

                        writer.writeComment(new String(ch, start, length));

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

        }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="118" startcolumn="3" endline="128" endcolumn="3">
public final String get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(key))
        return m_map[i + 1];
    }

    return null;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="183" startcolumn="3" endline="193" endcolumn="3">
public final String getByValue(String val)
  {

    for (int i = 1; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(val))
        return m_map[i - 1];
    }

    return null;
  }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar.java" startline="2008" startcolumn="5" endline="2021" endcolumn="5">
protected int addUniqueLeafNode(String elementName) {

        // create content spec node
        int contentSpecIndex = createContentSpec();

        // set content spec node values
        fContentSpec.setValues( XMLContentSpec.CONTENTSPECNODE_LEAF,
                                elementName, null);
        setContentSpec(contentSpecIndex, fContentSpec);

        // return index
        return contentSpecIndex;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar.java" startline="1988" startcolumn="5" endline="2000" endcolumn="5">
protected int addContentSpecNode(short nodeType, String nodeValue) {

        // create content spec node
        int contentSpecIndex = createContentSpec();

        // set content spec node values
        fContentSpec.setValues(nodeType, nodeValue, null);
        setContentSpec(contentSpecIndex, fContentSpec);

        // return index
        return contentSpecIndex;

    }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="com/sun/org/apache/xpath/internal/compiler/XPathParser.java" startline="804" startcolumn="3" endline="820" endcolumn="3">
protected void OrExpr() throws javax.xml.transform.TransformerException
  {

    int opPos = m_ops.getOp(OpMap.MAPINDEX_LENGTH);

    AndExpr();

    if ((null != m_token) &amp;&amp; tokenIs("or"))
    {
      nextToken();
      insertOp(opPos, 2, OpCodes.OP_OR);
      OrExpr();

      m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,
        m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/compiler/XPathParser.java" startline="831" startcolumn="3" endline="847" endcolumn="3">
protected void AndExpr() throws javax.xml.transform.TransformerException
  {

    int opPos = m_ops.getOp(OpMap.MAPINDEX_LENGTH);

    EqualityExpr(-1);

    if ((null != m_token) &amp;&amp; tokenIs("and"))
    {
      nextToken();
      insertOp(opPos, 2, OpCodes.OP_AND);
      AndExpr();

      m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,
        m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);
    }
  }
</source>
    </clone>
    <clone nlines="19" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1863" startcolumn="9" endline="1881" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, int offset2, int partlen) {
            int i = offset2;
            while (partlen-- &gt; 0) {
                final char ch1 =  target[offset++] ;
                final char ch2 =  target[i++] ;
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1826" startcolumn="9" endline="1844" endcolumn="9">
private final boolean regionMatchesIgnoreCase(int offset, int limit, String part, int partlen) {
            int i = 0;
            while (partlen-- &gt; 0) {
                final char ch1 = target[offset++] ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
            return true;
        }
</source>
    </clone>
    <clone nlines="34" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedByteVector.java" startline="152" startcolumn="3" endline="185" endcolumn="3">
private  void addElements(byte value, int numberOfElements)
  {
    if(m_firstFree+numberOfElements&lt;m_blocksize)
      for (int i = 0; i &lt; numberOfElements; i++)
      {
        m_map0[m_firstFree++]=value;
      }
    else
    {
      int index=m_firstFree/m_blocksize;
      int offset=m_firstFree%m_blocksize;
      m_firstFree+=numberOfElements;
      while( numberOfElements&gt;0)
      {
        if(index&gt;=m_map.length)
        {
          int newsize=index+m_numblocks;
          byte[][] newMap=new byte[newsize][];
          System.arraycopy(m_map, 0, newMap, 0, m_map.length);
          m_map=newMap;
        }
        byte[] block=m_map[index];
        if(null==block)
          block=m_map[index]=new byte[m_blocksize];
        int copied=(m_blocksize-offset &lt; numberOfElements)
          ? m_blocksize-offset : numberOfElements;
        numberOfElements-=copied;
        while(copied-- &gt; 0)
          block[offset++]=value;

        ++index;offset=0;
      }
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedIntVector.java" startline="192" startcolumn="3" endline="225" endcolumn="3">
private  void addElements(int value, int numberOfElements)
  {
    if(m_firstFree+numberOfElements&lt;m_blocksize)
      for (int i = 0; i &lt; numberOfElements; i++)
      {
        m_map0[m_firstFree++]=value;
      }
    else
    {
      int index=m_firstFree&gt;&gt;&gt;m_SHIFT;
      int offset=m_firstFree&amp;m_MASK;
      m_firstFree+=numberOfElements;
      while( numberOfElements&gt;0)
      {
        if(index&gt;=m_map.length)
        {
          int newsize=index+m_numblocks;
          int[][] newMap=new int[newsize][];
          System.arraycopy(m_map, 0, newMap, 0, m_map.length);
          m_map=newMap;
        }
        int[] block=m_map[index];
        if(null==block)
          block=m_map[index]=new int[m_blocksize];
        int copied=(m_blocksize-offset &lt; numberOfElements)
          ? m_blocksize-offset : numberOfElements;
        numberOfElements-=copied;
        while(copied-- &gt; 0)
          block[offset++]=value;

        ++index;offset=0;
      }
    }
  }
</source>
    </clone>
    <clone nlines="32" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/XPath.java" startline="1896" startcolumn="9" endline="1937" endcolumn="9">
int scanNCName(String data, int endOffset, int currentOffset) {
            int ch = data.charAt(currentOffset);
            if (ch &gt;= 0x80) {
                if (!XMLChar.isNameStart(ch))
                /*** // REVISIT: Make sure this is a negation. ***
                if ((XMLCharacterProperties.fgCharFlags[ch] &amp;
                     XMLCharacterProperties.E_InitialNameCharFlag) == 0)
                /***/
                {
                    return currentOffset;
                }
            }
            else {
                byte chartype = fASCIICharMap[ch];
                if (chartype != CHARTYPE_LETTER &amp;&amp; chartype != CHARTYPE_UNDERSCORE) {
                    return currentOffset;
                }
            }
            while (++currentOffset &lt; endOffset) {
                ch = data.charAt(currentOffset);
                if (ch &gt;= 0x80) {
                    if (!XMLChar.isName(ch))
                    /*** // REVISIT: Make sure this is a negation. ***
                    if ((XMLCharacterProperties.fgCharFlags[ch] &amp;
                         XMLCharacterProperties.E_NameCharFlag) == 0)
                    /***/
                    {
                        break;
                    }
                }
                else {
                    byte chartype = fASCIICharMap[ch];
                    if (chartype != CHARTYPE_LETTER &amp;&amp; chartype != CHARTYPE_DIGIT &amp;&amp;
                        chartype != CHARTYPE_PERIOD &amp;&amp; chartype != CHARTYPE_MINUS &amp;&amp;
                        chartype != CHARTYPE_UNDERSCORE)
                    {
                        break;
                    }
                }
            }
            return currentOffset;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xpointer/ElementSchemePointer.java" startline="828" startcolumn="9" endline="859" endcolumn="9">
private int scanNCName(String data, int endOffset, int currentOffset) {
            int ch = data.charAt(currentOffset);
            if (ch &gt;= 0x80) {
                if (!XMLChar.isNameStart(ch)) {
                    return currentOffset;
                }
            } else {
                byte chartype = fASCIICharMap[ch];
                if (chartype != CHARTYPE_LETTER
                        &amp;&amp; chartype != CHARTYPE_UNDERSCORE) {
                    return currentOffset;
                }
            }
            while (++currentOffset &lt; endOffset) {
                ch = data.charAt(currentOffset);
                if (ch &gt;= 0x80) {
                    if (!XMLChar.isName(ch)) {
                        break;
                    }
                } else {
                    byte chartype = fASCIICharMap[ch];
                    if (chartype != CHARTYPE_LETTER
                            &amp;&amp; chartype != CHARTYPE_DIGIT
                            &amp;&amp; chartype != CHARTYPE_PERIOD
                            &amp;&amp; chartype != CHARTYPE_MINUS
                            &amp;&amp; chartype != CHARTYPE_UNDERSCORE) {
                        break;
                    }
                }
            }
            return currentOffset;
        }
</source>
    </clone>
    <clone nlines="34" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/XPath.java" startline="1896" startcolumn="9" endline="1937" endcolumn="9">
int scanNCName(String data, int endOffset, int currentOffset) {
            int ch = data.charAt(currentOffset);
            if (ch &gt;= 0x80) {
                if (!XMLChar.isNameStart(ch))
                /*** // REVISIT: Make sure this is a negation. ***
                if ((XMLCharacterProperties.fgCharFlags[ch] &amp;
                     XMLCharacterProperties.E_InitialNameCharFlag) == 0)
                /***/
                {
                    return currentOffset;
                }
            }
            else {
                byte chartype = fASCIICharMap[ch];
                if (chartype != CHARTYPE_LETTER &amp;&amp; chartype != CHARTYPE_UNDERSCORE) {
                    return currentOffset;
                }
            }
            while (++currentOffset &lt; endOffset) {
                ch = data.charAt(currentOffset);
                if (ch &gt;= 0x80) {
                    if (!XMLChar.isName(ch))
                    /*** // REVISIT: Make sure this is a negation. ***
                    if ((XMLCharacterProperties.fgCharFlags[ch] &amp;
                         XMLCharacterProperties.E_NameCharFlag) == 0)
                    /***/
                    {
                        break;
                    }
                }
                else {
                    byte chartype = fASCIICharMap[ch];
                    if (chartype != CHARTYPE_LETTER &amp;&amp; chartype != CHARTYPE_DIGIT &amp;&amp;
                        chartype != CHARTYPE_PERIOD &amp;&amp; chartype != CHARTYPE_MINUS &amp;&amp;
                        chartype != CHARTYPE_UNDERSCORE)
                    {
                        break;
                    }
                }
            }
            return currentOffset;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xpointer/XPointerHandler.java" startline="864" startcolumn="9" endline="897" endcolumn="9">
private int scanNCName(String data, int endOffset, int currentOffset) {
            int ch = data.charAt(currentOffset);
            if (ch &gt;= 0x80) {
                if (!XMLChar.isNameStart(ch)) {
                    return currentOffset;
                }
            } else {
                byte chartype = fASCIICharMap[ch];
                if (chartype != CHARTYPE_LETTER
                        &amp;&amp; chartype != CHARTYPE_UNDERSCORE) {
                    return currentOffset;
                }
            }

            //while (currentOffset++ &lt; endOffset) {
            while (++currentOffset &lt; endOffset) {
                ch = data.charAt(currentOffset);
                if (ch &gt;= 0x80) {
                    if (!XMLChar.isName(ch)) {
                        break;
                    }
                } else {
                    byte chartype = fASCIICharMap[ch];
                    if (chartype != CHARTYPE_LETTER
                            &amp;&amp; chartype != CHARTYPE_DIGIT
                            &amp;&amp; chartype != CHARTYPE_PERIOD
                            &amp;&amp; chartype != CHARTYPE_MINUS
                            &amp;&amp; chartype != CHARTYPE_UNDERSCORE) {
                        break;
                    }
                }
            }
            return currentOffset;
        }
</source>
    </clone>
    <clone nlines="21" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/QName.java" startline="204" startcolumn="3" endline="224" endcolumn="3">
public QName(String localName, boolean validate)
  {

    // This check was already here.  So, for now, I will not add it to the validation
    // that is done when the validate parameter is true.
    if (localName == null)
      throw new IllegalArgumentException(XMLMessages.createXMLMessage(
            XMLErrorResources.ER_ARG_LOCALNAME_NULL, null)); //"Argument 'localName' is null");

    if (validate)
    {
        if (!XML11Char.isXML11ValidNCName(localName))
        {
            throw new IllegalArgumentException(XMLMessages.createXMLMessage(
            XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null )); //"Argument 'localName' not a valid NCName");
        }
    }
    _namespaceURI = null;
    _localName = localName;
    m_hashCode = toString().hashCode();
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/QName.java" startline="107" startcolumn="3" endline="128" endcolumn="3">
public QName(String namespaceURI, String localName, boolean validate)
  {

    // This check was already here.  So, for now, I will not add it to the validation
    // that is done when the validate parameter is true.
    if (localName == null)
      throw new IllegalArgumentException(XMLMessages.createXMLMessage(
            XMLErrorResources.ER_ARG_LOCALNAME_NULL, null)); //"Argument 'localName' is null");

    if (validate)
    {
        if (!XML11Char.isXML11ValidNCName(localName))
        {
            throw new IllegalArgumentException(XMLMessages.createXMLMessage(
            XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null )); //"Argument 'localName' not a valid NCName");
        }
    }

    _namespaceURI = namespaceURI;
    _localName = localName;
    m_hashCode = toString().hashCode();
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/OutputFormat.java" startline="655" startcolumn="5" endline="665" endcolumn="5">
public boolean isCDataElement( String tagName )
    {
        int i;

        if ( _cdataElements == null )
            return false;
        for ( i = 0 ; i &lt; _cdataElements.length ; ++i )
            if ( _cdataElements[ i ].equals( tagName ) )
                return true;
        return false;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/OutputFormat.java" startline="698" startcolumn="5" endline="709" endcolumn="5">
public boolean isNonEscapingElement( String tagName )
    {
        int i;

        if ( _nonEscapingElements == null ) {
            return false;
        }
        for ( i = 0 ; i &lt; _nonEscapingElements.length ; ++i )
            if ( _nonEscapingElements[ i ].equals( tagName ) )
                return true;
        return false;
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/runtime/Hashtable.java" startline="149" startcolumn="5" endline="160" endcolumn="5">
public boolean containsKey(Object key) {
        HashtableEntry e;
        HashtableEntry tab[] = table;
        int hash = key.hashCode();
        int index = (hash &amp; 0x7FFFFFFF) % tab.length;

        for (e = tab[index] ; e != null ; e = e.next)
            if ((e.hash == hash) &amp;&amp; e.key.equals(key))
                return true;

        return false;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/runtime/Hashtable.java" startline="165" startcolumn="5" endline="176" endcolumn="5">
public Object get(Object key) {
        HashtableEntry e;
        HashtableEntry tab[] = table;
        int hash = key.hashCode();
        int index = (hash &amp; 0x7FFFFFFF) % tab.length;

        for (e = tab[index] ; e != null ; e = e.next)
            if ((e.hash == hash) &amp;&amp; e.key.equals(key))
                return e.value;

        return null;
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDocumentImpl.java" startline="1643" startcolumn="9" endline="1653" endcolumn="9">
public String getLocalName(int nodeHandle) {
                nodes.readSlot(nodeHandle, gotslot);
                short type = (short) (gotslot[0] &amp; 0xFFFF);
                String name = "";
                if ((type==ELEMENT_NODE) || (type==ATTRIBUTE_NODE)) {
                  int i=gotslot[3];
                  name=m_localNames.indexToString(i &amp; 0xFFFF);
                  if(name==null) name="";
                }
                return name;
        }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDocumentImpl.java" startline="1669" startcolumn="9" endline="1679" endcolumn="9">
public String getPrefix(int nodeHandle) {
                nodes.readSlot(nodeHandle, gotslot);
                short type = (short) (gotslot[0] &amp; 0xFFFF);
                String name = "";
                if((type==ELEMENT_NODE) || (type==ATTRIBUTE_NODE)) {
                  int i=gotslot[3];
                  name=m_prefixNames.indexToString(i &gt;&gt;16);
                  if(name==null) name="";
                }
                return name;
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/IntType.java" startline="78" startcolumn="5" endline="87" endcolumn="5">
public int distanceTo(Type type) {
        if (type == this) {
            return 0;
        }
        else if (type == Type.Real) {
            return 1;
        }
        else
            return Integer.MAX_VALUE;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/RealType.java" startline="71" startcolumn="5" endline="81" endcolumn="5">
public int distanceTo(Type type) {
        if (type == this) {
            return 0;
        }
        else if (type == Type.Int) {
            return 1;
        }
        else {
            return Integer.MAX_VALUE;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/AxesWalker.java" startline="554" startcolumn="5" endline="564" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
                return false;

      AxesWalker walker = (AxesWalker)expr;
      if(this.m_axis != walker.m_axis)
        return false;

      return true;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/FilterExprIterator.java" startline="204" startcolumn="3" endline="214" endcolumn="3">
public boolean deepEquals(Expression expr)
  {
    if (!super.deepEquals(expr))
      return false;

    FilterExprIterator fet = (FilterExprIterator) expr;
    if (!m_expr.deepEquals(fet.m_expr))
      return false;

    return true;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/AxesWalker.java" startline="554" startcolumn="5" endline="564" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
                return false;

      AxesWalker walker = (AxesWalker)expr;
      if(this.m_axis != walker.m_axis)
        return false;

      return true;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/FilterExprIteratorSimple.java" startline="289" startcolumn="3" endline="299" endcolumn="3">
public boolean deepEquals(Expression expr)
  {
    if (!super.deepEquals(expr))
      return false;

    FilterExprIteratorSimple fet = (FilterExprIteratorSimple) expr;
    if (!m_expr.deepEquals(fet.m_expr))
      return false;

    return true;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/AxesWalker.java" startline="554" startcolumn="5" endline="564" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
                return false;

      AxesWalker walker = (AxesWalker)expr;
      if(this.m_axis != walker.m_axis)
        return false;

      return true;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/FilterExprWalker.java" startline="338" startcolumn="5" endline="348" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
                return false;

      FilterExprWalker walker = (FilterExprWalker)expr;
      if(!m_expr.deepEquals(walker.m_expr))
        return false;

      return true;
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/Step.java" startline="88" startcolumn="5" endline="98" endcolumn="5">
public void setParser(Parser parser) {
        super.setParser(parser);
        if (_predicates != null) {
            final int n = _predicates.size();
            for (int i = 0; i &lt; n; i++) {
                final Predicate exp = (Predicate)_predicates.elementAt(i);
                exp.setParser(parser);
                exp.setParent(this);
            }
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/FunctionCall.java" startline="292" startcolumn="5" endline="303" endcolumn="5">
@Override
    public void setParser(Parser parser) {
        super.setParser(parser);
        if (_arguments != null) {
            final int n = _arguments.size();
            for (int i = 0; i &lt; n; i++) {
                final Expression exp = (Expression)_arguments.elementAt(i);
                exp.setParser(parser);
                exp.setParent(this);
            }
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/StepPattern.java" startline="87" startcolumn="5" endline="97" endcolumn="5">
public void setParser(Parser parser) {
        super.setParser(parser);
        if (_predicates != null) {
            final int n = _predicates.size();
            for (int i = 0; i &lt; n; i++) {
                final Predicate exp = (Predicate)_predicates.elementAt(i);
                exp.setParser(parser);
                exp.setParent(this);
            }
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/FunctionCall.java" startline="292" startcolumn="5" endline="303" endcolumn="5">
@Override
    public void setParser(Parser parser) {
        super.setParser(parser);
        if (_arguments != null) {
            final int n = _arguments.size();
            for (int i = 0; i &lt; n; i++) {
                final Expression exp = (Expression)_arguments.elementAt(i);
                exp.setParser(parser);
                exp.setParent(this);
            }
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1091" startcolumn="5" endline="1100" endcolumn="5">
public void endAttlist(Augmentations augs) throws XNIException {

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endAttlist(augs);
        if (fDTDHandler != null) {
            fDTDHandler.endAttlist(augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1284" startcolumn="5" endline="1296" endcolumn="5">
public void endConditional(Augmentations augs) throws XNIException {

        // set state
        fInDTDIgnore = false;

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endConditional(augs);
        if (fDTDHandler != null) {
            fDTDHandler.endConditional(augs);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1091" startcolumn="5" endline="1100" endcolumn="5">
public void endAttlist(Augmentations augs) throws XNIException {

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endAttlist(augs);
        if (fDTDHandler != null) {
            fDTDHandler.endAttlist(augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1485" startcolumn="5" endline="1495" endcolumn="5">
public void startGroup(Augmentations augs) throws XNIException {

        fMixed = false;
        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.startGroup(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.startGroup(augs);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1611" startcolumn="5" endline="1620" endcolumn="5">
public void endGroup(Augmentations augs) throws XNIException {

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endGroup(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.endGroup(augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1284" startcolumn="5" endline="1296" endcolumn="5">
public void endConditional(Augmentations augs) throws XNIException {

        // set state
        fInDTDIgnore = false;

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endConditional(augs);
        if (fDTDHandler != null) {
            fDTDHandler.endConditional(augs);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1611" startcolumn="5" endline="1620" endcolumn="5">
public void endGroup(Augmentations augs) throws XNIException {

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endGroup(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.endGroup(augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1485" startcolumn="5" endline="1495" endcolumn="5">
public void startGroup(Augmentations augs) throws XNIException {

        fMixed = false;
        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.startGroup(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.startGroup(augs);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1630" startcolumn="5" endline="1639" endcolumn="5">
public void endContentModel(Augmentations augs) throws XNIException {

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endContentModel(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.endContentModel(augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1284" startcolumn="5" endline="1296" endcolumn="5">
public void endConditional(Augmentations augs) throws XNIException {

        // set state
        fInDTDIgnore = false;

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endConditional(augs);
        if (fDTDHandler != null) {
            fDTDHandler.endConditional(augs);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1630" startcolumn="5" endline="1639" endcolumn="5">
public void endContentModel(Augmentations augs) throws XNIException {

        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.endContentModel(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.endContentModel(augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1485" startcolumn="5" endline="1495" endcolumn="5">
public void startGroup(Augmentations augs) throws XNIException {

        fMixed = false;
        // call handlers
        if(fDTDGrammar != null)
            fDTDGrammar.startGroup(augs);
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.startGroup(augs);
        }

    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1122" startcolumn="3" endline="1137" endcolumn="3">
public void setHost(String p_host) throws MalformedURIException
  {

    if (p_host == null || p_host.trim().length() == 0)
    {
      m_host = p_host;
      m_userinfo = null;
      m_port = -1;
    }
    else if (!isWellFormedAddress(p_host))
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_HOST_ADDRESS_NOT_WELLFORMED, null)); //"Host is not a well formed address!");
    }

    m_host = p_host;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1101" startcolumn="3" endline="1116" endcolumn="3">
public void setHost(String p_host) throws MalformedURIException
  {

    if (p_host == null || p_host.trim().length() == 0)
    {
      m_host = p_host;
      m_userinfo = null;
      m_port = -1;
    }
    else if (!isWellFormedAddress(p_host))
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_HOST_ADDRESS_NOT_WELLFORMED, null)); //"Host is not a well formed address!");
    }

    m_host = p_host;
  }
</source>
    </clone>
    <clone nlines="38" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="273" startcolumn="5" endline="310" endcolumn="5">
public void setStartAfter(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
        fStartContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fStartOffset = i;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(true);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="232" startcolumn="5" endline="271" endcolumn="5">
public void setStartBefore(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode) )
            {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }

        fStartContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fStartOffset = i-1;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(true);
        }
    }
</source>
    </clone>
    <clone nlines="38" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="273" startcolumn="5" endline="310" endcolumn="5">
public void setStartAfter(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
        fStartContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fStartOffset = i;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(true);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="312" startcolumn="5" endline="349" endcolumn="5">
public void setEndBefore(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
        fEndContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fEndOffset = i-1;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(false);
        }
    }
</source>
    </clone>
    <clone nlines="38" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="351" startcolumn="5" endline="388" endcolumn="5">
public void setEndAfter(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if( fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
        fEndContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fEndOffset = i;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(false);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="232" startcolumn="5" endline="271" endcolumn="5">
public void setStartBefore(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode) )
            {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }

        fStartContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fStartOffset = i-1;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(true);
        }
    }
</source>
    </clone>
    <clone nlines="38" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="351" startcolumn="5" endline="388" endcolumn="5">
public void setEndAfter(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if( fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
        fEndContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fEndOffset = i;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(false);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="312" startcolumn="5" endline="349" endcolumn="5">
public void setEndBefore(Node refNode)
        throws RangeException
    {
        if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
        fEndContainer = refNode.getParentNode();
        int i = 0;
        for (Node n = refNode; n!=null; n = n.getPreviousSibling()) {
            i++;
        }
        fEndOffset = i-1;

        // If one boundary-point of a Range is set to have a root container
        // other
        // than the current one for the Range, the Range should be collapsed to
        // the new position.
        // The start position of a Range should never be after the end position.
        if (getCommonAncestorContainer() == null
                || (fStartContainer == fEndContainer &amp;&amp; fEndOffset &lt; fStartOffset)) {
            collapse(false);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="684" startcolumn="5" endline="694" endcolumn="5">
public void writeCharacters(String data) throws XMLStreamException {
        try {
            if (fStartTagOpened) {
                closeStartTag();
            }

            writeXMLContent(data);
        } catch (IOException e) {
            throw new XMLStreamException(e);
        }
    }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="727" startcolumn="5" endline="737" endcolumn="5">
public void writeDTD(String dtd) throws XMLStreamException {
        try {
            if (fStartTagOpened) {
                closeStartTag();
            }

            fWriter.write(dtd);
        } catch (IOException e) {
            throw new XMLStreamException(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/functions/Function2Args.java" startline="80" startcolumn="3" endline="94" endcolumn="3">
public void setArg(Expression arg, int argNum)
          throws WrongNumberArgsException
  {

    // System.out.println("argNum: "+argNum);
    if (argNum == 0)
      super.setArg(arg, argNum);
    else if (1 == argNum)
    {
      m_arg1 = arg;
      arg.exprSetParent(this);
    }
    else
                  reportWrongNumberArgs();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/functions/Function3Args.java" startline="79" startcolumn="3" endline="92" endcolumn="3">
public void setArg(Expression arg, int argNum)
          throws WrongNumberArgsException
  {

    if (argNum &lt; 2)
      super.setArg(arg, argNum);
    else if (2 == argNum)
    {
      m_arg2 = arg;
      arg.exprSetParent(this);
    }
    else
                  reportWrongNumberArgs();
  }
</source>
    </clone>
    <clone nlines="19" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDValidator.java" startline="941" startcolumn="5" endline="959" endcolumn="5">
public void comment(XMLString text, Augmentations augs) throws XNIException {
        // fixes E15.1
        if (fPerformValidation &amp;&amp; fElementDepth &gt;= 0 &amp;&amp; fDTDGrammar != null) {
            fDTDGrammar.getElementDecl(fCurrentElementIndex, fTempElementDecl);
            if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_CONTENT_INVALID_SPECIFIED",
                                               new Object[]{ fCurrentElement.rawname,
                                                             "EMPTY",
                                                             "comment"},
                                               XMLErrorReporter.SEVERITY_ERROR);
            }
        }
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.comment(text, augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDValidator.java" startline="979" startcolumn="5" endline="998" endcolumn="5">
public void processingInstruction(String target, XMLString data, Augmentations augs)
    throws XNIException {

        // fixes E15.1
        if (fPerformValidation &amp;&amp; fElementDepth &gt;= 0 &amp;&amp; fDTDGrammar != null) {
            fDTDGrammar.getElementDecl(fCurrentElementIndex, fTempElementDecl);
            if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_CONTENT_INVALID_SPECIFIED",
                                               new Object[]{ fCurrentElement.rawname,
                                                             "EMPTY",
                                                             "processing instruction"},
                                               XMLErrorReporter.SEVERITY_ERROR);
            }
        }
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.processingInstruction(target, data, augs);
        }
    }
</source>
    </clone>
    <clone nlines="42" distance="3">
        <source file="com/sun/xml/internal/stream/dtd/nonvalidating/DTDGrammar.java" startline="863" startcolumn="9" endline="905" endcolumn="9">
public void put(String key, int value) {

            // REVISIT: Why +2? -Ac
            int hash = (hash(key)+2) % HASHTABLE_SIZE;
            Object[] bucket = fHashTable[hash];

            if (bucket == null) {
                bucket = new Object[1 + 2*INITIAL_BUCKET_SIZE];
                bucket[0] = new int[]{1};
                bucket[1] = key;
                bucket[2] = new int[]{value};
                fHashTable[hash] = bucket;
            } else {
                int count = ((int[])bucket[0])[0];
                int offset = 1 + 2*count;
                if (offset == bucket.length) {
                    int newSize = count + INITIAL_BUCKET_SIZE;
                    Object[] newBucket = new Object[1 + 2*newSize];
                    System.arraycopy(bucket, 0, newBucket, 0, offset);
                    bucket = newBucket;
                    fHashTable[hash] = bucket;
                }
                boolean found = false;
                int j=1;
                for (int i=0; i&lt;count; i++){
                    if ((String)bucket[j] == key) {
                        ((int[])bucket[j+1])[0] = value;
                        found = true;
                        break;
                    }
                    j += 2;
                }
                if (! found) {
                    bucket[offset++] = key;
                    bucket[offset]= new int[]{value};
                    ((int[])bucket[0])[0] = ++count;
                }

            }
            //System.out.println("put("+key+" -&gt; "+value+')');
            //System.out.println("get("+key+") -&gt; "+get(key));

        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar.java" startline="2708" startcolumn="9" endline="2749" endcolumn="9">
public void put(String key, int value) {

            int hash = (key.hashCode() &amp; 0x7FFFFFFF) % HASHTABLE_SIZE;
            Object[] bucket = fHashTable[hash];

            if (bucket == null) {
                bucket = new Object[1 + 2*INITIAL_BUCKET_SIZE];
                bucket[0] = new int[]{1};
                bucket[1] = key;
                bucket[2] = new int[]{value};
                fHashTable[hash] = bucket;
            } else {
                int count = ((int[])bucket[0])[0];
                int offset = 1 + 2*count;
                if (offset == bucket.length) {
                    int newSize = count + INITIAL_BUCKET_SIZE;
                    Object[] newBucket = new Object[1 + 2*newSize];
                    System.arraycopy(bucket, 0, newBucket, 0, offset);
                    bucket = newBucket;
                    fHashTable[hash] = bucket;
                }
                boolean found = false;
                int j=1;
                for (int i=0; i&lt;count; i++){
                    if ((String)bucket[j] == key) {
                        ((int[])bucket[j+1])[0] = value;
                        found = true;
                        break;
                    }
                    j += 2;
                }
                if (! found) {
                    bucket[offset++] = key;
                    bucket[offset]= new int[]{value};
                    ((int[])bucket[0])[0] = ++count;
                }

            }
            //System.out.println("put("+key+" -&gt; "+value+')');
            //System.out.println("get("+key+") -&gt; "+get(key));

        }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.java" startline="171" startcolumn="3" endline="182" endcolumn="3">
public final String toString() {
    StringBuffer buf = new StringBuffer("");

    for(int i=0; i &lt; local_variable_table_length; i++) {
      buf.append(local_variable_table[i].toString());

      if(i &lt; local_variable_table_length - 1)
        buf.append('\n');
    }

    return buf.toString();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTypeTable.java" startline="117" startcolumn="3" endline="128" endcolumn="3">
@Override
public final String toString() {
      StringBuilder buf = new StringBuilder();

    for(int i=0; i &lt; local_variable_type_table_length; i++) {
      buf.append(local_variable_type_table[i].toString());

      if(i &lt; local_variable_type_table_length - 1) buf.append('\n');
    }

    return buf.toString();
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="136" startcolumn="3" endline="146" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

    return INVALID_KEY;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="118" startcolumn="3" endline="128" endcolumn="3">
public final String get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(key))
        return m_map[i + 1];
    }

    return null;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="129" startcolumn="3" endline="139" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

        return INVALID_KEY;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="118" startcolumn="3" endline="128" endcolumn="3">
public final String get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(key))
        return m_map[i + 1];
    }

    return null;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="136" startcolumn="3" endline="146" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

    return INVALID_KEY;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="183" startcolumn="3" endline="193" endcolumn="3">
public final String getByValue(String val)
  {

    for (int i = 1; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(val))
        return m_map[i - 1];
    }

    return null;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="129" startcolumn="3" endline="139" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

        return INVALID_KEY;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="183" startcolumn="3" endline="193" endcolumn="3">
public final String getByValue(String val)
  {

    for (int i = 1; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(val))
        return m_map[i - 1];
    }

    return null;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="214" startcolumn="3" endline="224" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="233" startcolumn="3" endline="243" endcolumn="3">
public final boolean containsValue(String val)
  {

    for (int i = 1; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(val))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="170" startcolumn="3" endline="180" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="214" startcolumn="3" endline="224" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="170" startcolumn="3" endline="180" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="233" startcolumn="3" endline="243" endcolumn="3">
public final boolean containsValue(String val)
  {

    for (int i = 1; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(val))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="190" startcolumn="3" endline="200" endcolumn="3">
public final boolean contains(StringToStringTable s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(s))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="214" startcolumn="3" endline="224" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="190" startcolumn="3" endline="200" endcolumn="3">
public final boolean contains(StringToStringTable s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(s))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="233" startcolumn="3" endline="243" endcolumn="3">
public final boolean containsValue(String val)
  {

    for (int i = 1; i &lt; m_firstFree; i += 2)
    {
      if (m_map[i].equals(val))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="136" startcolumn="3" endline="146" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

    return INVALID_KEY;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="129" startcolumn="3" endline="139" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

        return INVALID_KEY;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="170" startcolumn="3" endline="180" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="136" startcolumn="3" endline="146" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

    return INVALID_KEY;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="170" startcolumn="3" endline="180" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="129" startcolumn="3" endline="139" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

        return INVALID_KEY;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="190" startcolumn="3" endline="200" endcolumn="3">
public final boolean contains(StringToStringTable s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(s))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="136" startcolumn="3" endline="146" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

    return INVALID_KEY;
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="190" startcolumn="3" endline="200" endcolumn="3">
public final boolean contains(StringToStringTable s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(s))
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="129" startcolumn="3" endline="139" endcolumn="3">
public final int get(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return m_values[i];
    }

        return INVALID_KEY;
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredElementDefinitionImpl.java" startline="85" startcolumn="5" endline="95" endcolumn="5">
protected void synchronizeData() {

        // no need to sync in the future
        needsSyncData(false);

        // fluff data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl)this.ownerDocument;
        name = ownerDocument.getNodeName(fNodeIndex);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredCDATASectionImpl.java" startline="97" startcolumn="5" endline="107" endcolumn="5">
protected void synchronizeData() {

        // no need to sync in the future
        needsSyncData(false);

        // fluff data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl) this.ownerDocument();
        data = ownerDocument.getNodeValueString(fNodeIndex);

    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredElementDefinitionImpl.java" startline="85" startcolumn="5" endline="95" endcolumn="5">
protected void synchronizeData() {

        // no need to sync in the future
        needsSyncData(false);

        // fluff data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl)this.ownerDocument;
        name = ownerDocument.getNodeName(fNodeIndex);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredCommentImpl.java" startline="78" startcolumn="5" endline="88" endcolumn="5">
protected void synchronizeData() {

        // no need to sync in the future
        needsSyncData(false);

        // fluff data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl) this.ownerDocument();
        data = ownerDocument.getNodeValueString(fNodeIndex);

    }
</source>
    </clone>
    <clone nlines="21" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XML11NSDTDValidator.java" startline="245" startcolumn="5" endline="265" endcolumn="5">
protected void endNamespaceScope(QName element, Augmentations augs, boolean isEmpty)
        throws XNIException {

        // bind element
        String eprefix = element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;
        element.uri = fNamespaceContext.getURI(eprefix);
        if (element.uri != null) {
            element.prefix = eprefix;
        }

        // call handlers
        if (fDocumentHandler != null) {
            if (!isEmpty) {
                fDocumentHandler.endElement(element, augs);
            }
        }

        // pop context
        fNamespaceContext.popContext();

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNamespaceBinder.java" startline="861" startcolumn="5" endline="881" endcolumn="5">
protected void handleEndElement(QName element, Augmentations augs, boolean isEmpty)
        throws XNIException {

        // bind element
        String eprefix = element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;
        element.uri = fNamespaceContext.getURI(eprefix);
        if (element.uri != null) {
            element.prefix = eprefix;
        }

        // call handlers
        if (fDocumentHandler != null &amp;&amp; !fOnlyPassPrefixMappingEvents) {
            if (!isEmpty) {
                fDocumentHandler.endElement(element, augs);
            }
        }

        // pop context
        fNamespaceContext.popContext();

    }
</source>
    </clone>
    <clone nlines="21" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLNSDTDValidator.java" startline="253" startcolumn="5" endline="273" endcolumn="5">
protected void endNamespaceScope(QName element, Augmentations augs, boolean isEmpty)
        throws XNIException {

        // bind element
        String eprefix = element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;
        element.uri = fNamespaceContext.getURI(eprefix);
        if (element.uri != null) {
            element.prefix = eprefix;
        }

        // call handlers
        if (fDocumentHandler != null) {
            if (!isEmpty) {
                fDocumentHandler.endElement(element, augs);
            }
        }

        // pop context
        fNamespaceContext.popContext();

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNamespaceBinder.java" startline="861" startcolumn="5" endline="881" endcolumn="5">
protected void handleEndElement(QName element, Augmentations augs, boolean isEmpty)
        throws XNIException {

        // bind element
        String eprefix = element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;
        element.uri = fNamespaceContext.getURI(eprefix);
        if (element.uri != null) {
            element.prefix = eprefix;
        }

        // call handlers
        if (fDocumentHandler != null &amp;&amp; !fOnlyPassPrefixMappingEvents) {
            if (!isEmpty) {
                fDocumentHandler.endElement(element, augs);
            }
        }

        // pop context
        fNamespaceContext.popContext();

    }
</source>
    </clone>
    <clone nlines="24" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/DTDGrammar.java" startline="2458" startcolumn="5" endline="2482" endcolumn="5">
private void ensureElementDeclCapacity(int chunk) {
        if (chunk &gt;= fElementDeclName.length) {
            fElementDeclIsExternal = resize(fElementDeclIsExternal,
                                     fElementDeclIsExternal.length * 2);

            fElementDeclName = resize(fElementDeclName, fElementDeclName.length * 2);
            fElementDeclType = resize(fElementDeclType, fElementDeclType.length * 2);
            fElementDeclContentModelValidator = resize(fElementDeclContentModelValidator, fElementDeclContentModelValidator.length * 2);
            fElementDeclContentSpecIndex = resize(fElementDeclContentSpecIndex,fElementDeclContentSpecIndex.length * 2);
            fElementDeclFirstAttributeDeclIndex = resize(fElementDeclFirstAttributeDeclIndex, fElementDeclFirstAttributeDeclIndex.length * 2);
            fElementDeclLastAttributeDeclIndex = resize(fElementDeclLastAttributeDeclIndex, fElementDeclLastAttributeDeclIndex.length * 2);
        }
        else if (fElementDeclName[chunk] != null) {
            return;
        }

        fElementDeclIsExternal[chunk] = new int[CHUNK_SIZE];
        fElementDeclName[chunk] = new QName[CHUNK_SIZE];
        fElementDeclType[chunk] = new short[CHUNK_SIZE];
        fElementDeclContentModelValidator[chunk] = new ContentModelValidator[CHUNK_SIZE];
        fElementDeclContentSpecIndex[chunk] = new int[CHUNK_SIZE];
        fElementDeclFirstAttributeDeclIndex[chunk] = new int[CHUNK_SIZE];
        fElementDeclLastAttributeDeclIndex[chunk] = new int[CHUNK_SIZE];
        return;
    }
</source>
        <source file="com/sun/xml/internal/stream/dtd/nonvalidating/DTDGrammar.java" startline="769" startcolumn="5" endline="792" endcolumn="5">
private void ensureAttributeDeclCapacity(int chunk) {

        if (chunk &gt;= fAttributeDeclName.length) {
            fAttributeDeclName = resize(fAttributeDeclName, fAttributeDeclName.length * 2);
            fAttributeDeclType = resize(fAttributeDeclType, fAttributeDeclType.length * 2);
            fAttributeDeclEnumeration = resize(fAttributeDeclEnumeration, fAttributeDeclEnumeration.length * 2);
            fAttributeDeclDefaultType = resize(fAttributeDeclDefaultType, fAttributeDeclDefaultType.length * 2);
            fAttributeDeclDefaultValue = resize(fAttributeDeclDefaultValue, fAttributeDeclDefaultValue.length * 2);
            fAttributeDeclNonNormalizedDefaultValue = resize(fAttributeDeclNonNormalizedDefaultValue, fAttributeDeclNonNormalizedDefaultValue.length * 2);
            fAttributeDeclNextAttributeDeclIndex = resize(fAttributeDeclNextAttributeDeclIndex, fAttributeDeclNextAttributeDeclIndex.length * 2);
        }
        else if (fAttributeDeclName[chunk] != null) {
            return;
        }

        fAttributeDeclName[chunk] = new QName[CHUNK_SIZE];
        fAttributeDeclType[chunk] = new short[CHUNK_SIZE];
        fAttributeDeclEnumeration[chunk] = new String[CHUNK_SIZE][];
        fAttributeDeclDefaultType[chunk] = new short[CHUNK_SIZE];
        fAttributeDeclDefaultValue[chunk] = new String[CHUNK_SIZE];
        fAttributeDeclNonNormalizedDefaultValue[chunk] = new String[CHUNK_SIZE];
        fAttributeDeclNextAttributeDeclIndex[chunk] = new int[CHUNK_SIZE];
        return;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/xni/parser/XMLParseException.java" startline="70" startcolumn="5" endline="81" endcolumn="5">
public XMLParseException(XMLLocator locator, String message) {
        super(message);
        if (locator != null) {
            fPublicId = locator.getPublicId();
            fLiteralSystemId = locator.getLiteralSystemId();
            fExpandedSystemId = locator.getExpandedSystemId();
            fBaseSystemId = locator.getBaseSystemId();
            fLineNumber = locator.getLineNumber();
            fColumnNumber = locator.getColumnNumber();
            fCharacterOffset = locator.getCharacterOffset();
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xni/parser/XMLParseException.java" startline="84" startcolumn="5" endline="96" endcolumn="5">
public XMLParseException(XMLLocator locator,
                             String message, Exception exception) {
        super(message, exception);
        if (locator != null) {
            fPublicId = locator.getPublicId();
            fLiteralSystemId = locator.getLiteralSystemId();
            fExpandedSystemId = locator.getExpandedSystemId();
            fBaseSystemId = locator.getBaseSystemId();
            fLineNumber = locator.getLineNumber();
            fColumnNumber = locator.getColumnNumber();
            fCharacterOffset = locator.getCharacterOffset();
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="1364" startcolumn="5" endline="1375" endcolumn="5">
public int next()
    {

      int next = _currentNode;

      int pos = --m_ancestorsPos;

      _currentNode = (pos &gt;= 0) ? m_ancestors[m_ancestorsPos]
                                : DTM.NULL;

      return returnNode(next);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1712" startcolumn="5" endline="1723" endcolumn="5">
public int next()
    {

      int next = _currentNode;

      int pos = --m_ancestorsPos;

      _currentNode = (pos &gt;= 0) ? m_ancestors.elementAt(m_ancestorsPos)
                                : DTM.NULL;

      return returnNode(next);
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="663" startcolumn="5" endline="676" endcolumn="5">
public int getAttributeCount() {
        //xxx: recognize SAX properties namespace, namespace-prefix to get XML Namespace declarations
        //does length includes namespace declarations ?

        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getLength() ;
        } else{
            throw new java.lang.IllegalStateException( "Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeCount()") ;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="715" startcolumn="5" endline="726" endcolumn="5">
public String getAttributeNamespace(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getURI(index);
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeNamespace()") ;
        }

    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="663" startcolumn="5" endline="676" endcolumn="5">
public int getAttributeCount() {
        //xxx: recognize SAX properties namespace, namespace-prefix to get XML Namespace declarations
        //does length includes namespace declarations ?

        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getLength() ;
        } else{
            throw new java.lang.IllegalStateException( "Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeCount()") ;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="734" startcolumn="5" endline="744" endcolumn="5">
public String getAttributePrefix(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getPrefix(index);
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributePrefix()") ;
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="663" startcolumn="5" endline="676" endcolumn="5">
public int getAttributeCount() {
        //xxx: recognize SAX properties namespace, namespace-prefix to get XML Namespace declarations
        //does length includes namespace declarations ?

        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getLength() ;
        } else{
            throw new java.lang.IllegalStateException( "Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeCount()") ;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="773" startcolumn="5" endline="784" endcolumn="5">
public String getAttributeType(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getType(index) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeType()") ;
        }

    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="663" startcolumn="5" endline="676" endcolumn="5">
public int getAttributeCount() {
        //xxx: recognize SAX properties namespace, namespace-prefix to get XML Namespace declarations
        //does length includes namespace declarations ?

        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getLength() ;
        } else{
            throw new java.lang.IllegalStateException( "Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeCount()") ;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="792" startcolumn="5" endline="803" endcolumn="5">
public String getAttributeValue(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getValue(index) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeValue()") ;
        }

    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="405" startcolumn="5" endline="416" endcolumn="4">
public int getTextLength() {
        if( fEventType == XMLEvent.CHARACTERS || fEventType == XMLEvent.COMMENT
                 || fEventType == XMLEvent.CDATA || fEventType == XMLEvent.SPACE){
             return fScanner.getCharacterData().length;
         } else{
             throw new IllegalStateException("Current state = " + getEventTypeString(fEventType)
             + " is not among the states " + getEventTypeString(XMLEvent.CHARACTERS) + " , "
                     + getEventTypeString(XMLEvent.COMMENT) + " , " + getEventTypeString(XMLEvent.CDATA)
                     + " , " + getEventTypeString(XMLEvent.SPACE) +" valid for getTextLength() " ) ;
         }

   }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="390" startcolumn="5" endline="400" endcolumn="5">
public char[] getTextCharacters() {
        if( fEventType == XMLEvent.CHARACTERS || fEventType == XMLEvent.COMMENT
                 || fEventType == XMLEvent.CDATA || fEventType == XMLEvent.SPACE){
             return fScanner.getCharacterData().ch;
         } else{
             throw new IllegalStateException("Current state = " + getEventTypeString(fEventType)
             + " is not among the states " + getEventTypeString(XMLEvent.CHARACTERS) + " , "
                     + getEventTypeString(XMLEvent.COMMENT) + " , " + getEventTypeString(XMLEvent.CDATA)
                     + " , " + getEventTypeString(XMLEvent.SPACE) +" valid for getTextCharacters() " ) ;
         }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="421" startcolumn="5" endline="430" endcolumn="5">
public int getTextStart() {
        if( fEventType == XMLEvent.CHARACTERS || fEventType == XMLEvent.COMMENT || fEventType == XMLEvent.CDATA || fEventType == XMLEvent.SPACE){
             return  fScanner.getCharacterData().offset;
         } else{
             throw new IllegalStateException("Current state = " + getEventTypeString(fEventType)
             + " is not among the states " + getEventTypeString(XMLEvent.CHARACTERS) + " , "
                     + getEventTypeString(XMLEvent.COMMENT) + " , " + getEventTypeString(XMLEvent.CDATA)
                     + " , " + getEventTypeString(XMLEvent.SPACE) +" valid for getTextStart() " ) ;
         }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="390" startcolumn="5" endline="400" endcolumn="5">
public char[] getTextCharacters() {
        if( fEventType == XMLEvent.CHARACTERS || fEventType == XMLEvent.COMMENT
                 || fEventType == XMLEvent.CDATA || fEventType == XMLEvent.SPACE){
             return fScanner.getCharacterData().ch;
         } else{
             throw new IllegalStateException("Current state = " + getEventTypeString(fEventType)
             + " is not among the states " + getEventTypeString(XMLEvent.CHARACTERS) + " , "
                     + getEventTypeString(XMLEvent.COMMENT) + " , " + getEventTypeString(XMLEvent.CDATA)
                     + " , " + getEventTypeString(XMLEvent.SPACE) +" valid for getTextCharacters() " ) ;
         }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xpath/internal/axes/OneStepIterator.java" startline="137" startcolumn="3" endline="148" endcolumn="3">
public Object clone() throws CloneNotSupportedException
  {
    // Do not access the location path itterator during this operation!

    OneStepIterator clone = (OneStepIterator) super.clone();

    if(m_iterator != null)
    {
      clone.m_iterator = m_iterator.cloneIterator();
    }
    return clone;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/WalkingIterator.java" startline="113" startcolumn="3" endline="126" endcolumn="3">
public Object clone() throws CloneNotSupportedException
  {

    WalkingIterator clone = (WalkingIterator) super.clone();

    //    clone.m_varStackPos = this.m_varStackPos;
    //    clone.m_varStackContext = this.m_varStackContext;
    if (null != m_firstWalker)
    {
      clone.m_firstWalker = m_firstWalker.cloneDeep(clone, null);
    }

    return clone;
  }
</source>
    </clone>
    <clone nlines="21" distance="5">
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="2071" startcolumn="9" endline="2091" endcolumn="9">
public String getPrefix(String uri) {
            String prefix = null;

            if (uri != null) {
                uri = fSymbolTable.addSymbol(uri);
            }

            if (internalContext != null) {
                prefix = internalContext.getPrefix(uri);

                if (prefix != null) {
                    return prefix;
                }
            }

            if (userContext != null) {
                return userContext.getPrefix(uri);
            }

            return null;
        }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="2047" startcolumn="9" endline="2069" endcolumn="9">
public String getNamespaceURI(String prefix) {
            String uri = null;

            if (prefix != null) {
                prefix = fSymbolTable.addSymbol(prefix);
            }

            if (internalContext != null) {
                uri = internalContext.getURI(prefix);

                if (uri != null) {
                    return uri;
                }
            }

            if (userContext != null) {
                uri = userContext.getNamespaceURI(prefix);

                return uri;
            }

            return null;
        }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="308" startcolumn="3" endline="320" endcolumn="3">
public int addInteger(int n) {
    int  ret;

    if((ret = lookupInteger(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantInteger(n);

    return ret;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="424" startcolumn="3" endline="437" endcolumn="3">
public int addLong(long n) {
    int  ret;

    if((ret = lookupLong(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index] = new ConstantLong(n);
    index += 2;   // Wastes one entry according to spec

    return ret;
  }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="308" startcolumn="3" endline="320" endcolumn="3">
public int addInteger(int n) {
    int  ret;

    if((ret = lookupInteger(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantInteger(n);

    return ret;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="466" startcolumn="3" endline="479" endcolumn="3">
public int addDouble(double n) {
    int  ret;

    if((ret = lookupDouble(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index] = new ConstantDouble(n);
    index += 2;   // Wastes one entry according to spec

    return ret;
  }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="349" startcolumn="3" endline="361" endcolumn="3">
public int addFloat(float n) {
    int  ret;

    if((ret = lookupFloat(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantFloat(n);

    return ret;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="424" startcolumn="3" endline="437" endcolumn="3">
public int addLong(long n) {
    int  ret;

    if((ret = lookupLong(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index] = new ConstantLong(n);
    index += 2;   // Wastes one entry according to spec

    return ret;
  }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="349" startcolumn="3" endline="361" endcolumn="3">
public int addFloat(float n) {
    int  ret;

    if((ret = lookupFloat(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantFloat(n);

    return ret;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="466" startcolumn="3" endline="479" endcolumn="3">
public int addDouble(double n) {
    int  ret;

    if((ret = lookupDouble(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index] = new ConstantDouble(n);
    index += 2;   // Wastes one entry according to spec

    return ret;
  }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/validation/SchemaFactoryFinder.java" startline="141" startcolumn="5" endline="152" endcolumn="5">
public SchemaFactory newFactory(String schemaLanguage) {
        if(schemaLanguage==null) {
            throw new NullPointerException();
        }
        SchemaFactory f = _newFactory(schemaLanguage);
        if (f != null) {
            debugPrintln("factory '" + f.getClass().getName() + "' was found for " + schemaLanguage);
        } else {
            debugPrintln("unable to find a factory for " + schemaLanguage);
        }
        return f;
    }
</source>
        <source file="javax/xml/xpath/XPathFactoryFinder.java" startline="134" startcolumn="5" endline="145" endcolumn="5">
public XPathFactory newFactory(String uri) throws XPathFactoryConfigurationException {
        if (uri == null) {
            throw new NullPointerException();
        }
        XPathFactory f = _newFactory(uri);
        if (f != null) {
            debugPrintln("factory '" + f.getClass().getName() + "' was found for " + uri);
        } else {
            debugPrintln("unable to find a factory for " + uri);
        }
        return f;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="252" startcolumn="5" endline="263" endcolumn="5">
public String getAttribute(String name) {

        if (needsSyncData()) {
            synchronizeData();
        }
        if (attributes == null) {
            return "";
        }
        Attr attr = (Attr)(attributes.getNamedItem(name));
        return (attr == null) ? "" : attr.getValue();

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="574" startcolumn="5" endline="587" endcolumn="5">
public String getAttributeNS(String namespaceURI, String localName) {

        if (needsSyncData()) {
            synchronizeData();
        }

        if (attributes == null) {
            return "";
        }

        Attr attr = (Attr)(attributes.getNamedItemNS(namespaceURI, localName));
        return (attr == null) ? "" : attr.getValue();

    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/Base64BinaryDV.java" startline="72" startcolumn="9" endline="84" endcolumn="9">
public boolean equals(Object obj) {
            if (!(obj instanceof XBase64))
                return false;
            byte[] odata = ((XBase64)obj).data;
            int len = data.length;
            if (len != odata.length)
                return false;
            for (int i = 0; i &lt; len; i++) {
                if (data[i] != odata[i])
                    return false;
            }
            return true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/ListDV.java" startline="80" startcolumn="9" endline="96" endcolumn="9">
public boolean equals(Object obj) {
            if (!(obj instanceof ListData))
                return false;
            Object[] odata = ((ListData)obj).data;

            int count = data.length;
            if (count != odata.length)
                return false;

            for (int i = 0 ; i &lt; count ; i++) {
                if (!data[i].equals(odata[i]))
                    return false;
            }//end of loop

            //everything went fine.
            return true;
        }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/HexBinaryDV.java" startline="69" startcolumn="9" endline="81" endcolumn="9">
public boolean equals(Object obj) {
            if (!(obj instanceof XHex))
                return false;
            byte[] odata = ((XHex)obj).data;
            int len = data.length;
            if (len != odata.length)
                return false;
            for (int i = 0; i &lt; len; i++) {
                if (data[i] != odata[i])
                    return false;
            }
            return true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/ListDV.java" startline="80" startcolumn="9" endline="96" endcolumn="9">
public boolean equals(Object obj) {
            if (!(obj instanceof ListData))
                return false;
            Object[] odata = ((ListData)obj).data;

            int count = data.length;
            if (count != odata.length)
                return false;

            for (int i = 0 ; i &lt; count ; i++) {
                if (!data[i].equals(odata[i]))
                    return false;
            }//end of loop

            //everything went fine.
            return true;
        }
</source>
    </clone>
    <clone nlines="23" distance="4">
        <source file="com/sun/org/apache/xpath/internal/functions/FunctionMultiArgs.java" startline="212" startcolumn="5" endline="237" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
            return false;

      FunctionMultiArgs fma = (FunctionMultiArgs) expr;
      if (null != m_args)
      {
        int n = m_args.length;
        if ((null == fma) || (fma.m_args.length != n))
              return false;

        for (int i = 0; i &lt; n; i++)
        {
          if (!m_args[i].deepEquals(fma.m_args[i]))
                return false;
        }

      }
      else if (null != fma.m_args)
      {
          return false;
      }

      return true;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="570" startcolumn="5" endline="592" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
            return false;

      PredicatedNodeTest pnt = (PredicatedNodeTest) expr;
      if (null != m_predicates)
      {

        int n = m_predicates.length;
        if ((null == pnt.m_predicates) || (pnt.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(pnt.m_predicates[i]))
                return false;
        }
      }
      else if (null != pnt.m_predicates)
              return false;

      return true;
    }
</source>
    </clone>
    <clone nlines="26" distance="2">
        <source file="com/sun/org/apache/xpath/internal/functions/FunctionMultiArgs.java" startline="212" startcolumn="5" endline="237" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
            return false;

      FunctionMultiArgs fma = (FunctionMultiArgs) expr;
      if (null != m_args)
      {
        int n = m_args.length;
        if ((null == fma) || (fma.m_args.length != n))
              return false;

        for (int i = 0; i &lt; n; i++)
        {
          if (!m_args[i].deepEquals(fma.m_args[i]))
                return false;
        }

      }
      else if (null != fma.m_args)
      {
          return false;
      }

      return true;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="557" startcolumn="5" endline="583" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
            return false;

      UnionPathIterator upi = (UnionPathIterator) expr;

      if (null != m_exprs)
      {
        int n = m_exprs.length;

        if((null == upi.m_exprs) || (upi.m_exprs.length != n))
                return false;

        for (int i = 0; i &lt; n; i++)
        {
          if(!m_exprs[i].deepEquals(upi.m_exprs[i]))
                return false;
        }
      }
      else if (null != upi.m_exprs)
      {
          return false;
      }

      return true;
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="370" startcolumn="5" endline="383" endcolumn="5">
public TransformerHandler newTransformerHandler(Source src)
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler(src);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="287" startcolumn="5" endline="301" endcolumn="5">
public Transformer newTransformer(Source source) throws
        TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer(source);
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="370" startcolumn="5" endline="383" endcolumn="5">
public TransformerHandler newTransformerHandler(Source src)
        throws TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        return _xalanFactory.newTransformerHandler(src);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="309" startcolumn="5" endline="323" endcolumn="5">
public Templates newTemplates(Source source)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xsltcFactory;
        return _currFactory.newTemplates(source);
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="391" startcolumn="5" endline="404" endcolumn="5">
public TransformerHandler newTransformerHandler(Templates templates)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTransformerHandler(templates);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="287" startcolumn="5" endline="301" endcolumn="5">
public Transformer newTransformer(Source source) throws
        TransformerConfigurationException
    {
        if (_xalanFactory == null) {
            createXalanTransformerFactory();
        }
        if (_errorlistener != null) {
            _xalanFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xalanFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xalanFactory;
        return _currFactory.newTransformer(source);
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="391" startcolumn="5" endline="404" endcolumn="5">
public TransformerHandler newTransformerHandler(Templates templates)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        return _xsltcFactory.newTransformerHandler(templates);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/SmartTransformerFactoryImpl.java" startline="309" startcolumn="5" endline="323" endcolumn="5">
public Templates newTemplates(Source source)
        throws TransformerConfigurationException
    {
        if (_xsltcFactory == null) {
            createXSLTCTransformerFactory();
        }
        if (_errorlistener != null) {
            _xsltcFactory.setErrorListener(_errorlistener);
        }
        if (_uriresolver != null) {
            _xsltcFactory.setURIResolver(_uriresolver);
        }
        _currFactory = _xsltcFactory;
        return _currFactory.newTemplates(source);
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/UnsupportedElement.java" startline="114" startcolumn="5" endline="123" endcolumn="5">
public Type typeCheck(SymbolTable stable) throws TypeCheckError {
        if (_fallbacks != null) {
            int count = _fallbacks.size();
            for (int i = 0; i &lt; count; i++) {
                Fallback fallback = (Fallback)_fallbacks.elementAt(i);
                fallback.typeCheck(stable);
            }
        }
        return Type.Void;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/ProcessingInstructionPattern.java" startline="81" startcolumn="5" endline="91" endcolumn="5">
public Type typeCheck(SymbolTable stable) throws TypeCheckError {
        if (hasPredicates()) {
            // Type check all the predicates (e -&gt; position() = e)
            final int n = _predicates.size();
            for (int i = 0; i &lt; n; i++) {
                final Predicate pred = (Predicate)_predicates.elementAt(i);
                pred.typeCheck(stable);
            }
        }
        return Type.NodeSet;
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseTraversers.java" startline="1163" startcolumn="5" endline="1175" endcolumn="5">
public int first(int current, int expandedTypeID)
    {
                        // Compute in ID space
      current = makeNodeIdentity(current);

      while (NULL != (current = m_parent.elementAt(current)))
      {
        if (m_exptype.elementAt(current) == expandedTypeID)
          return makeNodeHandle(current);
      }

      return NULL;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseTraversers.java" startline="229" startcolumn="5" endline="241" endcolumn="5">
public int next(int context, int current, int expandedTypeID)
    {
                        // Process using identities
      current = makeNodeIdentity(current);

      while (DTM.NULL != (current = m_parent.elementAt(current)))
      {
        if (m_exptype.elementAt(current) == expandedTypeID)
          return makeNodeHandle(current);
      }

      return NULL;
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/identity/IdentityConstraint.java" startline="237" startcolumn="5" endline="248" endcolumn="5">
public void addAnnotation(XSAnnotationImpl annotation) {
        if(annotation == null)
            return;
        if(fAnnotations == null) {
            fAnnotations = new XSAnnotationImpl[2];
        } else if(fNumAnnotations == fAnnotations.length) {
            XSAnnotationImpl[] newArray = new XSAnnotationImpl[fNumAnnotations &lt;&lt; 1];
            System.arraycopy(fAnnotations, 0, newArray, 0, fNumAnnotations);
            fAnnotations = newArray;
        }
        fAnnotations[fNumAnnotations++] = annotation;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/SchemaGrammar.java" startline="1665" startcolumn="5" endline="1678" endcolumn="5">
public void addAnnotation(XSAnnotationImpl annotation) {
        if (annotation == null) {
            return;
        }
        if (fAnnotations == null) {
            fAnnotations = new XSAnnotationImpl[2];
        }
        else if (fNumAnnotations == fAnnotations.length) {
            XSAnnotationImpl[] newArray = new XSAnnotationImpl[fNumAnnotations &lt;&lt; 1];
            System.arraycopy(fAnnotations, 0, newArray, 0, fNumAnnotations);
            fAnnotations = newArray;
        }
        fAnnotations[fNumAnnotations++] = annotation;
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="490" startcolumn="3" endline="507" endcolumn="3">
public void addNodes(NodeIterator iterator)
  {

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE, null)); //"This NodeSet is not mutable!");

    if (null != iterator)  // defensive to fix a bug that Sanjiva reported.
    {
      Node obj;

      while (null != (obj = iterator.nextNode()))
      {
        addElement(obj);
      }
    }

    // checkDups();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSetDTM.java" startline="648" startcolumn="3" endline="665" endcolumn="3">
public void addNodes(DTMIterator iterator)
  {

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    if (null != iterator)  // defensive to fix a bug that Sanjiva reported.
    {
      int obj;

      while (DTM.NULL != (obj = iterator.nextNode()))
      {
        addElement(obj);
      }
    }

    // checkDups();
  }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1040" startcolumn="3" endline="1054" endcolumn="3">
public void setScheme(String p_scheme) throws MalformedURIException
  {

    if (p_scheme == null)
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_SCHEME_FROM_NULL_STRING, null)); //"Cannot set scheme from null string!");
    }

    if (!isConformantSchemeName(p_scheme))
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_SCHEME_NOT_CONFORMANT, null)); //"The scheme is not conformant.");
    }

    m_scheme = p_scheme.toLowerCase();
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1019" startcolumn="3" endline="1033" endcolumn="3">
public void setScheme(String p_scheme) throws MalformedURIException
  {

    if (p_scheme == null)
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_FROM_NULL_STRING, null)); //"Cannot set scheme from null string!");
    }

    if (!isConformantSchemeName(p_scheme))
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_NOT_CONFORMANT, null)); //"The scheme is not conformant.");
    }

    m_scheme = p_scheme.toLowerCase();
  }
</source>
    </clone>
    <clone nlines="47" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1211" startcolumn="3" endline="1257" endcolumn="3">
public void appendPath(String p_addToPath) throws MalformedURIException
  {

    if (p_addToPath == null || p_addToPath.trim().length() == 0)
    {
      return;
    }

    if (!isURIString(p_addToPath))
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR, new Object[]{p_addToPath})); //"Path contains invalid character!");
    }

    if (m_path == null || m_path.trim().length() == 0)
    {
      if (p_addToPath.startsWith("/"))
      {
        m_path = p_addToPath;
      }
      else
      {
        m_path = "/" + p_addToPath;
      }
    }
    else if (m_path.endsWith("/"))
    {
      if (p_addToPath.startsWith("/"))
      {
        m_path = m_path.concat(p_addToPath.substring(1));
      }
      else
      {
        m_path = m_path.concat(p_addToPath);
      }
    }
    else
    {
      if (p_addToPath.startsWith("/"))
      {
        m_path = m_path.concat(p_addToPath);
      }
      else
      {
        m_path = m_path.concat("/" + p_addToPath);
      }
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1190" startcolumn="3" endline="1236" endcolumn="3">
public void appendPath(String p_addToPath) throws MalformedURIException
  {

    if (p_addToPath == null || p_addToPath.trim().length() == 0)
    {
      return;
    }

    if (!isURIString(p_addToPath))
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR, new Object[]{p_addToPath})); //"Path contains invalid character!");
    }

    if (m_path == null || m_path.trim().length() == 0)
    {
      if (p_addToPath.startsWith("/"))
      {
        m_path = p_addToPath;
      }
      else
      {
        m_path = "/" + p_addToPath;
      }
    }
    else if (m_path.endsWith("/"))
    {
      if (p_addToPath.startsWith("/"))
      {
        m_path = m_path.concat(p_addToPath.substring(1));
      }
      else
      {
        m_path = m_path.concat(p_addToPath);
      }
    }
    else
    {
      if (p_addToPath.startsWith("/"))
      {
        m_path = m_path.concat(p_addToPath);
      }
      else
      {
        m_path = m_path.concat("/" + p_addToPath);
      }
    }
  }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="1838" startcolumn="9" endline="1855" endcolumn="9">
public void namespaceAfterStartElement(String prefix, String uri)
            throws SAXException
        {
            // hack for XSLTC with finding URI for default namespace
            if (m_elemContext.m_elementURI == null)
            {
                String prefix1 = getPrefixPart(m_elemContext.m_elementName);
                if (prefix1 == null &amp;&amp; EMPTYSTRING.equals(prefix))
                {
                    // the elements URI is not known yet, and it
                    // doesn't have a prefix, and we are currently
                    // setting the uri for prefix "", so we have
                    // the uri for the element... lets remember it
                    m_elemContext.m_elementURI = uri;
                }
            }
            startPrefixMapping(prefix,uri,false);
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLSAXHandler.java" startline="699" startcolumn="5" endline="718" endcolumn="5">
public void namespaceAfterStartElement(
        final String prefix,
        final String uri)
        throws SAXException
    {
        // hack for XSLTC with finding URI for default namespace
        if (m_elemContext.m_elementURI == null)
        {
            String prefix1 = getPrefixPart(m_elemContext.m_elementName);
            if (prefix1 == null &amp;&amp; EMPTYSTRING.equals(prefix))
            {
                // the elements URI is not known yet, and it
                // doesn't have a prefix, and we are currently
                // setting the uri for prefix "", so we have
                // the uri for the element... lets remember it
                m_elemContext.m_elementURI = uri;
            }
        }
        startPrefixMapping(prefix,uri,false);
    }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="1838" startcolumn="9" endline="1855" endcolumn="9">
public void namespaceAfterStartElement(String prefix, String uri)
            throws SAXException
        {
            // hack for XSLTC with finding URI for default namespace
            if (m_elemContext.m_elementURI == null)
            {
                String prefix1 = getPrefixPart(m_elemContext.m_elementName);
                if (prefix1 == null &amp;&amp; EMPTYSTRING.equals(prefix))
                {
                    // the elements URI is not known yet, and it
                    // doesn't have a prefix, and we are currently
                    // setting the uri for prefix "", so we have
                    // the uri for the element... lets remember it
                    m_elemContext.m_elementURI = uri;
                }
            }
            startPrefixMapping(prefix,uri,false);
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLStream.java" startline="542" startcolumn="5" endline="564" endcolumn="5">
public void namespaceAfterStartElement(
        final String prefix,
        final String uri)
        throws SAXException
    {

        // hack for XSLTC with finding URI for default namespace
        if (m_elemContext.m_elementURI == null)
        {
            String prefix1 = getPrefixPart(m_elemContext.m_elementName);
            if (prefix1 == null &amp;&amp; EMPTYSTRING.equals(prefix))
            {
                // the elements URI is not known yet, and it
                // doesn't have a prefix, and we are currently
                // setting the uri for prefix "", so we have
                // the uri for the element... lets remember it
                m_elemContext.m_elementURI = uri;
            }
        }
        startPrefixMapping(prefix,uri,false);
        return;

    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="908" startcolumn="5" endline="923" endcolumn="5">
public void internalEntityDecl( String name, String value )
        throws SAXException
    {
        try {
        _printer.enterDTD();
        _printer.printText( "&lt;!ENTITY " );
        _printer.printText( name );
        _printer.printText( " \"" );
        printEscaped( value );
        _printer.printText( "\"&gt;" );
        if ( _indenting )
            _printer.breakLine();
        } catch ( IOException except ) {
            throw new SAXException( except );
        }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="860" startcolumn="5" endline="875" endcolumn="5">
public void elementDecl( String name, String model )
        throws SAXException
    {
        try {
        _printer.enterDTD();
        _printer.printText( "&lt;!ELEMENT " );
        _printer.printText( name );
        _printer.printText( ' ' );
        _printer.printText( model );
        _printer.printText( '&gt;' );
        if ( _indenting )
            _printer.breakLine();
        } catch ( IOException except ) {
            throw new SAXException( except );
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="424" startcolumn="5" endline="439" endcolumn="5">
public void endGeneralEntity(String name, Augmentations augs) throws XNIException {

        try {
            // Only report endEntity if this entity was actually read.
            if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // SAX2 extension
                if (fLexicalHandler != null) {
                    fLexicalHandler.endEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="854" startcolumn="5" endline="869" endcolumn="5">
public void endParameterEntity(String name, Augmentations augs) throws XNIException {

        try {
            // Only report endEntity if this entity was actually read.
            if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // SAX2 extension
                if (fLexicalHandler != null &amp;&amp; fLexicalHandlerParameterEntities) {
                    fLexicalHandler.endEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="331" startcolumn="3" endline="341" endcolumn="3">
public final boolean contains(int s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="331" startcolumn="3" endline="341" endcolumn="3">
public final boolean contains(int s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="170" startcolumn="3" endline="180" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="331" startcolumn="3" endline="341" endcolumn="3">
public final boolean contains(int s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="190" startcolumn="3" endline="200" endcolumn="3">
public final boolean contains(StringToStringTable s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(s))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="328" startcolumn="3" endline="338" endcolumn="3">
public final boolean contains(Object s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/StringToIntTable.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="328" startcolumn="3" endline="338" endcolumn="3">
public final boolean contains(Object s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToIntTable.java" startline="170" startcolumn="3" endline="180" endcolumn="3">
public final boolean contains(String key)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(key))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="328" startcolumn="3" endline="338" endcolumn="3">
public final boolean contains(Object s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == s)
        return true;
    }

    return false;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="190" startcolumn="3" endline="200" endcolumn="3">
public final boolean contains(StringToStringTable s)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i].equals(s))
        return true;
    }

    return false;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="376" startcolumn="3" endline="386" endcolumn="3">
public final int indexOf(int elem)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="354" startcolumn="3" endline="364" endcolumn="3">
public final int indexOf(int elem, int index)
  {

    for (int i = index; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="376" startcolumn="3" endline="386" endcolumn="3">
public final int indexOf(int elem)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="351" startcolumn="3" endline="361" endcolumn="3">
public final int indexOf(Object elem, int index)
  {

    for (int i = index; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="373" startcolumn="3" endline="383" endcolumn="3">
public final int indexOf(Object elem)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="354" startcolumn="3" endline="364" endcolumn="3">
public final int indexOf(int elem, int index)
  {

    for (int i = index; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="373" startcolumn="3" endline="383" endcolumn="3">
public final int indexOf(Object elem)
  {

    for (int i = 0; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="351" startcolumn="3" endline="361" endcolumn="3">
public final int indexOf(Object elem, int index)
  {

    for (int i = index; i &lt; m_firstFree; i++)
    {
      if (m_map[i] == elem)
        return i;
    }

    return java.lang.Integer.MIN_VALUE;
  }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="71" startcolumn="3" endline="85" endcolumn="3">
public static String systemId(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return null;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getSystemId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="177" startcolumn="3" endline="191" endcolumn="3">
public static int lineNumber(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return -1;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getLineNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="71" startcolumn="3" endline="85" endcolumn="3">
public static String systemId(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return null;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getSystemId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="235" startcolumn="3" endline="249" endcolumn="3">
public static int columnNumber(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return -1;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getColumnNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="119" startcolumn="3" endline="133" endcolumn="3">
public static String publicId(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return null;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getPublicId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="177" startcolumn="3" endline="191" endcolumn="3">
public static int lineNumber(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return -1;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getLineNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="119" startcolumn="3" endline="133" endcolumn="3">
public static String publicId(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return null;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getPublicId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="235" startcolumn="3" endline="249" endcolumn="3">
public static int columnNumber(NodeList nodeList)
  {
    if (nodeList == null || nodeList.getLength() == 0)
      return -1;

    Node node = nodeList.item(0);
    int nodeHandler = ((DTMNodeProxy)node).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)node).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getColumnNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/MonthDayDV.java" startline="114" startcolumn="5" endline="123" endcolumn="5">
protected String dateToString(DateTimeData date) {
        StringBuffer message = new StringBuffer(8);
        message.append('-');
        message.append('-');
        append(message, date.month, 2);
        message.append('-');
        append(message, date.day, 2);
        append(message, (char)date.utc, 0);
        return message.toString();
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/DateDV.java" startline="77" startcolumn="5" endline="86" endcolumn="5">
protected String dateToString(DateTimeData date) {
        StringBuffer message = new StringBuffer(25);
        append(message, date.year, 4);
        message.append('-');
        append(message, date.month, 2);
        message.append('-');
        append(message, date.day, 2);
        append(message, (char)date.utc, 0);
        return message.toString();
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredProcessingInstructionImpl.java" startline="81" startcolumn="5" endline="92" endcolumn="5">
protected void synchronizeData() {

        // no need to sync in the future
        needsSyncData(false);

        // fluff data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl) this.ownerDocument();
        target  = ownerDocument.getNodeName(fNodeIndex);
        data = ownerDocument.getNodeValueString(fNodeIndex);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredTextImpl.java" startline="88" startcolumn="5" endline="105" endcolumn="5">
protected void synchronizeData() {

        // no need for future synchronizations
        needsSyncData(false);

        // get initial text value
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl) this.ownerDocument();
        data = ownerDocument.getNodeValueString(fNodeIndex);

        // NOTE: We used to normalize adjacent text node values here.
        //       This code has moved to the DeferredDocumentImpl
        //       getNodeValueString() method. -Ac

        // ignorable whitespace
        isIgnorableWhitespace(ownerDocument.getNodeExtra(fNodeIndex) == 1);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredEntityReferenceImpl.java" startline="127" startcolumn="5" endline="138" endcolumn="5">
protected void synchronizeData() {

        // no need to sychronize again
        needsSyncData(false);

        // get the node data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl)this.ownerDocument;
        name = ownerDocument.getNodeName(fNodeIndex);
        baseURI = ownerDocument.getNodeValue(fNodeIndex);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredProcessingInstructionImpl.java" startline="81" startcolumn="5" endline="92" endcolumn="5">
protected void synchronizeData() {

        // no need to sync in the future
        needsSyncData(false);

        // fluff data
        DeferredDocumentImpl ownerDocument =
            (DeferredDocumentImpl) this.ownerDocument();
        target  = ownerDocument.getNodeName(fNodeIndex);
        data = ownerDocument.getNodeValueString(fNodeIndex);

    }
</source>
    </clone>
    <clone nlines="33" distance="5">
        <source file="com/sun/org/apache/xpath/internal/XPath.java" startline="165" startcolumn="3" endline="197" endcolumn="3">
public XPath(
          String exprString, SourceLocator locator, PrefixResolver prefixResolver, int type,
          ErrorListener errorListener)
            throws javax.xml.transform.TransformerException
  {
    initFunctionTable();
    if(null == errorListener)
      errorListener = new com.sun.org.apache.xml.internal.utils.DefaultErrorHandler();

    m_patternString = exprString;

    XPathParser parser = new XPathParser(errorListener, locator);
    Compiler compiler = new Compiler(errorListener, locator, m_funcTable);

    if (SELECT == type)
      parser.initXPath(compiler, exprString, prefixResolver);
    else if (MATCH == type)
      parser.initMatchPattern(compiler, exprString, prefixResolver);
    else
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE, new Object[]{Integer.toString(type)})); //"Can not deal with XPath type: " + type);

    // System.out.println("----------------");
    Expression expr = compiler.compile(0);

    // System.out.println("expr: "+expr);
    this.setExpression(expr);

    if((null != locator) &amp;&amp; locator instanceof ExpressionNode)
    {
        expr.exprSetParent((ExpressionNode)locator);
    }

  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPath.java" startline="213" startcolumn="3" endline="249" endcolumn="3">
public XPath(
          String exprString, SourceLocator locator,
          PrefixResolver prefixResolver, int type,
          ErrorListener errorListener, FunctionTable aTable)
            throws javax.xml.transform.TransformerException
  {
    m_funcTable = aTable;
    if(null == errorListener)
      errorListener = new com.sun.org.apache.xml.internal.utils.DefaultErrorHandler();

    m_patternString = exprString;

    XPathParser parser = new XPathParser(errorListener, locator);
    Compiler compiler = new Compiler(errorListener, locator, m_funcTable);

    if (SELECT == type)
      parser.initXPath(compiler, exprString, prefixResolver);
    else if (MATCH == type)
      parser.initMatchPattern(compiler, exprString, prefixResolver);
    else
      throw new RuntimeException(XSLMessages.createXPATHMessage(
            XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,
            new Object[]{Integer.toString(type)}));
            //"Can not deal with XPath type: " + type);

    // System.out.println("----------------");
    Expression expr = compiler.compile(0);

    // System.out.println("expr: "+expr);
    this.setExpression(expr);

    if((null != locator) &amp;&amp; locator instanceof ExpressionNode)
    {
        expr.exprSetParent((ExpressionNode)locator);
    }

  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="273" startcolumn="5" endline="283" endcolumn="5">
public Attr getAttributeNode(String name) {

        if (needsSyncData()) {
            synchronizeData();
        }
        if (attributes == null) {
            return null;
        }
        return (Attr)attributes.getNamedItem(name);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="748" startcolumn="5" endline="758" endcolumn="5">
public Attr getAttributeNodeNS(String namespaceURI, String localName){

        if (needsSyncData()) {
            synchronizeData();
        }
        if (attributes == null) {
            return null;
        }
        return (Attr)attributes.getNamedItemNS(namespaceURI, localName);

    }
</source>
    </clone>
    <clone nlines="21" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="266" startcolumn="5" endline="286" endcolumn="5">
public Node removeNamedItem(String name)
        throws DOMException {

        if (isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
            throw
                new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                msg);
        }
        int i = findNamePoint(name,0);
        if (i &lt; 0) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
        }

        NodeImpl n = (NodeImpl)nodes.get(i);
        nodes.remove(i);

        return n;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="302" startcolumn="6" endline="322" endcolumn="5">
public Node removeNamedItemNS(String namespaceURI, String name)
        throws DOMException {

        if (isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
            throw
                new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                msg);
        }
        int i = findNamePoint(namespaceURI, name);
        if (i &lt; 0) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
        }

        NodeImpl n = (NodeImpl)nodes.get(i);
        nodes.remove(i);

        return n;

    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="539" startcolumn="3" endline="552" endcolumn="3">
public boolean lessThan(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThan(this);

    return this.num() &lt; obj2.num();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="563" startcolumn="3" endline="576" endcolumn="3">
public boolean lessThanOrEqual(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThanOrEqual(this);

    return this.num() &lt;= obj2.num();
  }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="539" startcolumn="3" endline="552" endcolumn="3">
public boolean lessThan(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThan(this);

    return this.num() &lt; obj2.num();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="587" startcolumn="3" endline="600" endcolumn="3">
public boolean greaterThan(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThan(this);

    return this.num() &gt; obj2.num();
  }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="539" startcolumn="3" endline="552" endcolumn="3">
public boolean lessThan(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThan(this);

    return this.num() &lt; obj2.num();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="611" startcolumn="3" endline="624" endcolumn="3">
public boolean greaterThanOrEqual(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThanOrEqual(this);

    return this.num() &gt;= obj2.num();
  }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="563" startcolumn="3" endline="576" endcolumn="3">
public boolean lessThanOrEqual(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThanOrEqual(this);

    return this.num() &lt;= obj2.num();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="587" startcolumn="3" endline="600" endcolumn="3">
public boolean greaterThan(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThan(this);

    return this.num() &gt; obj2.num();
  }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="563" startcolumn="3" endline="576" endcolumn="3">
public boolean lessThanOrEqual(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.greaterThanOrEqual(this);

    return this.num() &lt;= obj2.num();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="611" startcolumn="3" endline="624" endcolumn="3">
public boolean greaterThanOrEqual(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThanOrEqual(this);

    return this.num() &gt;= obj2.num();
  }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="587" startcolumn="3" endline="600" endcolumn="3">
public boolean greaterThan(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThan(this);

    return this.num() &gt; obj2.num();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XObject.java" startline="611" startcolumn="3" endline="624" endcolumn="3">
public boolean greaterThanOrEqual(XObject obj2)
          throws javax.xml.transform.TransformerException
  {

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.  Because the arguments
    // are backwards, we call the opposite comparison
    // function.
    if (obj2.getType() == XObject.CLASS_NODESET)
      return obj2.lessThanOrEqual(this);

    return this.num() &gt;= obj2.num();
  }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="548" startcolumn="3" endline="565" endcolumn="3">
public int addMethodref(String class_name, String method_name, String signature) {
    int  ret, class_index, name_and_type_index;

    if((ret = lookupMethodref(class_name, method_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    name_and_type_index = addNameAndType(method_name, signature);
    class_index         = addClass(class_name);
    ret = index;
    constants[index++] = new ConstantMethodref(class_index, name_and_type_index);

    cp_table.put(class_name + METHODREF_DELIM + method_name +
                 METHODREF_DELIM + signature, new Index(ret));

    return ret;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="598" startcolumn="3" endline="615" endcolumn="3">
public int addInterfaceMethodref(String class_name, String method_name, String signature) {
    int ret, class_index, name_and_type_index;

    if((ret = lookupInterfaceMethodref(class_name, method_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    class_index         = addClass(class_name);
    name_and_type_index = addNameAndType(method_name, signature);
    ret = index;
    constants[index++] = new ConstantInterfaceMethodref(class_index, name_and_type_index);

    cp_table.put(class_name + IMETHODREF_DELIM + method_name +
                 IMETHODREF_DELIM + signature, new Index(ret));

    return ret;
  }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="598" startcolumn="3" endline="615" endcolumn="3">
public int addInterfaceMethodref(String class_name, String method_name, String signature) {
    int ret, class_index, name_and_type_index;

    if((ret = lookupInterfaceMethodref(class_name, method_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    class_index         = addClass(class_name);
    name_and_type_index = addNameAndType(method_name, signature);
    ret = index;
    constants[index++] = new ConstantInterfaceMethodref(class_index, name_and_type_index);

    cp_table.put(class_name + IMETHODREF_DELIM + method_name +
                 IMETHODREF_DELIM + signature, new Index(ret));

    return ret;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/ConstantPoolGen.java" startline="643" startcolumn="3" endline="660" endcolumn="3">
public int addFieldref(String class_name, String field_name, String signature) {
    int  ret;
    int  class_index, name_and_type_index;

    if((ret = lookupFieldref(class_name, field_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    class_index         = addClass(class_name);
    name_and_type_index = addNameAndType(field_name, signature);
    ret = index;
    constants[index++] = new ConstantFieldref(class_index, name_and_type_index);

    cp_table.put(class_name + FIELDREF_DELIM + field_name + FIELDREF_DELIM + signature, new Index(ret));

    return ret;
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="315" startcolumn="5" endline="324" endcolumn="5">
public void setOutputFormat( OutputFormat format )
    {
        if ( format == null ) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,
                                                           "ArgumentIsNull", new Object[]{"format"});
            throw new NullPointerException(msg);
        }
        _format = format;
        reset();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="289" startcolumn="5" endline="299" endcolumn="5">
public void setOutputByteStream( OutputStream output )
    {
        if ( output == null ) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,
                                                           "ArgumentIsNull", new Object[]{"output"});
            throw new NullPointerException(msg);
        }
        _output = output;
        _writer = null;
        reset();
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="315" startcolumn="5" endline="324" endcolumn="5">
public void setOutputFormat( OutputFormat format )
    {
        if ( format == null ) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,
                                                           "ArgumentIsNull", new Object[]{"format"});
            throw new NullPointerException(msg);
        }
        _format = format;
        reset();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="302" startcolumn="5" endline="312" endcolumn="5">
public void setOutputCharStream( Writer writer )
    {
        if ( writer == null ) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,
                                                           "ArgumentIsNull", new Object[]{"writer"});
            throw new NullPointerException(msg);
        }
        _writer = writer;
        _output = null;
        reset();
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1162" startcolumn="3" endline="1175" endcolumn="3">
public void setPath(String p_path) throws MalformedURIException
  {

    if (p_path == null)
    {
      m_path = null;
      m_queryString = null;
      m_fragment = null;
    }
    else
    {
      initializePath(p_path);
    }
  }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1558" startcolumn="3" endline="1567" endcolumn="3">
public void setPath(String p_path) throws MalformedURIException {
    if (p_path == null) {
      m_path = null;
      m_queryString = null;
      m_fragment = null;
    }
    else {
      initializePath(p_path, 0);
    }
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1183" startcolumn="3" endline="1196" endcolumn="3">
public void setPath(String p_path) throws MalformedURIException
  {

    if (p_path == null)
    {
      m_path = null;
      m_queryString = null;
      m_fragment = null;
    }
    else
    {
      initializePath(p_path);
    }
  }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1558" startcolumn="3" endline="1567" endcolumn="3">
public void setPath(String p_path) throws MalformedURIException {
    if (p_path == null) {
      m_path = null;
      m_queryString = null;
      m_fragment = null;
    }
    else {
      initializePath(p_path, 0);
    }
  }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="com/sun/org/apache/xpath/internal/patterns/UnionPattern.java" startline="177" startcolumn="3" endline="188" endcolumn="3">
public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)
  {
        visitor.visitUnionPattern(owner, this);
        if(null != m_patterns)
        {
                int n = m_patterns.length;
                for(int i = 0; i &lt; n; i++)
                {
                        m_patterns[i].callVisitors(new UnionPathPartOwner(i), visitor);
                }
        }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="539" startcolumn="3" endline="552" endcolumn="3">
public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)
  {
                if(visitor.visitUnionPath(owner, this))
                {
                        if(null != m_exprs)
                        {
                                int n = m_exprs.length;
                                for(int i = 0; i &lt; n; i++)
                                {
                                        m_exprs[i].callVisitors(new iterOwner(i), visitor);
                                }
                        }
                }
  }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xpath/internal/axes/WalkingIterator.java" startline="304" startcolumn="3" endline="313" endcolumn="3">
public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)
  {
                if(visitor.visitLocationPath(owner, this))
                {
                        if(null != m_firstWalker)
                        {
                                m_firstWalker.callVisitors(this, visitor);
                        }
                }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/AxesWalker.java" startline="522" startcolumn="3" endline="532" endcolumn="3">
public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)
  {
        if(visitor.visitStep(owner, this))
        {
                callPredicateVisitors(visitor);
                if(null != m_nextWalker)
                {
                        m_nextWalker.callVisitors(this, visitor);
                }
        }
  }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="1879" startcolumn="5" endline="1888" endcolumn="5">
public void attributeDecl(
        String eName,
        String aName,
        String type,
        String valueDefault,
        String value)
        throws SAXException
    {
        // The internal DTD subset is not serialized by the ToHTMLStream serializer
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextStream.java" startline="520" startcolumn="5" endline="529" endcolumn="5">
public void addAttribute(
        String uri,
        String localName,
        String rawName,
        String type,
        String value,
        boolean XSLAttribute)
    {
        // do nothing, just forget all about the attribute
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="1879" startcolumn="5" endline="1888" endcolumn="5">
public void attributeDecl(
        String eName,
        String aName,
        String type,
        String valueDefault,
        String value)
        throws SAXException
    {
        // The internal DTD subset is not serialized by the ToHTMLStream serializer
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/EmptySerializer.java" startline="636" startcolumn="5" endline="645" endcolumn="5">
public void attributeDecl(
        String arg0,
        String arg1,
        String arg2,
        String arg3,
        String arg4)
        throws SAXException
    {
        couldThrowSAXException();
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="169" startcolumn="5" endline="184" endcolumn="5">
public static Element getFirstVisibleChildElement(Node parent) {

        // search for node
        Node child = parent.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child)) {
                return (Element)child;
            }
            child = child.getNextSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="187" startcolumn="5" endline="202" endcolumn="5">
public static Element getFirstVisibleChildElement(Node parent, Hashtable hiddenNodes) {

        // search for node
        Node child = parent.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child, hiddenNodes)) {
                return (Element)child;
            }
            child = child.getNextSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="169" startcolumn="5" endline="184" endcolumn="5">
public static Element getFirstVisibleChildElement(Node parent) {

        // search for node
        Node child = parent.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child)) {
                return (Element)child;
            }
            child = child.getNextSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="244" startcolumn="5" endline="259" endcolumn="5">
public static Element getLastVisibleChildElement(Node parent, Hashtable hiddenNodes) {

        // search for node
        Node child = parent.getLastChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child, hiddenNodes)) {
                return (Element)child;
            }
            child = child.getPreviousSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="169" startcolumn="5" endline="184" endcolumn="5">
public static Element getFirstVisibleChildElement(Node parent) {

        // search for node
        Node child = parent.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child)) {
                return (Element)child;
            }
            child = child.getNextSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="296" startcolumn="5" endline="311" endcolumn="5">
public static Element getNextVisibleSiblingElement(Node node, Hashtable hiddenNodes) {

        // search for node
        Node sibling = node.getNextSibling();
        while (sibling != null) {
            if (sibling.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(sibling, hiddenNodes)) {
                return (Element)sibling;
            }
            sibling = sibling.getNextSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="224" startcolumn="5" endline="239" endcolumn="5">
public static Element getLastVisibleChildElement(Node parent) {

        // search for node
        Node child = parent.getLastChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child)) {
                return (Element)child;
            }
            child = child.getPreviousSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="187" startcolumn="5" endline="202" endcolumn="5">
public static Element getFirstVisibleChildElement(Node parent, Hashtable hiddenNodes) {

        // search for node
        Node child = parent.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child, hiddenNodes)) {
                return (Element)child;
            }
            child = child.getNextSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="224" startcolumn="5" endline="239" endcolumn="5">
public static Element getLastVisibleChildElement(Node parent) {

        // search for node
        Node child = parent.getLastChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child)) {
                return (Element)child;
            }
            child = child.getPreviousSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="244" startcolumn="5" endline="259" endcolumn="5">
public static Element getLastVisibleChildElement(Node parent, Hashtable hiddenNodes) {

        // search for node
        Node child = parent.getLastChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child, hiddenNodes)) {
                return (Element)child;
            }
            child = child.getPreviousSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="224" startcolumn="5" endline="239" endcolumn="5">
public static Element getLastVisibleChildElement(Node parent) {

        // search for node
        Node child = parent.getLastChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child)) {
                return (Element)child;
            }
            child = child.getPreviousSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="296" startcolumn="5" endline="311" endcolumn="5">
public static Element getNextVisibleSiblingElement(Node node, Hashtable hiddenNodes) {

        // search for node
        Node sibling = node.getNextSibling();
        while (sibling != null) {
            if (sibling.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(sibling, hiddenNodes)) {
                return (Element)sibling;
            }
            sibling = sibling.getNextSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="278" startcolumn="5" endline="293" endcolumn="5">
public static Element getNextVisibleSiblingElement(Node node) {

        // search for node
        Node sibling = node.getNextSibling();
        while (sibling != null) {
            if (sibling.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(sibling)) {
                return (Element)sibling;
            }
            sibling = sibling.getNextSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="187" startcolumn="5" endline="202" endcolumn="5">
public static Element getFirstVisibleChildElement(Node parent, Hashtable hiddenNodes) {

        // search for node
        Node child = parent.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child, hiddenNodes)) {
                return (Element)child;
            }
            child = child.getNextSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="278" startcolumn="5" endline="293" endcolumn="5">
public static Element getNextVisibleSiblingElement(Node node) {

        // search for node
        Node sibling = node.getNextSibling();
        while (sibling != null) {
            if (sibling.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(sibling)) {
                return (Element)sibling;
            }
            sibling = sibling.getNextSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="244" startcolumn="5" endline="259" endcolumn="5">
public static Element getLastVisibleChildElement(Node parent, Hashtable hiddenNodes) {

        // search for node
        Node child = parent.getLastChild();
        while (child != null) {
            if (child.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(child, hiddenNodes)) {
                return (Element)child;
            }
            child = child.getPreviousSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="278" startcolumn="5" endline="293" endcolumn="5">
public static Element getNextVisibleSiblingElement(Node node) {

        // search for node
        Node sibling = node.getNextSibling();
        while (sibling != null) {
            if (sibling.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(sibling)) {
                return (Element)sibling;
            }
            sibling = sibling.getNextSibling();
        }

        // not found
        return null;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/DOMUtil.java" startline="296" startcolumn="5" endline="311" endcolumn="5">
public static Element getNextVisibleSiblingElement(Node node, Hashtable hiddenNodes) {

        // search for node
        Node sibling = node.getNextSibling();
        while (sibling != null) {
            if (sibling.getNodeType() == Node.ELEMENT_NODE &amp;&amp;
                    !isHidden(sibling, hiddenNodes)) {
                return (Element)sibling;
            }
            sibling = sibling.getNextSibling();
        }

        // not found
        return null;

    }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltMath.java" startline="106" startcolumn="3" endline="123" endcolumn="3">
public static double min (NodeList nl)
  {
    if (nl == null || nl.getLength() == 0)
      return Double.NaN;

    double m = Double.MAX_VALUE;
    for (int i = 0; i &lt; nl.getLength(); i++)
    {
      Node n = nl.item(i);
      double d = toNumber(n);
      if (Double.isNaN(d))
        return Double.NaN;
      else if (d &lt; m)
        m = d;
    }

    return m;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltMath.java" startline="71" startcolumn="3" endline="88" endcolumn="3">
public static double max (NodeList nl)
  {
    if (nl == null || nl.getLength() == 0)
      return Double.NaN;

    double m = - Double.MAX_VALUE;
    for (int i = 0; i &lt; nl.getLength(); i++)
    {
      Node n = nl.item(i);
      double d = toNumber(n);
      if (Double.isNaN(d))
        return Double.NaN;
      else if (d &gt; m)
        m = d;
    }

    return m;
  }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="727" startcolumn="5" endline="738" endcolumn="5">
public static String dayName(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d};
      String formatOut = "EEEE";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="644" startcolumn="5" endline="655" endcolumn="5">
public static String monthName(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d, gym, gm};
      String formatOut = "MMMM";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="727" startcolumn="5" endline="738" endcolumn="5">
public static String dayName(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d};
      String formatOut = "EEEE";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="687" startcolumn="5" endline="698" endcolumn="5">
public static String monthAbbreviation(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d, gym, gm};
      String formatOut = "MMM";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="767" startcolumn="5" endline="778" endcolumn="5">
public static String dayAbbreviation(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d};
      String formatOut = "EEE";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="644" startcolumn="5" endline="655" endcolumn="5">
public static String monthName(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d, gym, gm};
      String formatOut = "MMMM";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="767" startcolumn="5" endline="778" endcolumn="5">
public static String dayAbbreviation(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d};
      String formatOut = "EEE";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="687" startcolumn="5" endline="698" endcolumn="5">
public static String monthAbbreviation(String datetimeIn)
      throws ParseException
    {
      String[] edz = getEraDatetimeZone(datetimeIn);
      String datetime = edz[1];
      if (datetime == null)
        return EMPTY_STR;

      String[] formatsIn = {dt, d, gym, gm};
      String formatOut = "MMM";
      return getNameOrAbbrev(datetimeIn, formatsIn, formatOut);
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/XMLGregorianCalendarImpl.java" startline="840" startcolumn="5" endline="855" endcolumn="5">
public static XMLGregorianCalendar createTime(
        int hours,
        int minutes,
        int seconds,
                int timezone) {

                return new XMLGregorianCalendarImpl(
                        DatatypeConstants.FIELD_UNDEFINED, // Year
                        DatatypeConstants.FIELD_UNDEFINED, // Month
                        DatatypeConstants.FIELD_UNDEFINED, // Day
                        hours,
                        minutes,
                        seconds,
                        DatatypeConstants.FIELD_UNDEFINED, //Millisecond
                        timezone);
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/XMLGregorianCalendarImpl.java" startline="909" startcolumn="5" endline="925" endcolumn="5">
public static XMLGregorianCalendar createTime(
        int hours,
        int minutes,
        int seconds,
        int milliseconds,
        int timezone) {

        return new XMLGregorianCalendarImpl(
                DatatypeConstants.FIELD_UNDEFINED, // year
                DatatypeConstants.FIELD_UNDEFINED, // month
                DatatypeConstants.FIELD_UNDEFINED, // day
                hours,
                minutes,
                seconds,
                milliseconds,
                timezone);
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/TimeDV.java" startline="95" startcolumn="5" endline="105" endcolumn="5">
protected String dateToString(DateTimeData date) {
        StringBuffer message = new StringBuffer(16);
        append(message, date.hour, 2);
        message.append(':');
        append(message, date.minute, 2);
        message.append(':');
        append(message, date.second);

        append(message, (char)date.utc, 0);
        return message.toString();
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/DateDV.java" startline="77" startcolumn="5" endline="86" endcolumn="5">
protected String dateToString(DateTimeData date) {
        StringBuffer message = new StringBuffer(25);
        append(message, date.year, 4);
        message.append('-');
        append(message, date.month, 2);
        message.append('-');
        append(message, date.day, 2);
        append(message, (char)date.utc, 0);
        return message.toString();
    }
</source>
    </clone>
    <clone nlines="26" distance="1">
        <source file="com/sun/org/apache/bcel/internal/generic/MethodGen.java" startline="478" startcolumn="3" endline="503" endcolumn="3">
private LocalVariableGen addLocalVariableType(String name, Type type, int slot,
                                           InstructionHandle start,
                                           InstructionHandle end) {
    byte t = type.getType();

    if(t != Constants.T_ADDRESS) {
      int  add = type.getSize();

      if(slot + add &gt; max_locals)
        max_locals = slot + add;

      LocalVariableGen l = new LocalVariableGen(slot, name, type, start, end);
      int i;

      if((i = type_vec.indexOf(l)) &gt;= 0) // Overwrite if necessary
        type_vec.set(i, l);
      else
        type_vec.add(l);

      return l;
    } else {
      throw new IllegalArgumentException("Can not use " + type +
                                         " as type for local variable");

    }
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/MethodGen.java" startline="303" startcolumn="3" endline="328" endcolumn="3">
public LocalVariableGen addLocalVariable(String name, Type type, int slot,
                                           InstructionHandle start,
                                           InstructionHandle end) {
    byte t = type.getType();

    if(t != Constants.T_ADDRESS) {
      int  add = type.getSize();

      if(slot + add &gt; max_locals)
        max_locals = slot + add;

      LocalVariableGen l = new LocalVariableGen(slot, name, type, start, end);
      int i;

      if((i = variable_vec.indexOf(l)) &gt;= 0) // Overwrite if necessary
        variable_vec.set(i, l);
      else
        variable_vec.add(l);

      return l;
    } else {
      throw new IllegalArgumentException("Can not use " + type +
                                         " as type for local variable");

    }
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="235" startcolumn="5" endline="246" endcolumn="5">
XSElementDecl traverseGlobal(Element elmDecl,
            XSDocumentInfo schemaDoc,
            SchemaGrammar grammar) {

        // General Attribute Checking'

        Object[] attrValues = fAttrChecker.checkAttributes(elmDecl, true, schemaDoc);
        XSElementDecl element = traverseNamedElement(elmDecl, attrValues, schemaDoc, grammar, true, null);
        fAttrChecker.returnAttrArray(attrValues, schemaDoc);
        return element;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="213" startcolumn="5" endline="223" endcolumn="5">
protected XSAttributeDecl traverseGlobal(Element attrDecl,
            XSDocumentInfo schemaDoc,
            SchemaGrammar grammar) {

        // General Attribute Checking
        Object[] attrValues = fAttrChecker.checkAttributes(attrDecl, true, schemaDoc);
        XSAttributeDecl attribute = traverseNamedAttr(attrDecl, attrValues, schemaDoc, grammar, true, null);
        fAttrChecker.returnAttrArray(attrValues, schemaDoc);
        return attribute;

    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="javax/xml/datatype/XMLGregorianCalendar.java" startline="700" startcolumn="5" endline="721" endcolumn="5">
public int hashCode() {

        // Following two dates compare to EQUALS since in different timezones.
        // 2000-01-15T12:00:00-05:00 == 2000-01-15T13:00:00-04:00
        //
        // Must ensure both instances generate same hashcode by normalizing
        // this to UTC timezone.
        int timezone = getTimezone();
        if (timezone == DatatypeConstants.FIELD_UNDEFINED) {
            timezone = 0;
        }
        XMLGregorianCalendar gc = this;
        if (timezone != 0) {
            gc = this.normalize();
        }
        return gc.getYear()
                + gc.getMonth()
                + gc.getDay()
                + gc.getHour()
                + gc.getMinute()
                + gc.getSecond();
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/XMLGregorianCalendarImpl.java" startline="1699" startcolumn="5" endline="1716" endcolumn="5">
public int hashCode() {

        // Following two dates compare to EQUALS since in different timezones.
        // 2000-01-15T12:00:00-05:00 == 2000-01-15T13:00:00-04:00
        //
        // Must ensure both instances generate same hashcode by normalizing
        // this to UTC timezone.
        int timezone = getTimezone();
        if (timezone == DatatypeConstants.FIELD_UNDEFINED) {
            timezone = 0;
        }
        XMLGregorianCalendar gc = this;
        if (timezone != 0) {
            gc = this.normalizeToTimezone(getTimezone());
        }
        return gc.getYear() + gc.getMonth() + gc.getDay() +
                gc.getHour() + gc.getMinute() + gc.getSecond();
    }
</source>
    </clone>
    <clone nlines="46" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/dom2dtm/DOM2DTMdefaultNamespaceDeclarationNode.java" startline="476" startcolumn="5" endline="521" endcolumn="5">
public String lookupPrefix(String namespaceURI){

        // REVISIT: When Namespaces 1.1 comes out this may not be true
        // Prefix can't be bound to null namespace
        if (namespaceURI == null) {
            return null;
        }

        short type = this.getNodeType();

        switch (type) {
/*
        case Node.ELEMENT_NODE: {

                String namespace = this.getNamespaceURI(); // to flip out children
                return lookupNamespacePrefix(namespaceURI, (ElementImpl)this);
            }

        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).lookupPrefix(namespaceURI);
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupPrefix(namespaceURI);

                }
                return null;
            }
        default:{
/*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupPrefix(namespaceURI);
                }
*/
                return null;
            }
         }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="1954" startcolumn="5" endline="2000" endcolumn="5">
@Override
    public String lookupPrefix(String namespaceURI){

        // REVISIT: When Namespaces 1.1 comes out this may not be true
        // Prefix can't be bound to null namespace
        if (namespaceURI == null) {
            return null;
        }

        short type = this.getNodeType();

        switch (type) {
/*
        case Node.ELEMENT_NODE: {

                String namespace = this.getNamespaceURI(); // to flip out children
                return lookupNamespacePrefix(namespaceURI, (ElementImpl)this);
            }

        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).lookupPrefix(namespaceURI);
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupPrefix(namespaceURI);

                }
                return null;
            }
        default:{
/*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupPrefix(namespaceURI);
                }
*/
                return null;
            }
         }
    }
</source>
    </clone>
    <clone nlines="46" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/UnImplNode.java" startline="1613" startcolumn="5" endline="1658" endcolumn="5">
public String lookupPrefix(String namespaceURI){

        // REVISIT: When Namespaces 1.1 comes out this may not be true
        // Prefix can't be bound to null namespace
        if (namespaceURI == null) {
            return null;
        }

        short type = this.getNodeType();

        switch (type) {
/*
        case Node.ELEMENT_NODE: {

                String namespace = this.getNamespaceURI(); // to flip out children
                return lookupNamespacePrefix(namespaceURI, (ElementImpl)this);
            }

        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).lookupPrefix(namespaceURI);
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupPrefix(namespaceURI);

                }
                return null;
            }
        default:{
/*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupPrefix(namespaceURI);
                }
*/
                return null;
            }
         }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMNodeProxy.java" startline="1954" startcolumn="5" endline="2000" endcolumn="5">
@Override
    public String lookupPrefix(String namespaceURI){

        // REVISIT: When Namespaces 1.1 comes out this may not be true
        // Prefix can't be bound to null namespace
        if (namespaceURI == null) {
            return null;
        }

        short type = this.getNodeType();

        switch (type) {
/*
        case Node.ELEMENT_NODE: {

                String namespace = this.getNamespaceURI(); // to flip out children
                return lookupNamespacePrefix(namespaceURI, (ElementImpl)this);
            }

        case Node.DOCUMENT_NODE:{
                return((NodeImpl)((Document)this).getDocumentElement()).lookupPrefix(namespaceURI);
            }
*/
        case Node.ENTITY_NODE :
        case Node.NOTATION_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            // type is unknown
            return null;
        case Node.ATTRIBUTE_NODE:{
                if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {
                    return getOwnerElement().lookupPrefix(namespaceURI);

                }
                return null;
            }
        default:{
/*
                NodeImpl ancestor = (NodeImpl)getElementAncestor(this);
                if (ancestor != null) {
                    return ancestor.lookupPrefix(namespaceURI);
                }
*/
                return null;
            }
         }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="715" startcolumn="5" endline="726" endcolumn="5">
public String getAttributeNamespace(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getURI(index);
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeNamespace()") ;
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="684" startcolumn="5" endline="694" endcolumn="5">
public QName getAttributeName(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return convertXNIQNametoJavaxQName(fScanner.getAttributeIterator().getQualifiedName(index)) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeName()") ;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="734" startcolumn="5" endline="744" endcolumn="5">
public String getAttributePrefix(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getPrefix(index);
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributePrefix()") ;
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="684" startcolumn="5" endline="694" endcolumn="5">
public QName getAttributeName(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return convertXNIQNametoJavaxQName(fScanner.getAttributeIterator().getQualifiedName(index)) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeName()") ;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="773" startcolumn="5" endline="784" endcolumn="5">
public String getAttributeType(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getType(index) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeType()") ;
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="684" startcolumn="5" endline="694" endcolumn="5">
public QName getAttributeName(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return convertXNIQNametoJavaxQName(fScanner.getAttributeIterator().getQualifiedName(index)) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeName()") ;
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="792" startcolumn="5" endline="803" endcolumn="5">
public String getAttributeValue(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return fScanner.getAttributeIterator().getValue(index) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeValue()") ;
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="684" startcolumn="5" endline="694" endcolumn="5">
public QName getAttributeName(int index) {
        //State should be either START_ELEMENT or ATTRIBUTE
        if( fEventType == XMLEvent.START_ELEMENT || fEventType == XMLEvent.ATTRIBUTE) {
            return convertXNIQNametoJavaxQName(fScanner.getAttributeIterator().getQualifiedName(index)) ;
        } else{
            throw new java.lang.IllegalStateException("Current state is not among the states "
                     + getEventTypeString(XMLEvent.START_ELEMENT) + " , "
                     + getEventTypeString(XMLEvent.ATTRIBUTE)
                     + "valid for getAttributeName()") ;
        }
    }
</source>
    </clone>
    <clone nlines="23" distance="2">
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="570" startcolumn="5" endline="592" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
            return false;

      PredicatedNodeTest pnt = (PredicatedNodeTest) expr;
      if (null != m_predicates)
      {

        int n = m_predicates.length;
        if ((null == pnt.m_predicates) || (pnt.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(pnt.m_predicates[i]))
                return false;
        }
      }
      else if (null != pnt.m_predicates)
              return false;

      return true;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="557" startcolumn="5" endline="583" endcolumn="5">
public boolean deepEquals(Expression expr)
    {
      if (!super.deepEquals(expr))
            return false;

      UnionPathIterator upi = (UnionPathIterator) expr;

      if (null != m_exprs)
      {
        int n = m_exprs.length;

        if((null == upi.m_exprs) || (upi.m_exprs.length != n))
                return false;

        for (int i = 0; i &lt; n; i++)
        {
          if(!m_exprs[i].deepEquals(upi.m_exprs[i]))
                return false;
        }
      }
      else if (null != upi.m_exprs)
      {
          return false;
      }

      return true;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="487" startcolumn="5" endline="496" endcolumn="5">
public String lookupNamespace(int node, String prefix)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.lookupNamespace(node, prefix);
        }
        else {
            return super.lookupNamespace(node, prefix);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="339" startcolumn="5" endline="348" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.shallowCopy(node, handler);
        }
        else {
            return super.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="487" startcolumn="5" endline="496" endcolumn="5">
public String lookupNamespace(int node, String prefix)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.lookupNamespace(node, prefix);
        }
        else {
            return super.lookupNamespace(node, prefix);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="314" startcolumn="5" endline="323" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.shallowCopy(node, handler);
        }
        else {
            return _dom.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl.java" startline="242" startcolumn="5" endline="252" endcolumn="5">
public boolean lessThan(int node1, int node2) {
        if (node1 == DTM.NULL) {
            return false;
        }

        if (node2 == DTM.NULL) {
            return true;
        }

        return (node1 &lt; node2);
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/SimpleResultTreeImpl.java" startline="462" startcolumn="5" endline="472" endcolumn="5">
public boolean lessThan(final int node1, final int node2)
    {
        if (node1 == DTM.NULL) {
            return false;
        }
        else if (node2 == DTM.NULL) {
            return true;
        }
        else
            return (node1 &lt; node2);
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1119" startcolumn="5" endline="1130" endcolumn="5">
public String getNodeName(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeName, chunk, index)
                    : getChunkValue(fNodeName, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="796" startcolumn="5" endline="807" endcolumn="5">
public int getParentNode(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeParent, chunk, index)
                    : getChunkIndex(fNodeParent, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1119" startcolumn="5" endline="1130" endcolumn="5">
public String getNodeName(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeName, chunk, index)
                    : getChunkValue(fNodeName, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="818" startcolumn="5" endline="829" endcolumn="5">
public int getLastChild(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeLastChild, chunk, index)
                    : getChunkIndex(fNodeLastChild, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1119" startcolumn="5" endline="1130" endcolumn="5">
public String getNodeName(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeName, chunk, index)
                    : getChunkValue(fNodeName, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="884" startcolumn="5" endline="895" endcolumn="5">
public int getRealPrevSibling(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodePrevSib, chunk, index)
                    : getChunkIndex(fNodePrevSib, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1119" startcolumn="5" endline="1130" endcolumn="5">
public String getNodeName(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeName, chunk, index)
                    : getChunkValue(fNodeName, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1283" startcolumn="5" endline="1294" endcolumn="5">
public int getNodeExtra(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeExtra, chunk, index)
                    : getChunkIndex(fNodeExtra, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1258" startcolumn="5" endline="1269" endcolumn="5">
public String getNodeValue(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeValue, chunk, index)
                    : getChunkValue(fNodeValue, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="796" startcolumn="5" endline="807" endcolumn="5">
public int getParentNode(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeParent, chunk, index)
                    : getChunkIndex(fNodeParent, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1258" startcolumn="5" endline="1269" endcolumn="5">
public String getNodeValue(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeValue, chunk, index)
                    : getChunkValue(fNodeValue, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="818" startcolumn="5" endline="829" endcolumn="5">
public int getLastChild(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeLastChild, chunk, index)
                    : getChunkIndex(fNodeLastChild, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1258" startcolumn="5" endline="1269" endcolumn="5">
public String getNodeValue(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeValue, chunk, index)
                    : getChunkValue(fNodeValue, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="884" startcolumn="5" endline="895" endcolumn="5">
public int getRealPrevSibling(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodePrevSib, chunk, index)
                    : getChunkIndex(fNodePrevSib, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1258" startcolumn="5" endline="1269" endcolumn="5">
public String getNodeValue(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeValue, chunk, index)
                    : getChunkValue(fNodeValue, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1283" startcolumn="5" endline="1294" endcolumn="5">
public int getNodeExtra(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeExtra, chunk, index)
                    : getChunkIndex(fNodeExtra, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1346" startcolumn="5" endline="1357" endcolumn="5">
public String getNodeURI(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeURI, chunk, index)
                    : getChunkValue(fNodeURI, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="796" startcolumn="5" endline="807" endcolumn="5">
public int getParentNode(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeParent, chunk, index)
                    : getChunkIndex(fNodeParent, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1346" startcolumn="5" endline="1357" endcolumn="5">
public String getNodeURI(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeURI, chunk, index)
                    : getChunkValue(fNodeURI, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="818" startcolumn="5" endline="829" endcolumn="5">
public int getLastChild(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeLastChild, chunk, index)
                    : getChunkIndex(fNodeLastChild, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1346" startcolumn="5" endline="1357" endcolumn="5">
public String getNodeURI(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeURI, chunk, index)
                    : getChunkValue(fNodeURI, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="884" startcolumn="5" endline="895" endcolumn="5">
public int getRealPrevSibling(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodePrevSib, chunk, index)
                    : getChunkIndex(fNodePrevSib, chunk, index);

    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1346" startcolumn="5" endline="1357" endcolumn="5">
public String getNodeURI(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return null;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkValue(fNodeURI, chunk, index)
                    : getChunkValue(fNodeURI, chunk, index);

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1283" startcolumn="5" endline="1294" endcolumn="5">
public int getNodeExtra(int nodeIndex, boolean free) {

        if (nodeIndex == -1) {
            return -1;
        }

        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        return free ? clearChunkIndex(fNodeExtra, chunk, index)
                    : getChunkIndex(fNodeExtra, chunk, index);

    }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="138" startcolumn="3" endline="148" endcolumn="3">
public  Node selectSingleNode(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="85" startcolumn="3" endline="95" endcolumn="3">
public static Node selectSingleNode(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="138" startcolumn="3" endline="148" endcolumn="3">
public  Node selectSingleNode(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="124" startcolumn="3" endline="134" endcolumn="3">
public static NodeIterator selectNodeIterator(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="138" startcolumn="3" endline="148" endcolumn="3">
public  Node selectSingleNode(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="163" startcolumn="3" endline="173" endcolumn="3">
public static NodeList selectNodeList(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public  NodeIterator selectNodeIterator(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="85" startcolumn="3" endline="95" endcolumn="3">
public static Node selectSingleNode(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public  NodeIterator selectNodeIterator(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="124" startcolumn="3" endline="134" endcolumn="3">
public static NodeIterator selectNodeIterator(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="177" startcolumn="3" endline="187" endcolumn="3">
public  NodeIterator selectNodeIterator(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="163" startcolumn="3" endline="173" endcolumn="3">
public static NodeList selectNodeList(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="216" startcolumn="3" endline="226" endcolumn="3">
public  NodeList selectNodeList(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="85" startcolumn="3" endline="95" endcolumn="3">
public static Node selectSingleNode(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Have the XObject return its result as a NodeSetDTM.
    NodeIterator nl = selectNodeIterator(contextNode, str, namespaceNode);

    // Return the first node, or null
    return nl.nextNode();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="216" startcolumn="3" endline="226" endcolumn="3">
public  NodeList selectNodeList(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="124" startcolumn="3" endline="134" endcolumn="3">
public static NodeIterator selectNodeIterator(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Have the XObject return its result as a NodeSetDTM.
    return list.nodeset();
  }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="216" startcolumn="3" endline="226" endcolumn="3">
public  NodeList selectNodeList(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="163" startcolumn="3" endline="173" endcolumn="3">
public static NodeList selectNodeList(
          Node contextNode, String str, Node namespaceNode)
            throws TransformerException
  {

    // Execute the XPath, and have it return the result
    XObject list = eval(contextNode, str, namespaceNode);

    // Return a NodeList.
    return list.nodelist();
  }
</source>
    </clone>
    <clone nlines="19" distance="1">
        <source file="com/sun/org/apache/xpath/internal/CachedXPathAPI.java" startline="318" startcolumn="3" endline="336" endcolumn="3">
public  XObject eval(
          Node contextNode, String str, PrefixResolver prefixResolver)
            throws TransformerException
  {

    // Since we don't have a XML Parser involved here, install some default support
    // for things like namespaces, etc.
    // (Changed from: XPathContext xpathSupport = new XPathContext();
    //    because XPathContext is weak in a number of areas... perhaps
    //    XPathContext should be done away with.)
    // Create the XPath object.
    XPath xpath = new XPath(str, null, prefixResolver, XPath.SELECT, null);

    // Execute the XPath, and have it return the result
    XPathContext xpathSupport = new XPathContext();
    int ctxtNode = xpathSupport.getDTMHandleFromNode(contextNode);

    return xpath.execute(xpathSupport, ctxtNode, prefixResolver);
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPathAPI.java" startline="266" startcolumn="3" endline="284" endcolumn="3">
public static XObject eval(
          Node contextNode, String str, PrefixResolver prefixResolver)
            throws TransformerException
  {

    // Since we don't have a XML Parser involved here, install some default support
    // for things like namespaces, etc.
    // (Changed from: XPathContext xpathSupport = new XPathContext();
    //    because XPathContext is weak in a number of areas... perhaps
    //    XPathContext should be done away with.)
    // Create the XPath object.
    XPath xpath = new XPath(str, null, prefixResolver, XPath.SELECT, null);

    // Execute the XPath, and have it return the result
    XPathContext xpathSupport = new XPathContext();
    int ctxtNode = xpathSupport.getDTMHandleFromNode(contextNode);

    return xpath.execute(xpathSupport, ctxtNode, prefixResolver);
  }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerHandlerImpl.java" startline="503" startcolumn="4" endline="512" endcolumn="4">
public void reset() {
       _systemId = null;
       _dom = null;
       _handler = null;
       _lexHandler = null;
       _dtdHandler = null;
       _declHandler = null;
       _result = null;
       _locator = null;
   }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="386" startcolumn="5" endline="395" endcolumn="5">
public final void dropDocumentReferences() {
        fDocument = null;
        fDocumentImpl = null;
        fDeferredDocumentImpl = null;
        fDocumentType = null;
        fCurrentNode = null;
        fCurrentCDATASection = null;
        fCurrentEntityDecl = null;
        fRoot = null;
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/Number.java" startline="121" startcolumn="5" endline="130" endcolumn="5">
public void addVariable(VariableRefBase variableRef) {
        if (_closureVars == null) {
            _closureVars = new ArrayList();
        }

        // Only one reference per variable
        if (!_closureVars.contains(variableRef)) {
            _closureVars.add(variableRef);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/Sort.java" startline="116" startcolumn="5" endline="126" endcolumn="5">
public void addVariable(VariableRefBase variableRef) {
        if (_closureVars == null) {
            _closureVars = new ArrayList();
        }

        // Only one reference per variable
        if (!_closureVars.contains(variableRef)) {
            _closureVars.add(variableRef);
            _needsSortRecordFactory = true;
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="546" startcolumn="3" endline="558" endcolumn="3">
public void addNodesInDocOrder(NodeIterator iterator, XPathContext support)
  {

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE, null)); //"This NodeSet is not mutable!");

    Node node;

    while (null != (node = iterator.nextNode()))
    {
      addNodeInDocOrder(node, support);
    }
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSetDTM.java" startline="705" startcolumn="3" endline="717" endcolumn="3">
public void addNodesInDocOrder(DTMIterator iterator, XPathContext support)
  {

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    int node;

    while (DTM.NULL != (node = iterator.nextNode()))
    {
      addNodeInDocOrder(node, support);
    }
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/ReferenceType.java" startline="330" startcolumn="5" endline="340" endcolumn="5">
public void translateFrom(ClassGenerator classGen, MethodGenerator methodGen,
                              Class clazz) {
        if (clazz.getName().equals("java.lang.Object")) {
            methodGen.getInstructionList().append(NOP);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                toString(), clazz.getName());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/StringType.java" startline="160" startcolumn="5" endline="172" endcolumn="5">
public void translateTo(ClassGenerator classGen, MethodGenerator methodGen,
                            Class clazz)
    {
        // Is String &lt;: clazz? I.e. clazz in { String, Object }
        if (clazz.isAssignableFrom(java.lang.String.class)) {
            methodGen.getInstructionList().append(NOP);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), clazz.getName());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="747" startcolumn="5" endline="756" endcolumn="5">
public void attributeDecl(
        String arg0,
        String arg1,
        String arg2,
        String arg3,
        String arg4)
        throws SAXException
    {
        m_handler.attributeDecl(arg0, arg1, arg2, arg3, arg4);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="268" startcolumn="5" endline="277" endcolumn="5">
public void addAttribute(
        String uri,
        String localName,
        String rawName,
        String type,
        String value)
        throws SAXException
    {
        addAttribute(uri, localName, rawName, type, value, false);
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToTextStream.java" startline="520" startcolumn="5" endline="529" endcolumn="5">
public void addAttribute(
        String uri,
        String localName,
        String rawName,
        String type,
        String value,
        boolean XSLAttribute)
    {
        // do nothing, just forget all about the attribute
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/EmptySerializer.java" startline="636" startcolumn="5" endline="645" endcolumn="5">
public void attributeDecl(
        String arg0,
        String arg1,
        String arg2,
        String arg3,
        String arg4)
        throws SAXException
    {
        couldThrowSAXException();
    }
</source>
    </clone>
    <clone nlines="44" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1982" startcolumn="5" endline="2025" endcolumn="5">
public static String normalize(String content, short ws) {
        int len = content == null ? 0 : content.length();
        if (len == 0 || ws == WS_PRESERVE)
            return content;

        StringBuffer sb = new StringBuffer();
        if (ws == WS_REPLACE) {
            char ch;
            // when it's replace, just replace #x9, #xa, #xd by #x20
            for (int i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd)
                    sb.append(ch);
                else
                    sb.append((char)0x20);
            }
        } else {
            char ch;
            int i;
            boolean isLeading = true;
            // when it's collapse
            for (i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                // append real characters, so we passed leading ws
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20) {
                    sb.append(ch);
                    isLeading = false;
                }
                else {
                    // for whitespaces, we skip all following ws
                    for (; i &lt; len-1; i++) {
                        ch = content.charAt(i+1);
                        if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20)
                            break;
                    }
                    // if it's not a leading or tailing ws, then append a space
                    if (i &lt; len - 1 &amp;&amp; !isLeading)
                        sb.append((char)0x20);
                }
            }
        }

        return sb.toString();
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSAttributeChecker.java" startline="1623" startcolumn="5" endline="1666" endcolumn="5">
public static String normalize(String content, short ws) {
        int len = content == null ? 0 : content.length();
        if (len == 0 || ws == XSSimpleType.WS_PRESERVE)
            return content;

        StringBuffer sb = new StringBuffer();
        if (ws == XSSimpleType.WS_REPLACE) {
            char ch;
            // when it's replace, just replace #x9, #xa, #xd by #x20
            for (int i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd)
                    sb.append(ch);
                else
                    sb.append((char)0x20);
            }
        } else {
            char ch;
            int i;
            boolean isLeading = true;
            // when it's collapse
            for (i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                // append real characters, so we passed leading ws
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20) {
                    sb.append(ch);
                    isLeading = false;
                }
                else {
                    // for whitespaces, we skip all following ws
                    for (; i &lt; len-1; i++) {
                        ch = content.charAt(i+1);
                        if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20)
                            break;
                    }
                    // if it's not a leading or tailing ws, then append a space
                    if (i &lt; len - 1 &amp;&amp; !isLeading)
                        sb.append((char)0x20);
                }
            }
        }

        return sb.toString();
    }
</source>
    </clone>
    <clone nlines="17" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/XMLGregorianCalendarImpl.java" startline="874" startcolumn="5" endline="890" endcolumn="5">
public static XMLGregorianCalendar createTime(
        int hours,
        int minutes,
        int seconds,
        BigDecimal fractionalSecond,
        int timezone) {

        return new XMLGregorianCalendarImpl(
            null,            // Year
            DatatypeConstants.FIELD_UNDEFINED, // month
            DatatypeConstants.FIELD_UNDEFINED, // day
            hours,
            minutes,
            seconds,
            fractionalSecond,
            timezone);
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/XMLGregorianCalendarImpl.java" startline="909" startcolumn="5" endline="925" endcolumn="5">
public static XMLGregorianCalendar createTime(
        int hours,
        int minutes,
        int seconds,
        int milliseconds,
        int timezone) {

        return new XMLGregorianCalendarImpl(
                DatatypeConstants.FIELD_UNDEFINED, // year
                DatatypeConstants.FIELD_UNDEFINED, // month
                DatatypeConstants.FIELD_UNDEFINED, // day
                hours,
                minutes,
                seconds,
                milliseconds,
                timezone);
    }
</source>
    </clone>
    <clone nlines="32" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="604" startcolumn="3" endline="635" endcolumn="3">
private void initializeScheme(String p_uriSpec) throws MalformedURIException
  {

    int uriSpecLen = p_uriSpec.length();
    int index = 0;
    String scheme = null;
    char testChar = '\0';

    while (index &lt; uriSpecLen)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == ':' || testChar == '/' || testChar == '?'
              || testChar == '#')
      {
        break;
      }

      index++;
    }

    scheme = p_uriSpec.substring(0, index);

    if (scheme.length() == 0)
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_INURI, null)); //"No scheme found in URI.");
    }
    else
    {
      setScheme(scheme);
    }
  }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="583" startcolumn="3" endline="614" endcolumn="3">
private void initializeScheme(String p_uriSpec) throws MalformedURIException
  {

    int uriSpecLen = p_uriSpec.length();
    int index = 0;
    String scheme = null;
    char testChar = '\0';

    while (index &lt; uriSpecLen)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == ':' || testChar == '/' || testChar == '?'
              || testChar == '#')
      {
        break;
      }

      index++;
    }

    scheme = p_uriSpec.substring(0, index);

    if (scheme.length() == 0)
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_INURI, null)); //"No scheme found in URI.");
    }
    else
    {
      setScheme(scheme);
    }
  }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="126" startcolumn="5" endline="136" endcolumn="5">
XSWildcardDecl traverseAnyAttribute(Element elmNode,
            XSDocumentInfo schemaDoc,
            SchemaGrammar grammar) {

        // General Attribute Checking for elmNode
        Object[] attrValues = fAttrChecker.checkAttributes(elmNode, false, schemaDoc);
        XSWildcardDecl wildcard = traverseWildcardDecl(elmNode, attrValues, schemaDoc, grammar);
        fAttrChecker.returnAttrArray(attrValues, schemaDoc);

        return wildcard;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="213" startcolumn="5" endline="223" endcolumn="5">
protected XSAttributeDecl traverseGlobal(Element attrDecl,
            XSDocumentInfo schemaDoc,
            SchemaGrammar grammar) {

        // General Attribute Checking
        Object[] attrValues = fAttrChecker.checkAttributes(attrDecl, true, schemaDoc);
        XSAttributeDecl attribute = traverseNamedAttr(attrDecl, attrValues, schemaDoc, grammar, true, null);
        fAttrChecker.returnAttrArray(attrValues, schemaDoc);
        return attribute;

    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="126" startcolumn="5" endline="136" endcolumn="5">
XSWildcardDecl traverseAnyAttribute(Element elmNode,
            XSDocumentInfo schemaDoc,
            SchemaGrammar grammar) {

        // General Attribute Checking for elmNode
        Object[] attrValues = fAttrChecker.checkAttributes(elmNode, false, schemaDoc);
        XSWildcardDecl wildcard = traverseWildcardDecl(elmNode, attrValues, schemaDoc, grammar);
        fAttrChecker.returnAttrArray(attrValues, schemaDoc);

        return wildcard;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="235" startcolumn="5" endline="246" endcolumn="5">
XSElementDecl traverseGlobal(Element elmDecl,
            XSDocumentInfo schemaDoc,
            SchemaGrammar grammar) {

        // General Attribute Checking'

        Object[] attrValues = fAttrChecker.checkAttributes(elmDecl, true, schemaDoc);
        XSElementDecl element = traverseNamedElement(elmDecl, attrValues, schemaDoc, grammar, true, null);
        fAttrChecker.returnAttrArray(attrValues, schemaDoc);
        return element;

    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariable.java" startline="114" startcolumn="3" endline="124" endcolumn="3">
public LocalVariable(int start_pc, int length, int name_index,
                       int signature_index, int index,
                       ConstantPool constant_pool)
  {
    this.start_pc        = start_pc;
    this.length          = length;
    this.name_index      = name_index;
    this.signature_index = signature_index;
    this.index           = index;
    this.constant_pool   = constant_pool;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/StackMapEntry.java" startline="100" startcolumn="3" endline="111" endcolumn="3">
public StackMapEntry(int byte_code_offset, int number_of_locals,
                       StackMapType[] types_of_locals,
                       int number_of_stack_items,
                       StackMapType[] types_of_stack_items,
                       ConstantPool constant_pool) {
    this.byte_code_offset = byte_code_offset;
    this.number_of_locals = number_of_locals;
    this.types_of_locals = types_of_locals;
    this.number_of_stack_items = number_of_stack_items;
    this.types_of_stack_items = types_of_stack_items;
    this.constant_pool = constant_pool;
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/CurrentNodeListIterator.java" startline="90" startcolumn="5" endline="100" endcolumn="5">
public CurrentNodeListIterator(DTMAxisIterator source, boolean docOrder,
                                   CurrentNodeListFilter filter,
                                   int currentNode,
                                   AbstractTranslet translet)
    {
        _source = source;
        _filter = filter;
        _translet = translet;
        _docOrder = docOrder;
        _currentNode = currentNode;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="91" startcolumn="5" endline="102" endcolumn="5">
public NodeIteratorImpl( DocumentImpl document,
                             Node root,
                             int whatToShow,
                             NodeFilter nodeFilter,
                             boolean entityReferenceExpansion) {
        fDocument = document;
        fRoot = root;
        fCurrentNode = null;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMInputImpl.java" startline="129" startcolumn="5" endline="139" endcolumn="5">
public DOMInputImpl(String publicId, String systemId,
                          String baseSystemId, InputStream byteStream,
                          String encoding) {

                fPublicId = publicId;
                fSystemId = systemId;
                fBaseSystemId = baseSystemId;
                fByteStream = byteStream;
                fEncoding = encoding;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="91" startcolumn="5" endline="102" endcolumn="5">
public NodeIteratorImpl( DocumentImpl document,
                             Node root,
                             int whatToShow,
                             NodeFilter nodeFilter,
                             boolean entityReferenceExpansion) {
        fDocument = document;
        fRoot = root;
        fCurrentNode = null;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMInputImpl.java" startline="158" startcolumn="6" endline="168" endcolumn="6">
public DOMInputImpl(String publicId, String systemId,
                          String baseSystemId, Reader charStream,
                          String encoding) {

                fPublicId = publicId;
                fSystemId = systemId;
                fBaseSystemId = baseSystemId;
                fCharStream = charStream;
                fEncoding = encoding;

     }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="91" startcolumn="5" endline="102" endcolumn="5">
public NodeIteratorImpl( DocumentImpl document,
                             Node root,
                             int whatToShow,
                             NodeFilter nodeFilter,
                             boolean entityReferenceExpansion) {
        fDocument = document;
        fRoot = root;
        fCurrentNode = null;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/InnerClasses.java" startline="174" startcolumn="3" endline="183" endcolumn="3">
public Attribute copy(ConstantPool constant_pool) {
    InnerClasses c = (InnerClasses)clone();

    c.inner_classes = new InnerClass[number_of_classes];
    for(int i=0; i &lt; number_of_classes; i++)
      c.inner_classes[i] = inner_classes[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTypeTable.java" startline="133" startcolumn="3" endline="143" endcolumn="3">
@Override
public Attribute copy(ConstantPool constant_pool) {
    LocalVariableTypeTable c = (LocalVariableTypeTable)clone();

    c.local_variable_type_table = new LocalVariable[local_variable_type_table_length];
    for(int i=0; i &lt; local_variable_type_table_length; i++)
      c.local_variable_type_table[i] = local_variable_type_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/LineNumberTable.java" startline="231" startcolumn="3" endline="240" endcolumn="3">
public Attribute copy(ConstantPool constant_pool) {
    LineNumberTable c = (LineNumberTable)clone();

    c.line_number_table = new LineNumber[line_number_table_length];
    for(int i=0; i &lt; line_number_table_length; i++)
      c.line_number_table[i] = line_number_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTypeTable.java" startline="133" startcolumn="3" endline="143" endcolumn="3">
@Override
public Attribute copy(ConstantPool constant_pool) {
    LocalVariableTypeTable c = (LocalVariableTypeTable)clone();

    c.local_variable_type_table = new LocalVariable[local_variable_type_table_length];
    for(int i=0; i &lt; local_variable_type_table_length; i++)
      c.local_variable_type_table[i] = local_variable_type_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.java" startline="187" startcolumn="3" endline="196" endcolumn="3">
public Attribute copy(ConstantPool constant_pool) {
    LocalVariableTable c = (LocalVariableTable)clone();

    c.local_variable_table = new LocalVariable[local_variable_table_length];
    for(int i=0; i &lt; local_variable_table_length; i++)
      c.local_variable_table[i] = local_variable_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTypeTable.java" startline="133" startcolumn="3" endline="143" endcolumn="3">
@Override
public Attribute copy(ConstantPool constant_pool) {
    LocalVariableTypeTable c = (LocalVariableTypeTable)clone();

    c.local_variable_type_table = new LocalVariable[local_variable_type_table_length];
    for(int i=0; i &lt; local_variable_type_table_length; i++)
      c.local_variable_type_table[i] = local_variable_type_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/StackMap.java" startline="165" startcolumn="3" endline="174" endcolumn="3">
public Attribute copy(ConstantPool constant_pool) {
    StackMap c = (StackMap)clone();

    c.map = new StackMapEntry[map_length];
    for(int i=0; i &lt; map_length; i++)
      c.map[i] = map[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTypeTable.java" startline="133" startcolumn="3" endline="143" endcolumn="3">
@Override
public Attribute copy(ConstantPool constant_pool) {
    LocalVariableTypeTable c = (LocalVariableTypeTable)clone();

    c.local_variable_type_table = new LocalVariable[local_variable_type_table_length];
    for(int i=0; i &lt; local_variable_type_table_length; i++)
      c.local_variable_type_table[i] = local_variable_type_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaLoader.java" startline="1125" startcolumn="5" endline="1137" endcolumn="5">
public XSModel loadInputList(LSInputList is) {
        int length = is.getLength();
        SchemaGrammar[] gs = new SchemaGrammar[length];
        for (int i = 0; i &lt; length; i++) {
            try {
                gs[i] = (SchemaGrammar) loadGrammar(dom2xmlInputSource(is.item(i)));
            } catch (Exception e) {
                reportDOMFatalError(e);
                return null;
            }
        }
        return new XSModelImpl(gs);
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaLoader.java" startline="1156" startcolumn="5" endline="1169" endcolumn="5">
public XSModel loadURIList(StringList uriList) {
        int length = uriList.getLength();
        SchemaGrammar[] gs = new SchemaGrammar[length];
        for (int i = 0; i &lt; length; i++) {
            try {
                gs[i] =
                    (SchemaGrammar) loadGrammar(new XMLInputSource(null, uriList.item(i), null));
            } catch (Exception e) {
                reportDOMFatalError(e);
                return null;
            }
        }
        return new XSModelImpl(gs);
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/EncodingInfo.java" startline="89" startcolumn="5" endline="99" endcolumn="5">
public boolean isInEncoding(char ch) {
        if (m_encoding == null) {
            m_encoding = new EncodingImpl();

            // One could put alternate logic in here to
            // instantiate another object that implements the
            // InEncoding interface. For example if the JRE is 1.4 or up
            // we could have an object that uses JRE 1.4 methods
        }
        return m_encoding.isInEncoding(ch);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/EncodingInfo.java" startline="108" startcolumn="5" endline="118" endcolumn="5">
public boolean isInEncoding(char high, char low) {
        if (m_encoding == null) {
            m_encoding = new EncodingImpl();

            // One could put alternate logic in here to
            // instantiate another object that implements the
            // InEncoding interface. For example if the JRE is 1.4 or up
            // we could have an object that uses JRE 1.4 methods
        }
        return m_encoding.isInEncoding(high, low);
    }
</source>
    </clone>
    <clone nlines="42" distance="1">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1303" startcolumn="5" endline="1345" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        node = makeNodeIdentity(node);

        // iterator is not a clone
        int parent, index;

       if (_type(node) == DTM.ATTRIBUTE_NODE)
        node = _parent(node);

        _startNode = node;
        _stack[index = 0] = node;



                parent=node;
                while ((parent = _parent(parent)) != NULL)
                {
                        if (++index == _stack.length)
                        {
                                final int[] stack = new int[index + 4];
                                System.arraycopy(_stack, 0, stack, 0, index);
                                _stack = stack;
                        }
                        _stack[index] = parent;
        }
        if(index&gt;0)
                --index; // Pop actual root node (if not start) back off the stack

        _currentNode=_stack[index]; // Last parent before root node

        _oldsp = _sp = index;

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="861" startcolumn="5" endline="902" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        node = makeNodeIdentity(node);

        // iterator is not a clone
        int parent, index;

       if (_type2(node) == DTM.ATTRIBUTE_NODE)
         node = _parent2(node);

        _startNode = node;
        _stack[index = 0] = node;

        parent=node;
        while ((parent = _parent2(parent)) != NULL)
        {
          if (++index == _stack.length)
          {
            final int[] stack = new int[index*2];
            System.arraycopy(_stack, 0, stack, 0, index);
            _stack = stack;
          }
          _stack[index] = parent;
        }

        if(index&gt;0)
          --index; // Pop actual root node (if not start) back off the stack

        _currentNode=_stack[index]; // Last parent before root node

        _oldsp = _sp = index;

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xpath/internal/operations/And.java" startline="47" startcolumn="3" endline="60" endcolumn="3">
public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException
  {

    XObject expr1 = m_left.execute(xctxt);

    if (expr1.bool())
    {
      XObject expr2 = m_right.execute(xctxt);

      return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;
    }
    else
      return XBoolean.S_FALSE;
  }
</source>
        <source file="com/sun/org/apache/xpath/internal/operations/Or.java" startline="47" startcolumn="3" endline="60" endcolumn="3">
public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException
  {

    XObject expr1 = m_left.execute(xctxt);

    if (!expr1.bool())
    {
      XObject expr2 = m_right.execute(xctxt);

      return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;
    }
    else
      return XBoolean.S_TRUE;
  }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="879" startcolumn="5" endline="888" endcolumn="5">
public int getNextNamespaceNode(int baseHandle, int namespaceHandle,
                                  boolean inScope)
    {
        if (_dom != null) {
            return _dom.getNextNamespaceNode(baseHandle, namespaceHandle, inScope);
        }
        else {
            return super.getNextNamespaceNode(baseHandle, namespaceHandle, inScope);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="434" startcolumn="5" endline="444" endcolumn="5">
public DOM getResultTreeFrag(int initSize, int rtfType,
                                 boolean addToManager)
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.getResultTreeFrag(initSize, rtfType,
                                                  addToManager);
        }
        else {
            return _dom.getResultTreeFrag(initSize, rtfType, addToManager);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="879" startcolumn="5" endline="888" endcolumn="5">
public int getNextNamespaceNode(int baseHandle, int namespaceHandle,
                                  boolean inScope)
    {
        if (_dom != null) {
            return _dom.getNextNamespaceNode(baseHandle, namespaceHandle, inScope);
        }
        else {
            return super.getNextNamespaceNode(baseHandle, namespaceHandle, inScope);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="930" startcolumn="5" endline="939" endcolumn="5">
public char[] getStringValueChunk(int nodeHandle, int chunkIndex,
                                    int[] startAndLen)
    {
        if (_dom != null) {
            return _dom.getStringValueChunk(nodeHandle, chunkIndex, startAndLen);
        }
        else {
            return super.getStringValueChunk(nodeHandle, chunkIndex, startAndLen);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="434" startcolumn="5" endline="444" endcolumn="5">
public DOM getResultTreeFrag(int initSize, int rtfType,
                                 boolean addToManager)
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.getResultTreeFrag(initSize, rtfType,
                                                  addToManager);
        }
        else {
            return _dom.getResultTreeFrag(initSize, rtfType, addToManager);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="930" startcolumn="5" endline="939" endcolumn="5">
public char[] getStringValueChunk(int nodeHandle, int chunkIndex,
                                    int[] startAndLen)
    {
        if (_dom != null) {
            return _dom.getStringValueChunk(nodeHandle, chunkIndex, startAndLen);
        }
        else {
            return super.getStringValueChunk(nodeHandle, chunkIndex, startAndLen);
        }
    }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1570" startcolumn="5" endline="1588" endcolumn="5">
public ValidatedInfo validateWithInfo(String content, ValidationContext context, ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {

        if (context == null)
            context = fEmptyContext;

        if (validatedInfo == null)
            validatedInfo = new ValidatedInfo();
        else
            validatedInfo.memberType = null;

        // first normalize string value, and convert it to actual value
        boolean needNormalize = context==null||context.needToNormalize();
        getActualValue(content, context, validatedInfo, needNormalize);

        validate(context, validatedInfo);

        return validatedInfo;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1542" startcolumn="5" endline="1560" endcolumn="5">
public Object validate(String content, ValidationContext context, ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {

        if (context == null)
            context = fEmptyContext;

        if (validatedInfo == null)
            validatedInfo = new ValidatedInfo();
        else
            validatedInfo.memberType = null;

        // first normalize string value, and convert it to actual value
        boolean needNormalize = context==null||context.needToNormalize();
        Object ob = getActualValue(content, context, validatedInfo, needNormalize);

        validate(context, validatedInfo);

        return ob;

    }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1570" startcolumn="5" endline="1588" endcolumn="5">
public ValidatedInfo validateWithInfo(String content, ValidationContext context, ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {

        if (context == null)
            context = fEmptyContext;

        if (validatedInfo == null)
            validatedInfo = new ValidatedInfo();
        else
            validatedInfo.memberType = null;

        // first normalize string value, and convert it to actual value
        boolean needNormalize = context==null||context.needToNormalize();
        getActualValue(content, context, validatedInfo, needNormalize);

        validate(context, validatedInfo);

        return validatedInfo;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1593" startcolumn="5" endline="1611" endcolumn="5">
public Object validate(Object content, ValidationContext context, ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {

        if (context == null)
            context = fEmptyContext;

        if (validatedInfo == null)
            validatedInfo = new ValidatedInfo();
        else
            validatedInfo.memberType = null;

        // first normalize string value, and convert it to actual value
        boolean needNormalize = context==null||context.needToNormalize();
        Object ob = getActualValue(content, context, validatedInfo, needNormalize);

        validate(context, validatedInfo);

        return ob;

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="882" startcolumn="5" endline="891" endcolumn="5">
public void processingInstruction(String target, String data)
        throws SAXException
    {
          if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.processingInstruction(target, data);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="323" startcolumn="5" endline="332" endcolumn="5">
public void addUniqueAttribute(String rawName, String value, int flags)
        throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.addUniqueAttribute(rawName, value, flags);

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="882" startcolumn="5" endline="891" endcolumn="5">
public void processingInstruction(String target, String data)
        throws SAXException
    {
          if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.processingInstruction(target, data);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="775" startcolumn="5" endline="786" endcolumn="5">
public void externalEntityDecl(
        String name,
        String publicId,
        String systemId)
        throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.externalEntityDecl(name, publicId, systemId);
    }
</source>
    </clone>
    <clone nlines="26" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="260" startcolumn="5" endline="285" endcolumn="5">
public void setFeature(String name, boolean value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        if (name == null) {
            throw new NullPointerException();
        }
        try {
            fComponentManager.setFeature(name, value);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key;
            if (e.getType() == Status.NOT_ALLOWED) {
                //for now, the identifier can only be (XMLConstants.FEATURE_SECURE_PROCESSING)
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    "jaxp-secureprocessing-feature", null));
            } else if (e.getType() == Status.NOT_RECOGNIZED) {
                key = "feature-not-recognized";
            } else {
                key = "feature-not-supported";
            }
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="173" startcolumn="5" endline="199" endcolumn="5">
public void setFeature(String name, boolean value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        if (name == null) {
            throw new NullPointerException();
        }
        try {
            fComponentManager.setFeature(name, value);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key;
            if (e.getType() == Status.NOT_ALLOWED) {
                //for now, the identifier can only be (XMLConstants.FEATURE_SECURE_PROCESSING)
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    "jaxp-secureprocessing-feature", null));
            } else if (e.getType() == Status.NOT_RECOGNIZED) {
                key = "feature-not-recognized";
            } else {
                key = "feature-not-supported";
            }
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
        fConfigurationChanged = true;
    }
</source>
    </clone>
    <clone nlines="17" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="305" startcolumn="5" endline="321" endcolumn="5">
public void setProperty(String name, Object object)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        if (name == null) {
            throw new NullPointerException();
        }
        try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="223" startcolumn="5" endline="240" endcolumn="5">
public void setProperty(String name, Object object)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        if (name == null) {
            throw new NullPointerException();
        }
        try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
        fConfigurationChanged = true;
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1015" startcolumn="5" endline="1030" endcolumn="5">
public void externalEntityDecl(String name, XMLResourceIdentifier identifier,
                                   Augmentations augs) throws XNIException {
        try {
            // SAX2 extension
            if (fDeclHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDeclHandler.externalEntityDecl(name, publicId, systemId);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1045" startcolumn="5" endline="1061" endcolumn="5">
public void unparsedEntityDecl(String name, XMLResourceIdentifier identifier,
                                   String notation,
                                   Augmentations augs) throws XNIException {
        try {
            // SAX2 extension
            if (fDTDHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDTDHandler.unparsedEntityDecl(name, publicId, systemId, notation);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1074" startcolumn="5" endline="1089" endcolumn="5">
public void notationDecl(String name, XMLResourceIdentifier identifier,
                             Augmentations augs) throws XNIException {
        try {
            // SAX1 and SAX2
            if (fDTDHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDTDHandler.notationDecl(name, publicId, systemId);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1045" startcolumn="5" endline="1061" endcolumn="5">
public void unparsedEntityDecl(String name, XMLResourceIdentifier identifier,
                                   String notation,
                                   Augmentations augs) throws XNIException {
        try {
            // SAX2 extension
            if (fDTDHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDTDHandler.unparsedEntityDecl(name, publicId, systemId, notation);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/EmptySerializer.java" startline="636" startcolumn="5" endline="645" endcolumn="5">
public void attributeDecl(
        String arg0,
        String arg1,
        String arg2,
        String arg3,
        String arg4)
        throws SAXException
    {
        couldThrowSAXException();
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/EmptySerializer.java" startline="241" startcolumn="5" endline="251" endcolumn="5">
public void addAttribute(
        String uri,
        String localName,
        String rawName,
        String type,
        String value,
        boolean XSLAttribute)
        throws SAXException
    {
        couldThrowSAXException();
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/jaxp/UnparsedEntityHandler.java" startline="136" startcolumn="5" endline="146" endcolumn="5">
public void attributeDecl(String elementName, String attributeName,
            String type, String[] enumeration, String defaultType,
            XMLString defaultValue, XMLString nonNormalizedDefaultValue,
            Augmentations augmentations) throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.attributeDecl(elementName, attributeName,
                    type, enumeration, defaultType,
                    defaultValue, nonNormalizedDefaultValue,
                    augmentations);
        }
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1194" startcolumn="5" endline="1216" endcolumn="5">
@Override
    public void attributeDecl(
        String elementName,
        String attributeName,
        String type,
        String[] enumeration,
        String defaultType,
        XMLString defaultValue,
        XMLString nonNormalizedDefaultValue,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.attributeDecl(
                elementName,
                attributeName,
                type,
                enumeration,
                defaultType,
                defaultValue,
                nonNormalizedDefaultValue,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="50" startcolumn="3" endline="61" endcolumn="3">
public static String systemId(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getSystemId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="149" startcolumn="3" endline="160" endcolumn="3">
public static int lineNumber(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getLineNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="50" startcolumn="3" endline="61" endcolumn="3">
public static String systemId(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getSystemId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="207" startcolumn="3" endline="218" endcolumn="3">
public static int columnNumber(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getColumnNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="96" startcolumn="3" endline="107" endcolumn="3">
public static String publicId(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getPublicId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="149" startcolumn="3" endline="160" endcolumn="3">
public static int lineNumber(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getLineNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="96" startcolumn="3" endline="107" endcolumn="3">
public static String publicId(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getPublicId();
    else
      return null;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/NodeInfo.java" startline="207" startcolumn="3" endline="218" endcolumn="3">
public static int columnNumber(ExpressionContext context)
  {
    Node contextNode = context.getContextNode();
    int nodeHandler = ((DTMNodeProxy)contextNode).getDTMNodeNumber();
    SourceLocator locator = ((DTMNodeProxy)contextNode).getDTM()
      .getSourceLocatorFor(nodeHandler);

    if (locator != null)
      return locator.getColumnNumber();
    else
      return -1;
  }
</source>
    </clone>
    <clone nlines="37" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/XML11Char.java" startline="289" startcolumn="5" endline="325" endcolumn="5">
public static boolean isXML11ValidName(String name) {
        int length = name.length();
        if (length == 0)
            return false;
        int i = 1;
        char ch = name.charAt(0);
        if( !isXML11NameStart(ch) ) {
            if ( length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                char ch2 = name.charAt(1);
                if ( !XMLChar.isLowSurrogate(ch2) ||
                     !isXML11NameStart(XMLChar.supplemental(ch, ch2)) ) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = name.charAt(i);
            if ( !isXML11Name(ch) ) {
                if ( ++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                    char ch2 = name.charAt(i);
                    if ( !XMLChar.isLowSurrogate(ch2) ||
                         !isXML11Name(XMLChar.supplemental(ch, ch2)) ) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XML11Char.java" startline="293" startcolumn="5" endline="330" endcolumn="5">
public static boolean isXML11ValidName(String name) {
        final int length = name.length();
        if (length == 0) {
            return false;
        }
        int i = 1;
        char ch = name.charAt(0);
        if (!isXML11NameStart(ch)) {
            if (length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch)) {
                char ch2 = name.charAt(1);
                if (!XMLChar.isLowSurrogate(ch2) ||
                    !isXML11NameStart(XMLChar.supplemental(ch, ch2))) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = name.charAt(i);
            if (!isXML11Name(ch)) {
                if (++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch)) {
                    char ch2 = name.charAt(i);
                    if (!XMLChar.isLowSurrogate(ch2) ||
                        !isXML11Name(XMLChar.supplemental(ch, ch2))) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="37" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/XML11Char.java" startline="289" startcolumn="5" endline="325" endcolumn="5">
public static boolean isXML11ValidName(String name) {
        int length = name.length();
        if (length == 0)
            return false;
        int i = 1;
        char ch = name.charAt(0);
        if( !isXML11NameStart(ch) ) {
            if ( length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                char ch2 = name.charAt(1);
                if ( !XMLChar.isLowSurrogate(ch2) ||
                     !isXML11NameStart(XMLChar.supplemental(ch, ch2)) ) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = name.charAt(i);
            if ( !isXML11Name(ch) ) {
                if ( ++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                    char ch2 = name.charAt(i);
                    if ( !XMLChar.isLowSurrogate(ch2) ||
                         !isXML11Name(XMLChar.supplemental(ch, ch2)) ) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XML11Char.java" startline="343" startcolumn="5" endline="380" endcolumn="5">
public static boolean isXML11ValidNCName(String ncName) {
        final int length = ncName.length();
        if (length == 0) {
            return false;
        }
        int i = 1;
        char ch = ncName.charAt(0);
        if (!isXML11NCNameStart(ch)) {
            if (length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch)) {
                char ch2 = ncName.charAt(1);
                if (!XMLChar.isLowSurrogate(ch2) ||
                    !isXML11NCNameStart(XMLChar.supplemental(ch, ch2))) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = ncName.charAt(i);
            if (!isXML11NCName(ch)) {
                if (++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch)) {
                    char ch2 = ncName.charAt(i);
                    if (!XMLChar.isLowSurrogate(ch2) ||
                        !isXML11NCName(XMLChar.supplemental(ch, ch2))) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="37" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/XML11Char.java" startline="339" startcolumn="5" endline="375" endcolumn="5">
public static boolean isXML11ValidNCName(String ncName) {
        int length = ncName.length();
        if (length == 0)
            return false;
        int i = 1;
        char ch = ncName.charAt(0);
        if( !isXML11NCNameStart(ch) ) {
            if ( length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                char ch2 = ncName.charAt(1);
                if ( !XMLChar.isLowSurrogate(ch2) ||
                     !isXML11NCNameStart(XMLChar.supplemental(ch, ch2)) ) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = ncName.charAt(i);
            if ( !isXML11NCName(ch) ) {
                if ( ++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                    char ch2 = ncName.charAt(i);
                    if ( !XMLChar.isLowSurrogate(ch2) ||
                         !isXML11NCName(XMLChar.supplemental(ch, ch2)) ) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XML11Char.java" startline="293" startcolumn="5" endline="330" endcolumn="5">
public static boolean isXML11ValidName(String name) {
        final int length = name.length();
        if (length == 0) {
            return false;
        }
        int i = 1;
        char ch = name.charAt(0);
        if (!isXML11NameStart(ch)) {
            if (length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch)) {
                char ch2 = name.charAt(1);
                if (!XMLChar.isLowSurrogate(ch2) ||
                    !isXML11NameStart(XMLChar.supplemental(ch, ch2))) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = name.charAt(i);
            if (!isXML11Name(ch)) {
                if (++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch)) {
                    char ch2 = name.charAt(i);
                    if (!XMLChar.isLowSurrogate(ch2) ||
                        !isXML11Name(XMLChar.supplemental(ch, ch2))) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="37" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/XML11Char.java" startline="339" startcolumn="5" endline="375" endcolumn="5">
public static boolean isXML11ValidNCName(String ncName) {
        int length = ncName.length();
        if (length == 0)
            return false;
        int i = 1;
        char ch = ncName.charAt(0);
        if( !isXML11NCNameStart(ch) ) {
            if ( length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                char ch2 = ncName.charAt(1);
                if ( !XMLChar.isLowSurrogate(ch2) ||
                     !isXML11NCNameStart(XMLChar.supplemental(ch, ch2)) ) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = ncName.charAt(i);
            if ( !isXML11NCName(ch) ) {
                if ( ++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                    char ch2 = ncName.charAt(i);
                    if ( !XMLChar.isLowSurrogate(ch2) ||
                         !isXML11NCName(XMLChar.supplemental(ch, ch2)) ) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XML11Char.java" startline="343" startcolumn="5" endline="380" endcolumn="5">
public static boolean isXML11ValidNCName(String ncName) {
        final int length = ncName.length();
        if (length == 0) {
            return false;
        }
        int i = 1;
        char ch = ncName.charAt(0);
        if (!isXML11NCNameStart(ch)) {
            if (length &gt; 1 &amp;&amp; isXML11NameHighSurrogate(ch)) {
                char ch2 = ncName.charAt(1);
                if (!XMLChar.isLowSurrogate(ch2) ||
                    !isXML11NCNameStart(XMLChar.supplemental(ch, ch2))) {
                    return false;
                }
                i = 2;
            }
            else {
                return false;
            }
        }
        while (i &lt; length) {
            ch = ncName.charAt(i);
            if (!isXML11NCName(ch)) {
                if (++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch)) {
                    char ch2 = ncName.charAt(i);
                    if (!XMLChar.isLowSurrogate(ch2) ||
                        !isXML11NCName(XMLChar.supplemental(ch, ch2))) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            ++i;
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="21" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/XML11Char.java" startline="387" startcolumn="5" endline="407" endcolumn="5">
public static boolean isXML11ValidNmtoken(String nmtoken) {
        int length = nmtoken.length();
        if (length == 0)
            return false;
        for (int i = 0; i &lt; length; ++i ) {
            char ch = nmtoken.charAt(i);
            if( !isXML11Name(ch) ) {
                if ( ++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch) ) {
                    char ch2 = nmtoken.charAt(i);
                    if ( !XMLChar.isLowSurrogate(ch2) ||
                         !isXML11Name(XMLChar.supplemental(ch, ch2)) ) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XML11Char.java" startline="392" startcolumn="5" endline="413" endcolumn="5">
public static boolean isXML11ValidNmtoken(String nmtoken) {
        final int length = nmtoken.length();
        if (length == 0) {
            return false;
        }
        for (int i = 0; i &lt; length; ++i) {
            char ch = nmtoken.charAt(i);
            if (!isXML11Name(ch)) {
                if (++i &lt; length &amp;&amp; isXML11NameHighSurrogate(ch)) {
                    char ch2 = nmtoken.charAt(i);
                    if (!XMLChar.isLowSurrogate(ch2) ||
                        !isXML11Name(XMLChar.supplemental(ch, ch2))) {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="212" startcolumn="5" endline="221" endcolumn="5">
public static String sanitizePath(String uri) {
        if (uri == null) {
            return "";
        }
        int i = uri.lastIndexOf("/");
        if (i &gt; 0) {
            return uri.substring(i+1, uri.length());
        }
        return "";
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="206" startcolumn="5" endline="215" endcolumn="5">
public static String sanitizePath(String uri) {
        if (uri == null) {
            return "";
        }
        int i = uri.lastIndexOf("/");
        if (i &gt; 0) {
            return uri.substring(i+1, uri.length());
        }
        return uri;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="106" startcolumn="5" endline="115" endcolumn="5">
public AdaptiveResultTreeImpl(XSLTCDTMManager dtmManager, int documentID,
                                  DTMWSFilter wsfilter, int initSize,
                                  boolean buildIdIndex)
    {
        super(dtmManager, documentID);

        _wsfilter = wsfilter;
        _initSize = initSize;
        _buildIdIndex = buildIdIndex;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/CurrentNodeListIterator.java" startline="90" startcolumn="5" endline="100" endcolumn="5">
public CurrentNodeListIterator(DTMAxisIterator source, boolean docOrder,
                                   CurrentNodeListFilter filter,
                                   int currentNode,
                                   AbstractTranslet translet)
    {
        _source = source;
        _filter = filter;
        _translet = translet;
        _docOrder = docOrder;
        _currentNode = currentNode;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="106" startcolumn="5" endline="115" endcolumn="5">
public AdaptiveResultTreeImpl(XSLTCDTMManager dtmManager, int documentID,
                                  DTMWSFilter wsfilter, int initSize,
                                  boolean buildIdIndex)
    {
        super(dtmManager, documentID);

        _wsfilter = wsfilter;
        _initSize = initSize;
        _buildIdIndex = buildIdIndex;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMInputImpl.java" startline="129" startcolumn="5" endline="139" endcolumn="5">
public DOMInputImpl(String publicId, String systemId,
                          String baseSystemId, InputStream byteStream,
                          String encoding) {

                fPublicId = publicId;
                fSystemId = systemId;
                fBaseSystemId = baseSystemId;
                fByteStream = byteStream;
                fEncoding = encoding;

    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="106" startcolumn="5" endline="115" endcolumn="5">
public AdaptiveResultTreeImpl(XSLTCDTMManager dtmManager, int documentID,
                                  DTMWSFilter wsfilter, int initSize,
                                  boolean buildIdIndex)
    {
        super(dtmManager, documentID);

        _wsfilter = wsfilter;
        _initSize = initSize;
        _buildIdIndex = buildIdIndex;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMInputImpl.java" startline="158" startcolumn="6" endline="168" endcolumn="6">
public DOMInputImpl(String publicId, String systemId,
                          String baseSystemId, Reader charStream,
                          String encoding) {

                fPublicId = publicId;
                fSystemId = systemId;
                fBaseSystemId = baseSystemId;
                fCharStream = charStream;
                fEncoding = encoding;

     }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="541" startcolumn="5" endline="555" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = (node == DTM.NULL) ? DTM.NULL : NOTPROCESSED;

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/SAXImpl.java" startline="1414" startcolumn="9" endline="1428" endcolumn="9">
public DTMAxisIterator setStartNode(int node) {
            //%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
            if (node == DTMDefaultBase.ROOTNODE) {
                node = getDocument();
            }

            if (_isRestartable) {
                _startNode = node;
                _currentNode = (node == DTM.NULL) ? DTM.NULL : NOTPROCESSED;

                return resetPosition();
            }

            return this;
        }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="607" startcolumn="5" endline="621" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, true);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="831" startcolumn="5" endline="845" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, false);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="984" startcolumn="5" endline="998" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="514" startcolumn="5" endline="528" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="354" startcolumn="5" endline="366" endcolumn="5">
public int createDeferredEntityReference(String name, String baseURI) {

        // create node
        int nodeIndex = createNode(Node.ENTITY_REFERENCE_NODE);
        int chunk     = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index     = nodeIndex &amp; CHUNK_MASK;
        setChunkValue(fNodeName, name, chunk, index);
        setChunkValue(fNodeValue, baseURI, chunk, index);

        // return node index
        return nodeIndex;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="549" startcolumn="5" endline="563" endcolumn="5">
public int createDeferredTextNode(String data,
                                      boolean ignorableWhitespace) {

        // create node
        int nodeIndex = createNode(Node.TEXT_NODE);
        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        setChunkValue(fNodeValue, data, chunk, index);
        // use extra to store ignorableWhitespace info
        setChunkIndex(fNodeExtra, ignorableWhitespace ?  1 : 0, chunk, index);

        // return node index
        return nodeIndex;

    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="400" startcolumn="5" endline="412" endcolumn="5">
public int createDeferredElement(String elementURI, String elementName) {

        // create node
        int elementNodeIndex = createNode(Node.ELEMENT_NODE);
        int elementChunk     = elementNodeIndex &gt;&gt; CHUNK_SHIFT;
        int elementIndex     = elementNodeIndex &amp; CHUNK_MASK;
        setChunkValue(fNodeName, elementName, elementChunk, elementIndex);
        setChunkValue(fNodeURI, elementURI, elementChunk, elementIndex);

        // return node index
        return elementNodeIndex;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="549" startcolumn="5" endline="563" endcolumn="5">
public int createDeferredTextNode(String data,
                                      boolean ignorableWhitespace) {

        // create node
        int nodeIndex = createNode(Node.TEXT_NODE);
        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        setChunkValue(fNodeValue, data, chunk, index);
        // use extra to store ignorableWhitespace info
        setChunkIndex(fNodeExtra, ignorableWhitespace ?  1 : 0, chunk, index);

        // return node index
        return nodeIndex;

    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="580" startcolumn="5" endline="591" endcolumn="5">
public int createDeferredProcessingInstruction(String target,
                                                   String data) {
        // create node
        int nodeIndex = createNode(Node.PROCESSING_INSTRUCTION_NODE);
        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        setChunkValue(fNodeName, target, chunk, index);
        setChunkValue(fNodeValue, data, chunk, index);
        // return node index
        return nodeIndex;

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="549" startcolumn="5" endline="563" endcolumn="5">
public int createDeferredTextNode(String data,
                                      boolean ignorableWhitespace) {

        // create node
        int nodeIndex = createNode(Node.TEXT_NODE);
        int chunk = nodeIndex &gt;&gt; CHUNK_SHIFT;
        int index = nodeIndex &amp; CHUNK_MASK;
        setChunkValue(fNodeValue, data, chunk, index);
        // use extra to store ignorableWhitespace info
        setChunkIndex(fNodeExtra, ignorableWhitespace ?  1 : 0, chunk, index);

        // return node index
        return nodeIndex;

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="328" startcolumn="5" endline="337" endcolumn="5">
public void copy(DTMAxisIterator nodes, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(nodes, handler);
        }
        else {
            super.copy(nodes, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="339" startcolumn="5" endline="348" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.shallowCopy(node, handler);
        }
        else {
            return super.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="328" startcolumn="5" endline="337" endcolumn="5">
public void copy(DTMAxisIterator nodes, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(nodes, handler);
        }
        else {
            super.copy(nodes, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="317" startcolumn="5" endline="326" endcolumn="5">
public void copy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(node, handler);
        }
        else {
            super.copy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="328" startcolumn="5" endline="337" endcolumn="5">
public void copy(DTMAxisIterator nodes, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(nodes, handler);
        }
        else {
            super.copy(nodes, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="366" startcolumn="5" endline="375" endcolumn="5">
public void characters(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.characters(node, handler);
        }
        else {
            super.characters(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="328" startcolumn="5" endline="337" endcolumn="5">
public void copy(DTMAxisIterator nodes, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(nodes, handler);
        }
        else {
            super.copy(nodes, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="314" startcolumn="5" endline="323" endcolumn="5">
public String shallowCopy(final int node, SerializationHandler handler)
        throws TransletException
    {
        if (_enhancedDOM != null) {
            return _enhancedDOM.shallowCopy(node, handler);
        }
        else {
            return _dom.shallowCopy(node, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="328" startcolumn="5" endline="337" endcolumn="5">
public void copy(DTMAxisIterator nodes, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(nodes, handler);
        }
        else {
            super.copy(nodes, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/DOMAdapter.java" startline="330" startcolumn="5" endline="339" endcolumn="5">
public void characters(final int textNode, SerializationHandler handler)
      throws TransletException
    {
        if (_enhancedDOM != null) {
            _enhancedDOM.characters(textNode, handler);
        }
        else {
            _dom.characters(textNode, handler);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="328" startcolumn="5" endline="337" endcolumn="5">
public void copy(DTMAxisIterator nodes, SerializationHandler handler)
        throws TransletException
    {
        if (_dom != null) {
            _dom.copy(nodes, handler);
        }
        else {
            super.copy(nodes, handler);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/AdaptiveResultTreeImpl.java" startline="487" startcolumn="5" endline="496" endcolumn="5">
public String lookupNamespace(int node, String prefix)
        throws TransletException
    {
        if (_dom != null) {
            return _dom.lookupNamespace(node, prefix);
        }
        else {
            return super.lookupNamespace(node, prefix);
        }
    }
</source>
    </clone>
    <clone nlines="17" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="505" startcolumn="5" endline="526" endcolumn="5">
public void setFeature(String featureId, boolean state)
        throws XMLConfigurationException {

        //
        // Xerces features
        //

        if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="577" startcolumn="5" endline="593" endcolumn="5">
public void setProperty(String propertyId, Object value)
        throws XMLConfigurationException {

        //
        // Xerces properties
        //

        if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();

            if (suffixLength == Constants.ERROR_HANDLER_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.ERROR_HANDLER_PROPERTY)) {
                fErrorHandler = (XMLErrorHandler)value;
            }
        }

    }
</source>
    </clone>
    <clone nlines="18" distance="1">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltSets.java" startline="128" startcolumn="3" endline="145" endcolumn="3">
public static NodeList intersection(NodeList nl1, NodeList nl2)
  {
    NodeSet ns1 = new NodeSet(nl1);
    NodeSet ns2 = new NodeSet(nl2);
    NodeSet inter = new NodeSet();

    inter.setShouldCacheNodes(true);

    for (int i = 0; i &lt; ns1.getLength(); i++)
    {
      Node n = ns1.elementAt(i);

      if (ns2.contains(n))
        inter.addElement(n);
    }

    return inter;
  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltSets.java" startline="158" startcolumn="3" endline="176" endcolumn="3">
public static NodeList difference(NodeList nl1, NodeList nl2)
  {
    NodeSet ns1 = new NodeSet(nl1);
    NodeSet ns2 = new NodeSet(nl2);

    NodeSet diff = new NodeSet();

    diff.setShouldCacheNodes(true);

    for (int i = 0; i &lt; ns1.getLength(); i++)
    {
      Node n = ns1.elementAt(i);

      if (!ns2.contains(n))
        diff.addElement(n);
    }

    return diff;
  }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/bcel/internal/classfile/ExceptionTable.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
ExceptionTable(int name_index, int length, DataInputStream file,
                 ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (int[])null, constant_pool);

    number_of_exceptions  = file.readUnsignedShort();
    exception_index_table = new int[number_of_exceptions];

    for(int i=0; i &lt; number_of_exceptions; i++)
      exception_index_table[i] = file.readUnsignedShort();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/InnerClasses.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
InnerClasses(int name_index, int length, DataInputStream file,
               ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (InnerClass[])null, constant_pool);

    number_of_classes = file.readUnsignedShort();
    inner_classes = new InnerClass[number_of_classes];

    for(int i=0; i &lt; number_of_classes; i++)
      inner_classes[i] = new InnerClass(file);
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/ExceptionTable.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
ExceptionTable(int name_index, int length, DataInputStream file,
                 ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (int[])null, constant_pool);

    number_of_exceptions  = file.readUnsignedShort();
    exception_index_table = new int[number_of_exceptions];

    for(int i=0; i &lt; number_of_exceptions; i++)
      exception_index_table[i] = file.readUnsignedShort();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/StackMap.java" startline="104" startcolumn="3" endline="114" endcolumn="3">
StackMap(int name_index, int length, DataInputStream file,
           ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (StackMapEntry[])null, constant_pool);

    map_length = file.readUnsignedShort();
    map = new StackMapEntry[map_length];

    for(int i=0; i &lt; map_length; i++)
      map[i] = new StackMapEntry(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/bcel/internal/classfile/ExceptionTable.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
ExceptionTable(int name_index, int length, DataInputStream file,
                 ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (int[])null, constant_pool);

    number_of_exceptions  = file.readUnsignedShort();
    exception_index_table = new int[number_of_exceptions];

    for(int i=0; i &lt; number_of_exceptions; i++)
      exception_index_table[i] = file.readUnsignedShort();
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LineNumberTable.java" startline="108" startcolumn="3" endline="117" endcolumn="3">
LineNumberTable(int name_index, int length, DataInputStream file,
                  ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LineNumber[])null, constant_pool);
    line_number_table_length = (file.readUnsignedShort());
    line_number_table = new LineNumber[line_number_table_length];

    for(int i=0; i &lt; line_number_table_length; i++)
      line_number_table[i] = new LineNumber(file);
  }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/LineNumberTable.java" startline="108" startcolumn="3" endline="117" endcolumn="3">
LineNumberTable(int name_index, int length, DataInputStream file,
                  ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LineNumber[])null, constant_pool);
    line_number_table_length = (file.readUnsignedShort());
    line_number_table = new LineNumber[line_number_table_length];

    for(int i=0; i &lt; line_number_table_length; i++)
      line_number_table[i] = new LineNumber(file);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/StackMap.java" startline="104" startcolumn="3" endline="114" endcolumn="3">
StackMap(int name_index, int length, DataInputStream file,
           ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (StackMapEntry[])null, constant_pool);

    map_length = file.readUnsignedShort();
    map = new StackMapEntry[map_length];

    for(int i=0; i &lt; map_length; i++)
      map[i] = new StackMapEntry(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/LineNumberTable.java" startline="108" startcolumn="3" endline="117" endcolumn="3">
LineNumberTable(int name_index, int length, DataInputStream file,
                  ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LineNumber[])null, constant_pool);
    line_number_table_length = (file.readUnsignedShort());
    line_number_table = new LineNumber[line_number_table_length];

    for(int i=0; i &lt; line_number_table_length; i++)
      line_number_table[i] = new LineNumber(file);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.java" startline="107" startcolumn="3" endline="117" endcolumn="3">
LocalVariableTable(int name_index, int length, DataInputStream file,
                     ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LocalVariable[])null, constant_pool);

    local_variable_table_length = (file.readUnsignedShort());
    local_variable_table = new LocalVariable[local_variable_table_length];

    for(int i=0; i &lt; local_variable_table_length; i++)
      local_variable_table[i] = new LocalVariable(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="607" startcolumn="5" endline="621" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, true);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="984" startcolumn="5" endline="998" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="607" startcolumn="5" endline="621" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, true);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="514" startcolumn="5" endline="528" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="831" startcolumn="5" endline="845" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, false);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="984" startcolumn="5" endline="998" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="831" startcolumn="5" endline="845" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, false);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="514" startcolumn="5" endline="528" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="37" distance="5">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="640" startcolumn="5" endline="676" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        node = _startNodeID = makeNodeIdentity(node);

        if(node == NULL)
        {
          _currentNode = node;
          return resetPosition();
        }

        int type = _type2(node);
        if(ExpandedNameTable.ATTRIBUTE == type
           || ExpandedNameTable.NAMESPACE == type )
        {
          _currentNode = node;
        }
        else
        {
          // Be careful to handle the Document node properly
          _currentNode = _parent2(node);
          if(NULL!=_currentNode)
            _currentNode = _firstch2(_currentNode);
          else
            _currentNode = node;
        }

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1110" startcolumn="5" endline="1146" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        node = _startNodeID = makeNodeIdentity(node);

        if(node == NULL)
        {
          _currentNode = node;
          return resetPosition();
        }

        int type = m_expandedNameTable.getType(_exptype(node));
        if(ExpandedNameTable.ATTRIBUTE == type
           || ExpandedNameTable.NAMESPACE == type )
        {
          _currentNode = node;
        }
        else
        {
          // Be careful to handle the Document node properly
          _currentNode = _parent(node);
          if(NULL!=_currentNode)
            _currentNode = _firstch(_currentNode);
          else
            _currentNode = node;
        }

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/NameCall.java" startline="58" startcolumn="5" endline="67" endcolumn="5">
public void translate(ClassGenerator classGen, MethodGenerator methodGen) {
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();

        final int getName = cpg.addInterfaceMethodref(DOM_INTF,
                                                      GET_NODE_NAME,
                                                      GET_NODE_NAME_SIG);
        super.translate(classGen, methodGen);
        il.append(new INVOKEINTERFACE(getName, 2));
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/NamespaceUriCall.java" startline="57" startcolumn="5" endline="68" endcolumn="5">
public void translate(ClassGenerator classGen,
                          MethodGenerator methodGen) {
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();

        // Returns the string value for a node in the DOM
        final int getNamespace = cpg.addInterfaceMethodref(DOM_INTF,
                                                           "getNamespaceName",
                                                           "(I)"+STRING_SIG);
        super.translate(classGen, methodGen);
        il.append(new INVOKEINTERFACE(getNamespace, 2));
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDValidator.java" startline="739" startcolumn="5" endline="749" endcolumn="5">
public void startElement(QName element, XMLAttributes attributes, Augmentations augs)
    throws XNIException {

        handleStartElement(element, attributes, augs);
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.startElement(element, attributes, augs);

        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="743" startcolumn="5" endline="752" endcolumn="5">
public void startElement(QName element, XMLAttributes attributes, Augmentations augs)
        throws XNIException {

        Augmentations modifiedAugs = handleStartElement(element, attributes, augs);
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.startElement(element, attributes, modifiedAugs);
        }

    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDValidator.java" startline="739" startcolumn="5" endline="749" endcolumn="5">
public void startElement(QName element, XMLAttributes attributes, Augmentations augs)
    throws XNIException {

        handleStartElement(element, attributes, augs);
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.startElement(element, attributes, augs);

        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1341" startcolumn="5" endline="1351" endcolumn="5">
@Override
    public void notationDecl(
        String name,
        XMLResourceIdentifier identifier,
        Augmentations augmentations)
        throws XNIException {
        this.addNotation(name, identifier, augmentations);
        if (fDTDHandler != null) {
            fDTDHandler.notationDecl(name, identifier, augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="24" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="380" startcolumn="5" endline="403" endcolumn="5">
public void startGeneralEntity(String name, XMLResourceIdentifier identifier,
                                   String encoding, Augmentations augs)
        throws XNIException {

        try {
            // Only report startEntity if this entity was actually read.
            if (augs != null &amp;&amp; Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // report skipped entity to content handler
                if (fContentHandler != null) {
                    fContentHandler.skippedEntity(name);
                }
            }
            else {
                // SAX2 extension
                if (fLexicalHandler != null) {
                    fLexicalHandler.startEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="808" startcolumn="5" endline="832" endcolumn="5">
public void startParameterEntity(String name,
                                     XMLResourceIdentifier identifier,
                                     String encoding, Augmentations augs)
        throws XNIException {

        try {
            // Only report startEntity if this entity was actually read.
            if (augs != null &amp;&amp; Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // report skipped entity to content handler
                if (fContentHandler != null) {
                    fContentHandler.skippedEntity(name);
                }
            }
            else {
                // SAX2 extension
                if (fLexicalHandler != null &amp;&amp; fLexicalHandlerParameterEntities) {
                    fLexicalHandler.startEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }

    }
</source>
    </clone>
    <clone nlines="47" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDynamic.java" startline="182" startcolumn="3" endline="228" endcolumn="3">
public static double min(ExpressionContext myContext, NodeList nl, String expr)
    throws SAXNotSupportedException
  {

    XPathContext xctxt = null;
    if (myContext instanceof XPathContext.XPathExpressionContext)
      xctxt = ((XPathContext.XPathExpressionContext) myContext).getXPathContext();
    else
      throw new SAXNotSupportedException(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_CONTEXT_PASSED, new Object[]{myContext }));

    if (expr == null || expr.length() == 0)
      return Double.NaN;

    NodeSetDTM contextNodes = new NodeSetDTM(nl, xctxt);
    xctxt.pushContextNodeList(contextNodes);

    double minValue = Double.MAX_VALUE;
    for (int i = 0; i &lt; nl.getLength(); i++)
    {
      int contextNode = contextNodes.item(i);
      xctxt.pushCurrentNode(contextNode);

      double result = 0;
      try
      {
        XPath dynamicXPath = new XPath(expr, xctxt.getSAXLocator(),
                                       xctxt.getNamespaceContext(),
                                       XPath.SELECT);
        result = dynamicXPath.execute(xctxt, contextNode, xctxt.getNamespaceContext()).num();
      }
      catch (TransformerException e)
      {
        xctxt.popCurrentNode();
        xctxt.popContextNodeList();
        return Double.NaN;
      }

      xctxt.popCurrentNode();

      if (result &lt; minValue)
          minValue = result;
    }

    xctxt.popContextNodeList();
    return minValue;

  }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDynamic.java" startline="101" startcolumn="3" endline="147" endcolumn="3">
public static double max(ExpressionContext myContext, NodeList nl, String expr)
    throws SAXNotSupportedException
  {

    XPathContext xctxt = null;
    if (myContext instanceof XPathContext.XPathExpressionContext)
      xctxt = ((XPathContext.XPathExpressionContext) myContext).getXPathContext();
    else
      throw new SAXNotSupportedException(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_CONTEXT_PASSED, new Object[]{myContext }));

    if (expr == null || expr.length() == 0)
      return Double.NaN;

    NodeSetDTM contextNodes = new NodeSetDTM(nl, xctxt);
    xctxt.pushContextNodeList(contextNodes);

    double maxValue = - Double.MAX_VALUE;
    for (int i = 0; i &lt; contextNodes.getLength(); i++)
    {
      int contextNode = contextNodes.item(i);
      xctxt.pushCurrentNode(contextNode);

      double result = 0;
      try
      {
        XPath dynamicXPath = new XPath(expr, xctxt.getSAXLocator(),
                                       xctxt.getNamespaceContext(),
                                       XPath.SELECT);
        result = dynamicXPath.execute(xctxt, contextNode, xctxt.getNamespaceContext()).num();
      }
      catch (TransformerException e)
      {
        xctxt.popCurrentNode();
        xctxt.popContextNodeList();
        return Double.NaN;
      }

      xctxt.popCurrentNode();

      if (result &gt; maxValue)
          maxValue = result;
    }

    xctxt.popContextNodeList();
    return maxValue;

  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/InnerClasses.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
InnerClasses(int name_index, int length, DataInputStream file,
               ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (InnerClass[])null, constant_pool);

    number_of_classes = file.readUnsignedShort();
    inner_classes = new InnerClass[number_of_classes];

    for(int i=0; i &lt; number_of_classes; i++)
      inner_classes[i] = new InnerClass(file);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/StackMap.java" startline="104" startcolumn="3" endline="114" endcolumn="3">
StackMap(int name_index, int length, DataInputStream file,
           ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (StackMapEntry[])null, constant_pool);

    map_length = file.readUnsignedShort();
    map = new StackMapEntry[map_length];

    for(int i=0; i &lt; map_length; i++)
      map[i] = new StackMapEntry(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/InnerClasses.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
InnerClasses(int name_index, int length, DataInputStream file,
               ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (InnerClass[])null, constant_pool);

    number_of_classes = file.readUnsignedShort();
    inner_classes = new InnerClass[number_of_classes];

    for(int i=0; i &lt; number_of_classes; i++)
      inner_classes[i] = new InnerClass(file);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LineNumberTable.java" startline="108" startcolumn="3" endline="117" endcolumn="3">
LineNumberTable(int name_index, int length, DataInputStream file,
                  ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LineNumber[])null, constant_pool);
    line_number_table_length = (file.readUnsignedShort());
    line_number_table = new LineNumber[line_number_table_length];

    for(int i=0; i &lt; line_number_table_length; i++)
      line_number_table[i] = new LineNumber(file);
  }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/InnerClasses.java" startline="110" startcolumn="3" endline="120" endcolumn="3">
InnerClasses(int name_index, int length, DataInputStream file,
               ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (InnerClass[])null, constant_pool);

    number_of_classes = file.readUnsignedShort();
    inner_classes = new InnerClass[number_of_classes];

    for(int i=0; i &lt; number_of_classes; i++)
      inner_classes[i] = new InnerClass(file);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.java" startline="107" startcolumn="3" endline="117" endcolumn="3">
LocalVariableTable(int name_index, int length, DataInputStream file,
                     ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LocalVariable[])null, constant_pool);

    local_variable_table_length = (file.readUnsignedShort());
    local_variable_table = new LocalVariable[local_variable_table_length];

    for(int i=0; i &lt; local_variable_table_length; i++)
      local_variable_table[i] = new LocalVariable(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/StackMap.java" startline="104" startcolumn="3" endline="114" endcolumn="3">
StackMap(int name_index, int length, DataInputStream file,
           ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (StackMapEntry[])null, constant_pool);

    map_length = file.readUnsignedShort();
    map = new StackMapEntry[map_length];

    for(int i=0; i &lt; map_length; i++)
      map[i] = new StackMapEntry(file, constant_pool);
  }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/LocalVariableTable.java" startline="107" startcolumn="3" endline="117" endcolumn="3">
LocalVariableTable(int name_index, int length, DataInputStream file,
                     ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (LocalVariable[])null, constant_pool);

    local_variable_table_length = (file.readUnsignedShort());
    local_variable_table = new LocalVariable[local_variable_table_length];

    for(int i=0; i &lt; local_variable_table_length; i++)
      local_variable_table[i] = new LocalVariable(file, constant_pool);
  }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/SimpleResultTreeImpl.java" startline="841" startcolumn="5" endline="851" endcolumn="5">
public short getNodeType(int nodeHandle)
    {
        int nodeID = getNodeIdent(nodeHandle);
        if (nodeID == RTF_TEXT)
            return DTM.TEXT_NODE;
        else if (nodeID == RTF_ROOT)
            return DTM.ROOT_NODE;
        else
            return DTM.NULL;

    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/SimpleResultTreeImpl.java" startline="403" startcolumn="5" endline="412" endcolumn="5">
public int getExpandedTypeID(final int nodeHandle)
    {
        int nodeID = getNodeIdent(nodeHandle);
        if (nodeID == RTF_TEXT)
            return DTM.TEXT_NODE;
        else if (nodeID == RTF_ROOT)
            return DTM.ROOT_NODE;
        else
            return DTM.NULL;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="359" startcolumn="5" endline="373" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getParent(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="878" startcolumn="5" endline="892" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="418" startcolumn="5" endline="432" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1504" startcolumn="5" endline="1525" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;

        // ?? -sb
        // find rightmost descendant (or self)
        // int current;
        // while ((node = getLastChild(current = node)) != NULL){}
        // _currentNode = current;
        _currentNode = m_traverser.first(node);

        // _currentNode precedes possible following(node) nodes
        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="359" startcolumn="5" endline="373" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getParent(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="607" startcolumn="5" endline="621" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, true);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="359" startcolumn="5" endline="373" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getParent(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="831" startcolumn="5" endline="845" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, false);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="878" startcolumn="5" endline="892" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="607" startcolumn="5" endline="621" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, true);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="878" startcolumn="5" endline="892" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="831" startcolumn="5" endline="845" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, false);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="418" startcolumn="5" endline="432" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="607" startcolumn="5" endline="621" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, true);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="418" startcolumn="5" endline="432" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="831" startcolumn="5" endline="845" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstNamespaceNode(node, false);

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="359" startcolumn="5" endline="373" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getParent(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="984" startcolumn="5" endline="998" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="359" startcolumn="5" endline="373" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getParent(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="514" startcolumn="5" endline="528" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="878" startcolumn="5" endline="892" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="984" startcolumn="5" endline="998" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="878" startcolumn="5" endline="892" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="514" startcolumn="5" endline="528" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="418" startcolumn="5" endline="432" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="984" startcolumn="5" endline="998" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="418" startcolumn="5" endline="432" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = makeNodeIdentity(node);

        return resetPosition();
      }

      return this;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="514" startcolumn="5" endline="528" endcolumn="5">
public DTMAxisIterator setStartNode(int node)
    {
//%HZ%: Added reference to DTMDefaultBase.ROOTNODE back in, temporarily
      if (node == DTMDefaultBase.ROOTNODE)
        node = getDocument();
      if (_isRestartable)
      {
        _startNode = node;
        _currentNode = getFirstAttributeIdentity(makeNodeIdentity(node));

        return resetPosition();
      }

      return this;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="323" startcolumn="5" endline="332" endcolumn="5">
public void addUniqueAttribute(String rawName, String value, int flags)
        throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.addUniqueAttribute(rawName, value, flags);

    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="806" startcolumn="5" endline="816" endcolumn="5">
public void characters(char[] characters, int offset, int length)
        throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.characters(characters, offset, length);

    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="775" startcolumn="5" endline="786" endcolumn="5">
public void externalEntityDecl(
        String name,
        String publicId,
        String systemId)
        throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.externalEntityDecl(name, publicId, systemId);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToUnknownStream.java" startline="806" startcolumn="5" endline="816" endcolumn="5">
public void characters(char[] characters, int offset, int length)
        throws SAXException
    {
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.characters(characters, offset, length);

    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/dom/TreeWalkerImpl.java" startline="63" startcolumn="5" endline="72" endcolumn="5">
public TreeWalkerImpl(Node root,
                          int whatToShow,
                          NodeFilter nodeFilter,
                          boolean entityReferenceExpansion) {
        fCurrentNode = root;
        fRoot = root;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/CurrentNodeListIterator.java" startline="90" startcolumn="5" endline="100" endcolumn="5">
public CurrentNodeListIterator(DTMAxisIterator source, boolean docOrder,
                                   CurrentNodeListFilter filter,
                                   int currentNode,
                                   AbstractTranslet translet)
    {
        _source = source;
        _filter = filter;
        _translet = translet;
        _docOrder = docOrder;
        _currentNode = currentNode;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/dom/TreeWalkerImpl.java" startline="63" startcolumn="5" endline="72" endcolumn="5">
public TreeWalkerImpl(Node root,
                          int whatToShow,
                          NodeFilter nodeFilter,
                          boolean entityReferenceExpansion) {
        fCurrentNode = root;
        fRoot = root;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMInputImpl.java" startline="129" startcolumn="5" endline="139" endcolumn="5">
public DOMInputImpl(String publicId, String systemId,
                          String baseSystemId, InputStream byteStream,
                          String encoding) {

                fPublicId = publicId;
                fSystemId = systemId;
                fBaseSystemId = baseSystemId;
                fByteStream = byteStream;
                fEncoding = encoding;

    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/dom/TreeWalkerImpl.java" startline="63" startcolumn="5" endline="72" endcolumn="5">
public TreeWalkerImpl(Node root,
                          int whatToShow,
                          NodeFilter nodeFilter,
                          boolean entityReferenceExpansion) {
        fCurrentNode = root;
        fRoot = root;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMInputImpl.java" startline="158" startcolumn="6" endline="168" endcolumn="6">
public DOMInputImpl(String publicId, String systemId,
                          String baseSystemId, Reader charStream,
                          String encoding) {

                fPublicId = publicId;
                fSystemId = systemId;
                fBaseSystemId = baseSystemId;
                fCharStream = charStream;
                fEncoding = encoding;

     }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="743" startcolumn="5" endline="752" endcolumn="5">
public void startElement(QName element, XMLAttributes attributes, Augmentations augs)
        throws XNIException {

        Augmentations modifiedAugs = handleStartElement(element, attributes, augs);
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.startElement(element, attributes, modifiedAugs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1341" startcolumn="5" endline="1351" endcolumn="5">
@Override
    public void notationDecl(
        String name,
        XMLResourceIdentifier identifier,
        Augmentations augmentations)
        throws XNIException {
        this.addNotation(name, identifier, augmentations);
        if (fDTDHandler != null) {
            fDTDHandler.notationDecl(name, identifier, augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xml/internal/serializer/ToSAXHandler.java" startline="315" startcolumn="5" endline="325" endcolumn="5">
public void startElement(String uri, String localName, String qName)
        throws SAXException {

        if (m_state != null) {
            m_state.resetState(getTransformer());
        }

        // fire off the start element event
        if (m_tracer != null)
            super.fireStartElem(qName);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToSAXHandler.java" startline="194" startcolumn="5" endline="208" endcolumn="5">
public void startElement(
        String arg0,
        String arg1,
        String arg2,
        Attributes arg3)
        throws SAXException
    {
        if (m_state != null) {
            m_state.resetState(getTransformer());
        }

        // fire off the start element event
        if (m_tracer != null)
            super.fireStartElem(arg2);
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="720" startcolumn="5" endline="732" endcolumn="5">
public void doctypeDecl(
        String rootElement,
        String publicId,
        String systemId,
        Augmentations augs)
        throws XNIException {

        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.doctypeDecl(rootElement, publicId, systemId, augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="997" startcolumn="5" endline="1011" endcolumn="5">
public void startGeneralEntity(
        String name,
        XMLResourceIdentifier identifier,
        String encoding,
        Augmentations augs)
        throws XNIException {

        // REVISIT: what should happen if normalize_data_ is on??
        fEntityRef = true;
        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.startGeneralEntity(name, identifier, encoding, augs);
        }

    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="720" startcolumn="5" endline="732" endcolumn="5">
public void doctypeDecl(
        String rootElement,
        String publicId,
        String systemId,
        Augmentations augs)
        throws XNIException {

        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.doctypeDecl(rootElement, publicId, systemId, augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/tools/ResolvingParser.java" startline="353" startcolumn="3" endline="362" endcolumn="3">
public void unparsedEntityDecl (String name,
                                  String publicId,
                                  String systemId,
                                  String notationName)
    throws SAXException {
    allowXMLCatalogPI = false;
    if (dtdHandler != null) {
      dtdHandler.unparsedEntityDecl (name, publicId, systemId, notationName);
    }
  }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="720" startcolumn="5" endline="732" endcolumn="5">
public void doctypeDecl(
        String rootElement,
        String publicId,
        String systemId,
        Augmentations augs)
        throws XNIException {

        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.doctypeDecl(rootElement, publicId, systemId, augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1322" startcolumn="5" endline="1336" endcolumn="5">
@Override
    public void internalEntityDecl(
        String name,
        XMLString text,
        XMLString nonNormalizedText,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.internalEntityDecl(
                name,
                text,
                nonNormalizedText,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="720" startcolumn="5" endline="732" endcolumn="5">
public void doctypeDecl(
        String rootElement,
        String publicId,
        String systemId,
        Augmentations augs)
        throws XNIException {

        // call handlers
        if (fDocumentHandler != null) {
            fDocumentHandler.doctypeDecl(rootElement, publicId, systemId, augs);
        }

    }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1411" startcolumn="5" endline="1425" endcolumn="5">
@Override
    public void startParameterEntity(
        String name,
        XMLResourceIdentifier identifier,
        String encoding,
        Augmentations augmentations)
        throws XNIException {
        if (fDTDHandler != null) {
            fDTDHandler.startParameterEntity(
                name,
                identifier,
                encoding,
                augmentations);
        }
    }
</source>
    </clone>
    <clone nlines="20" distance="1">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/RealType.java" startline="89" startcolumn="5" endline="108" endcolumn="5">
public void translateTo(ClassGenerator classGen, MethodGenerator methodGen,
                            Type type) {
        if (type == Type.String) {
            translateTo(classGen, methodGen, (StringType) type);
        }
        else if (type == Type.Boolean) {
            translateTo(classGen, methodGen, (BooleanType) type);
        }
        else if (type == Type.Reference) {
            translateTo(classGen, methodGen, (ReferenceType) type);
        }
        else if (type == Type.Int) {
            translateTo(classGen, methodGen, (IntType) type);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/IntType.java" startline="94" startcolumn="5" endline="113" endcolumn="5">
public void translateTo(ClassGenerator classGen, MethodGenerator methodGen,
                            final Type type) {
        if (type == Type.Real) {
            translateTo(classGen, methodGen, (RealType) type);
        }
        else if (type == Type.String) {
            translateTo(classGen, methodGen, (StringType) type);
        }
        else if (type == Type.Boolean) {
            translateTo(classGen, methodGen, (BooleanType) type);
        }
        else if (type == Type.Reference) {
            translateTo(classGen, methodGen, (ReferenceType) type);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
    }
</source>
    </clone>
</clones>
