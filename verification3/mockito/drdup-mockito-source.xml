<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<clones>
    <clone nlines="6" distance="1">
        <source file="java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java" startline="37" startcolumn="5" endline="43" endcolumn="5">
void cleanUpCachesForObsoleteClassLoaders() {
        Reference&lt;?&gt; reference;
        // Any weak key that is used in the map is enqueued to this reference queue once a class loader is no longer reachable.
        while ((reference = poll()) != null) {
            avoidingClassLeakageCache.remove(reference);
        }
    }
</source>
        <source file="java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java" startline="120" startcolumn="5" endline="125" endcolumn="5">
public void expungeStaleEntries() {
        Reference&lt;?&gt; reference;
        while ((reference = poll()) != null) {
            target.remove(reference);
        }
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/invocation/InvocationImpl.java" startline="113" startcolumn="5" endline="118" endcolumn="5">
public Object callRealMethod() throws Throwable {
        if (method.isAbstract()) {
            throw cannotCallAbstractRealMethod();
        }
        return realMethod.invoke(mock, rawArguments);
    }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java" startline="122" startcolumn="5" endline="128" endcolumn="5">
@Override
    public Object callRealMethod() throws Throwable {
        if (!superMethod.isInvokable()) {
            throw cannotCallAbstractRealMethod();
        }
        return superMethod.invoke();
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/invocation/InvocationImpl.java" startline="113" startcolumn="5" endline="118" endcolumn="5">
public Object callRealMethod() throws Throwable {
        if (method.isAbstract()) {
            throw cannotCallAbstractRealMethod();
        }
        return realMethod.invoke(mock, rawArguments);
    }
</source>
        <source file="java/org/mockito/internal/handler/MockHandlerImpl.java" startline="119" startcolumn="5" endline="125" endcolumn="5">
private VerificationDataImpl createVerificationData(InvocationContainerImpl invocationContainerImpl, InvocationMatcher invocationMatcher) {
        if (mockSettings.isStubOnly()) {
            throw stubPassedToVerify();     // this throws an exception
        }

        return new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="java/org/mockito/internal/stubbing/StubberImpl.java" startline="48" startcolumn="5" endline="57" endcolumn="5">
private StubberImpl doReturnValues(Object... toBeReturned) {
        if(toBeReturned == null) {
            answers.add(new Returns(null));
            return this;
        }
        for (Object r : toBeReturned) {
            answers.add(new Returns(r));
        }
        return this;
    }
</source>
        <source file="java/org/mockito/internal/stubbing/StubberImpl.java" startline="59" startcolumn="5" endline="68" endcolumn="5">
public Stubber doThrow(Throwable... toBeThrown) {
        if(toBeThrown == null) {
            answers.add(new ThrowsException(null));
            return this;
        }
        for (Throwable throwable : toBeThrown) {
            answers.add(new ThrowsException(throwable));
        }
        return this;
    }
</source>
    </clone>
    <clone nlines="7" distance="1">
        <source file="java/org/mockito/internal/util/reflection/Fields.java" startline="98" startcolumn="5" endline="104" endcolumn="5">
public static Filter&lt;InstanceField&gt; syntheticField() {
        return new Filter&lt;InstanceField&gt;() {
            public boolean isOut(InstanceField instanceField) {
                return instanceField.isSynthetic();
            }
        };
    }
</source>
        <source file="java/org/mockito/internal/util/reflection/Fields.java" startline="85" startcolumn="5" endline="91" endcolumn="5">
private static Filter&lt;InstanceField&gt; nullField() {
        return new Filter&lt;InstanceField&gt;() {
            public boolean isOut(InstanceField instanceField) {
                return instanceField.isNull();
            }
        };
    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="java/org/mockito/internal/MockitoCore.java" startline="93" startcolumn="5" endline="102" endcolumn="5">
public &lt;T&gt; void reset(T... mocks) {
        MockingProgress mockingProgress = mockingProgress();
        mockingProgress.validateState();
        mockingProgress.reset();
        mockingProgress.resetOngoingStubbing();

        for (T m : mocks) {
            resetMock(m);
        }
    }
</source>
        <source file="java/org/mockito/internal/MockitoCore.java" startline="104" startcolumn="5" endline="113" endcolumn="5">
public &lt;T&gt; void clearInvocations(T... mocks) {
        MockingProgress mockingProgress = mockingProgress();
        mockingProgress.validateState();
        mockingProgress.reset();
        mockingProgress.resetOngoingStubbing();

        for (T m : mocks) {
            getMockHandler(m).getInvocationContainer().clearInvocations();
        }
    }
</source>
    </clone>
    <clone nlines="7" distance="7">
        <source file="java/org/mockito/internal/invocation/InvocationMatcher.java" startline="69" startcolumn="5" endline="75" endcolumn="5">
private boolean safelyArgumentsMatch(Object[] actualArgs) {
        try {
            return argumentsMatch(this, actualArgs);
        } catch (Throwable t) {
            return false;
        }
    }
</source>
        <source file="java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java" startline="39" startcolumn="5" endline="45" endcolumn="5">
private static boolean safelyMatches(ArgumentMatcher m, Object arg) {
        try {
            return m.matches(arg);
        } catch (Throwable t) {
            return false;
        }
    }
</source>
    </clone>
    <clone nlines="6" distance="2">
        <source file="java/org/mockito/exceptions/base/MockitoException.java" startline="38" startcolumn="5" endline="43" endcolumn="5">
private void filterStackTrace() {
        unfilteredStackTrace = getStackTrace();
        
        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();
        filter.filter(this);
    }
</source>
        <source file="java/org/mockito/exceptions/base/MockitoSerializationIssue.java" startline="33" startcolumn="5" endline="38" endcolumn="5">
private void filterStackTrace() {
        unfilteredStackTrace = super.getStackTrace();

        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();
        filter.filter(this);
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="50" startcolumn="5" endline="58" endcolumn="5">
public static &lt;A&gt; Answer&lt;Void&gt; toAnswer(final VoidAnswer1&lt;A&gt; answer) {
        return new Answer&lt;Void&gt;() {
            @SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer((A)invocation.getArgument(0));
                return null;
            }
        };
    }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="35" startcolumn="5" endline="42" endcolumn="5">
public static &lt;T, A&gt; Answer&lt;T&gt; toAnswer(final Answer1&lt;T, A&gt; answer) {
        return new Answer&lt;T&gt;() {
            @SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer((A)invocation.getArgument(0));
            }
        };
    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="86" startcolumn="5" endline="96" endcolumn="5">
public static &lt;A, B&gt; Answer&lt;Void&gt; toAnswer(final VoidAnswer2&lt;A, B&gt; answer) {
        return new Answer&lt;Void&gt;() {
            @SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1));
                return null;
            }
        };
    }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="68" startcolumn="5" endline="77" endcolumn="5">
public static &lt;T, A, B&gt; Answer&lt;T&gt; toAnswer(final Answer2&lt;T, A, B&gt; answer) {
        return new Answer&lt;T&gt;() {
            @SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1));
            }
        };
    }
</source>
    </clone>
    <clone nlines="11" distance="8">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="127" startcolumn="5" endline="138" endcolumn="5">
public static &lt;A, B, C&gt; Answer&lt;Void&gt; toAnswer(final VoidAnswer3&lt;A, B, C&gt; answer) {
        return new Answer&lt;Void&gt;() {
            @SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2));
                return null;
            }
        };
    }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="107" startcolumn="5" endline="117" endcolumn="5">
public static &lt;T, A, B, C&gt; Answer&lt;T&gt; toAnswer(final Answer3&lt;T, A, B, C&gt; answer) {
        return new Answer&lt;T&gt;() {
            @SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2));
            }
        };
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/util/reflection/Constructors.java" startline="13" startcolumn="5" endline="19" endcolumn="5">
public static Constructor&lt;?&gt; noArgConstructorOf(Class&lt;?&gt; classToMock) {
        try {
            return classToMock.getDeclaredConstructor();
        } catch (NoSuchMethodException e) {
            return null;
        }
    }
</source>
        <source file="java/org/mockito/internal/util/junit/JUnitFailureHacker.java" startline="71" startcolumn="5" endline="77" endcolumn="5">
private static Field getField(Class&lt;?&gt; clazz, String field) {
        try {
            return clazz.getDeclaredField(field);
        } catch (NoSuchFieldException e) {
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="8" distance="1">
        <source file="java/org/mockito/internal/verification/AtMost.java" startline="50" startcolumn="5" endline="57" endcolumn="5">
private void removeAlreadyVerified(List&lt;Invocation&gt; invocations) {
        for (Iterator&lt;Invocation&gt; iterator = invocations.iterator(); iterator.hasNext(); ) {
            Invocation i = iterator.next();
            if (i.isVerified()) {
                iterator.remove();
            }
        }
    }
</source>
        <source file="java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java" startline="38" startcolumn="5" endline="45" endcolumn="5">
private static void removeAlreadyVerified(List&lt;Invocation&gt; invocations) {
        for (Iterator&lt;Invocation&gt; iterator = invocations.iterator(); iterator.hasNext(); ) {
            Invocation i = iterator.next();
            if (i.isVerified()) {
                iterator.remove();
            }
        }
    }
</source>
    </clone>
    <clone nlines="8" distance="1">
        <source file="java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java" startline="46" startcolumn="5" endline="53" endcolumn="5">
private void removeAlreadyVerified(List&lt;Invocation&gt; invocations) {
        for (Iterator&lt;Invocation&gt; iterator = invocations.iterator(); iterator.hasNext(); ) {
            Invocation i = iterator.next();
            if (i.isVerified()) {
                iterator.remove();
            }
        }
    }
</source>
        <source file="java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java" startline="38" startcolumn="5" endline="45" endcolumn="5">
private static void removeAlreadyVerified(List&lt;Invocation&gt; invocations) {
        for (Iterator&lt;Invocation&gt; iterator = invocations.iterator(); iterator.hasNext(); ) {
            Invocation i = iterator.next();
            if (i.isVerified()) {
                iterator.remove();
            }
        }
    }
</source>
    </clone>
    <clone nlines="7" distance="4">
        <source file="java/org/mockito/internal/verification/VerificationOverTimeImpl.java" startline="115" startcolumn="5" endline="121" endcolumn="5">
private void sleep(long sleep) {
        try {
            Thread.sleep(sleep);
        } catch (InterruptedException ie) {
            throw new RuntimeException("Thread sleep has been interrupted", ie);
        }
    }
</source>
        <source file="java/org/mockito/internal/verification/Description.java" startline="33" startcolumn="5" endline="41" endcolumn="5">
@Override
    public void verify(VerificationData data) {
        try {
            verification.verify(data);
            
        } catch (MockitoAssertionError e) {
            throw new MockitoAssertionError(e, description);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="8">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="172" startcolumn="5" endline="184" endcolumn="5">
public static &lt;A, B, C, D&gt; Answer&lt;Void&gt; toAnswer(final VoidAnswer4&lt;A, B, C, D&gt; answer) {
        return new Answer&lt;Void&gt;() {
            @SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3));
                return null;
            }
        };
    }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="150" startcolumn="5" endline="161" endcolumn="5">
public static &lt;T, A, B, C, D&gt; Answer&lt;T&gt; toAnswer(final Answer4&lt;T, A, B, C, D&gt; answer) {
        return new Answer&lt;T&gt;() {
            @SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3));
            }
        };
    }
</source>
    </clone>
    <clone nlines="13" distance="7">
        <source file="java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java" startline="258" startcolumn="13" endline="270" endcolumn="13">
@Override
            public String nonMockableReason() {
                if (mockable()) {
                    return "";
                }
                if (type.isPrimitive()) {
                    return "primitive type";
                }
                if (EXCLUDES.contains(type)) {
                    return "Cannot mock wrapper types, String.class or Class.class";
                }
                return "VM does not not support modification of given type";
            }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java" startline="140" startcolumn="13" endline="152" endcolumn="13">
@Override
            public String nonMockableReason() {
                if(mockable()) {
                    return "";
                }
                if (type.isPrimitive()) {
                    return "primitive type";
                }
                if (Modifier.isFinal(type.getModifiers())) {
                    return "final class";
                }
                return join("not handled type");
            }
</source>
    </clone>
    <clone nlines="13" distance="8">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="221" startcolumn="5" endline="234" endcolumn="5">
public static &lt;A, B, C, D, E&gt; Answer&lt;Void&gt; toAnswer(final VoidAnswer5&lt;A, B, C, D, E&gt; answer) {
        return new Answer&lt;Void&gt;() {
            @SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3),
                        (E)invocation.getArgument(4));
                return null;
            }
        };
    }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="197" startcolumn="5" endline="209" endcolumn="5">
public static &lt;T, A, B, C, D, E&gt; Answer&lt;T&gt; toAnswer(final Answer5&lt;T, A, B, C, D, E&gt; answer) {
        return new Answer&lt;T&gt;() {
            @SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3),
                        (E)invocation.getArgument(4));
            }
        };
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/matchers/And.java" startline="23" startcolumn="5" endline="30" endcolumn="5">
public boolean matches(Object actual) {
        for (ArgumentMatcher matcher : matchers) {
            if (!matcher.matches(actual)) {
                return false;
            }
        }
        return true;
    }
</source>
        <source file="java/org/mockito/internal/creation/MockSettingsImpl.java" startline="140" startcolumn="5" endline="147" endcolumn="5">
private boolean invocationListenersContainsType(Class&lt;?&gt; clazz) {
        for (InvocationListener listener : invocationListeners) {
            if (listener.getClass().equals(clazz)) {
                return true;
            }
        }
        return false;
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/matchers/CapturingMatcher.java" startline="28" startcolumn="5" endline="35" endcolumn="5">
public T getLastValue() {
        if (arguments.isEmpty()) {
            throw noArgumentValueWasCaptured();
        }
        
        return (T) arguments.getLast();
        
    }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java" startline="122" startcolumn="5" endline="128" endcolumn="5">
@Override
    public Object callRealMethod() throws Throwable {
        if (!superMethod.isInvokable()) {
            throw cannotCallAbstractRealMethod();
        }
        return superMethod.invoke();
    }
</source>
    </clone>
    <clone nlines="6" distance="7">
        <source file="java/org/mockito/internal/matchers/CapturingMatcher.java" startline="28" startcolumn="5" endline="35" endcolumn="5">
public T getLastValue() {
        if (arguments.isEmpty()) {
            throw noArgumentValueWasCaptured();
        }
        
        return (T) arguments.getLast();
        
    }
</source>
        <source file="java/org/mockito/internal/invocation/InvocationImpl.java" startline="113" startcolumn="5" endline="118" endcolumn="5">
public Object callRealMethod() throws Throwable {
        if (method.isAbstract()) {
            throw cannotCallAbstractRealMethod();
        }
        return realMethod.invoke(mock, rawArguments);
    }
</source>
    </clone>
    <clone nlines="6" distance="1">
        <source file="java/org/mockito/internal/verification/AtLeast.java" startline="21" startcolumn="5" endline="26" endcolumn="5">
public AtLeast(int wantedNumberOfInvocations) {
        if (wantedNumberOfInvocations &lt; 0) {
            throw new MockitoException("Negative value is not allowed here");
        }
        this.wantedCount = wantedNumberOfInvocations;
    }
</source>
        <source file="java/org/mockito/internal/verification/Calls.java" startline="26" startcolumn="5" endline="31" endcolumn="5">
public Calls(int wantedNumberOfInvocations) {
        if( wantedNumberOfInvocations &lt;= 0 ) {
            throw new MockitoException( "Negative and zero values are not allowed here" );
        }
        this.wantedCount = wantedNumberOfInvocations;
    }
</source>
    </clone>
    <clone nlines="6" distance="1">
        <source file="java/org/mockito/internal/verification/AtMost.java" startline="24" startcolumn="5" endline="29" endcolumn="5">
public AtMost(int maxNumberOfInvocations) {
        if (maxNumberOfInvocations &lt; 0) {
            throw new MockitoException("Negative value is not allowed here");
        }
        this.maxNumberOfInvocations = maxNumberOfInvocations;
    }
</source>
        <source file="java/org/mockito/internal/verification/Calls.java" startline="26" startcolumn="5" endline="31" endcolumn="5">
public Calls(int wantedNumberOfInvocations) {
        if( wantedNumberOfInvocations &lt;= 0 ) {
            throw new MockitoException( "Negative and zero values are not allowed here" );
        }
        this.wantedCount = wantedNumberOfInvocations;
    }
</source>
    </clone>
    <clone nlines="6" distance="1">
        <source file="java/org/mockito/internal/verification/Times.java" startline="25" startcolumn="5" endline="30" endcolumn="5">
public Times(int wantedNumberOfInvocations) {
        if (wantedNumberOfInvocations &lt; 0) {
            throw new MockitoException("Negative value is not allowed here");
        }
        this.wantedCount = wantedNumberOfInvocations;
    }
</source>
        <source file="java/org/mockito/internal/verification/Calls.java" startline="26" startcolumn="5" endline="31" endcolumn="5">
public Calls(int wantedNumberOfInvocations) {
        if( wantedNumberOfInvocations &lt;= 0 ) {
            throw new MockitoException( "Negative and zero values are not allowed here" );
        }
        this.wantedCount = wantedNumberOfInvocations;
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/util/MockCreationValidator.java" startline="49" startcolumn="5" endline="56" endcolumn="5">
public void validateDelegatedInstance(Class&lt;?&gt; classToMock, Object delegatedInstance) {
        if (classToMock == null || delegatedInstance == null) {
            return;
        }
        if (delegatedInstance.getClass().isAssignableFrom(classToMock)) {
            throw mockedTypeIsInconsistentWithDelegatedInstanceType(classToMock, delegatedInstance);
        }
    }
</source>
        <source file="java/org/mockito/internal/util/MockCreationValidator.java" startline="40" startcolumn="5" endline="47" endcolumn="5">
public void validateMockedType(Class&lt;?&gt; classToMock, Object spiedInstance) {
        if (classToMock == null || spiedInstance == null) {
            return;
        }
        if (!classToMock.equals(spiedInstance.getClass())) {
            throw mockedTypeIsInconsistentWithSpiedInstanceType(classToMock, spiedInstance);
        }
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="70" startcolumn="13" endline="75" endcolumn="13">
@SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1));
            }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="88" startcolumn="13" endline="94" endcolumn="13">
@SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1));
                return null;
            }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
    </clone>
    <clone nlines="6" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="59" startcolumn="5" endline="64" endcolumn="5">
public static MockitoException cannotStubWithNullThrowable() {
        return new MockitoException(join(
                "Cannot stub with null throwable!"
        ));

    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="1">
        <source file="java/org/mockito/internal/matchers/Or.java" startline="23" startcolumn="5" endline="30" endcolumn="5">
public boolean matches(Object actual) {
        for (ArgumentMatcher matcher : matchers) {
            if (matcher.matches(actual)) {
                return true;
            }
        }
        return false;
    }
</source>
        <source file="java/org/mockito/internal/matchers/And.java" startline="23" startcolumn="5" endline="30" endcolumn="5">
public boolean matches(Object actual) {
        for (ArgumentMatcher matcher : matchers) {
            if (!matcher.matches(actual)) {
                return false;
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/matchers/Or.java" startline="23" startcolumn="5" endline="30" endcolumn="5">
public boolean matches(Object actual) {
        for (ArgumentMatcher matcher : matchers) {
            if (matcher.matches(actual)) {
                return true;
            }
        }
        return false;
    }
</source>
        <source file="java/org/mockito/internal/creation/MockSettingsImpl.java" startline="140" startcolumn="5" endline="147" endcolumn="5">
private boolean invocationListenersContainsType(Class&lt;?&gt; clazz) {
        for (InvocationListener listener : invocationListeners) {
            if (listener.getClass().equals(clazz)) {
                return true;
            }
        }
        return false;
    }
</source>
    </clone>
    <clone nlines="8" distance="5">
        <source file="java/org/mockito/internal/util/collections/IdentitySet.java" startline="14" startcolumn="5" endline="21" endcolumn="5">
public boolean contains(Object o) {
        for(Object existing:list) {
            if (existing == o) {
                return true;
            }
        }
        return false;
    }
</source>
        <source file="java/org/mockito/internal/matchers/And.java" startline="23" startcolumn="5" endline="30" endcolumn="5">
public boolean matches(Object actual) {
        for (ArgumentMatcher matcher : matchers) {
            if (!matcher.matches(actual)) {
                return false;
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="8" distance="4">
        <source file="java/org/mockito/internal/util/collections/IdentitySet.java" startline="14" startcolumn="5" endline="21" endcolumn="5">
public boolean contains(Object o) {
        for(Object existing:list) {
            if (existing == o) {
                return true;
            }
        }
        return false;
    }
</source>
        <source file="java/org/mockito/internal/matchers/Or.java" startline="23" startcolumn="5" endline="30" endcolumn="5">
public boolean matches(Object actual) {
        for (ArgumentMatcher matcher : matchers) {
            if (matcher.matches(actual)) {
                return true;
            }
        }
        return false;
    }
</source>
    </clone>
    <clone nlines="7" distance="4">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="109" startcolumn="13" endline="115" endcolumn="13">
@SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2));
            }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="129" startcolumn="13" endline="136" endcolumn="13">
@SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2));
                return null;
            }
</source>
    </clone>
    <clone nlines="10" distance="7">
        <source file="java/org/mockito/internal/util/junit/JUnitFailureHacker.java" startline="34" startcolumn="5" endline="43" endcolumn="5">
private static Object getInternalState(Object target, String field) {
        Class&lt;?&gt; c = target.getClass();
        try {
            Field f = getFieldFromHierarchy(c, field);
            f.setAccessible(true);
            return f.get(target);
        } catch (Exception e) {
            throw new RuntimeException("Unable to get internal state on a private field. Please report to mockito mailing list.", e);
        }
    }
</source>
        <source file="java/org/mockito/internal/util/junit/JUnitFailureHacker.java" startline="45" startcolumn="5" endline="54" endcolumn="5">
private static void setInternalState(Object target, String field, Object value) {
        Class&lt;?&gt; c = target.getClass();
        try {
            Field f = getFieldFromHierarchy(c, field);
            f.setAccessible(true);
            f.set(target, value);
        } catch (Exception e) {
            throw new RuntimeException("Unable to set internal state on a private field. Please report to mockito mailing list.", e);
        }
    }
</source>
    </clone>
    <clone nlines="7" distance="4">
        <source file="java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java" startline="39" startcolumn="5" endline="45" endcolumn="5">
private static boolean safelyMatches(ArgumentMatcher m, Object arg) {
        try {
            return m.matches(arg);
        } catch (Throwable t) {
            return false;
        }
    }
</source>
        <source file="java/org/mockito/internal/util/junit/JUnitFailureHacker.java" startline="71" startcolumn="5" endline="77" endcolumn="5">
private static Field getField(Class&lt;?&gt; clazz, String field) {
        try {
            return clazz.getDeclaredField(field);
        } catch (NoSuchFieldException e) {
            return null;
        }
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java" startline="107" startcolumn="9" endline="112" endcolumn="9">
private SuperMethodCall(SelfCallInfo selfCallInfo, Method origin, Object instance, Object[] arguments) {
            this.selfCallInfo = selfCallInfo;
            this.origin = origin;
            this.instance = instance;
            this.arguments = arguments;
        }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java" startline="140" startcolumn="9" endline="145" endcolumn="9">
private SerializableSuperMethodCall(String identifier, Method origin, Object instance, Object[] arguments) {
            this.origin = new SerializableMethod(origin);
            this.identifier = identifier;
            this.instance = instance;
            this.arguments = arguments;
        }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/configuration/injection/ConstructorInjection.java" startline="78" startcolumn="9" endline="83" endcolumn="9">
private Object objectThatIsAssignableFrom(Class&lt;?&gt; argType) {
            for (Object object : objects) {
                if(argType.isAssignableFrom(object.getClass())) return object;
            }
            return null;
        }
</source>
        <source file="java/org/mockito/internal/creation/MockSettingsImpl.java" startline="140" startcolumn="5" endline="147" endcolumn="5">
private boolean invocationListenersContainsType(Class&lt;?&gt; clazz) {
        for (InvocationListener listener : invocationListeners) {
            if (listener.getClass().equals(clazz)) {
                return true;
            }
        }
        return false;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="84" startcolumn="5" endline="95" endcolumn="5">
public static MockitoException incorrectUseOfApi() {
        return new MockitoException(join(
                "Incorrect use of API detected here:",
                new LocationImpl(),
                "",
                "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.",
                "Examples of correct usage:",
                "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);",
                "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="11" distance="7">
        <source file="java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java" startline="43" startcolumn="5" endline="53" endcolumn="5">
public static Set&lt;StubbedInvocationMatcher&gt; findStubbings(Iterable&lt;?&gt; mocks) {
        Set&lt;StubbedInvocationMatcher&gt; stubbings = new TreeSet&lt;StubbedInvocationMatcher&gt;(new SequenceNumberComparator2());
        for (Object mock : mocks) {
            InternalMockHandler&lt;Object&gt; handler = MockUtil.getMockHandler(mock);
            //TODO 542 use the MockingDetails interface, add getStubbings() method
            List&lt;StubbedInvocationMatcher&gt; fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();
            stubbings.addAll(fromSingleMock);
        }

        return stubbings;
    }
</source>
        <source file="java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java" startline="25" startcolumn="5" endline="35" endcolumn="5">
public static List&lt;Invocation&gt; find(Iterable&lt;?&gt; mocks) {
        //TODO 542 use the MockingDetails interface
        Set&lt;Invocation&gt; invocationsInOrder = new TreeSet&lt;Invocation&gt;(new SequenceNumberComparator());
        for (Object mock : mocks) {
            InternalMockHandler&lt;Object&gt; handler = MockUtil.getMockHandler(mock);
            List&lt;Invocation&gt; fromSingleMock = handler.getInvocationContainer().getInvocations();
            invocationsInOrder.addAll(fromSingleMock);
        }
        
        return new LinkedList&lt;Invocation&gt;(invocationsInOrder);
    }
</source>
    </clone>
    <clone nlines="9" distance="2">
        <source file="java/org/mockito/internal/invocation/InvocationImpl.java" startline="78" startcolumn="5" endline="86" endcolumn="5">
public boolean equals(Object o) {
        if (o == null || !o.getClass().equals(this.getClass())) {
            return false;
        }

        InvocationImpl other = (InvocationImpl) o;

        return this.mock.equals(other.mock) &amp;&amp; this.method.equals(other.method) &amp;&amp; this.equalArguments(other.arguments);
    }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java" startline="136" startcolumn="5" endline="145" endcolumn="5">
@Override
    public boolean equals(Object o) {
        if (o == null || !o.getClass().equals(this.getClass())) {
            return false;
        }
        InterceptedInvocation other = (InterceptedInvocation) o;
        return this.mock.equals(other.mock)
                &amp;&amp; this.mockitoMethod.equals(other.mockitoMethod)
                &amp;&amp; this.equalArguments(other.arguments);
    }
</source>
    </clone>
    <clone nlines="7" distance="7">
        <source file="java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java" startline="73" startcolumn="5" endline="79" endcolumn="5">
public T fetchFrom(Thread thread) {
        T value = map.get(thread);
        if (value != null) {
            set(inheritValue(value));
        }
        return value;
    }
</source>
        <source file="java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java" startline="61" startcolumn="5" endline="67" endcolumn="5">
public T pushTo(Thread thread) {
        T value = get();
        if (value != null) {
            map.put(thread, inheritValue(value));
        }
        return value;
    }
</source>
    </clone>
    <clone nlines="6" distance="3">
        <source file="java/org/mockito/internal/verification/VerificationOverTimeImpl.java" startline="50" startcolumn="5" endline="55" endcolumn="5">
public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer) {
        this.pollingPeriodMillis = pollingPeriodMillis;
        this.delegate = delegate;
        this.returnOnSuccess = returnOnSuccess;
        this.timer = timer;
    }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java" startline="107" startcolumn="9" endline="112" endcolumn="9">
private SuperMethodCall(SelfCallInfo selfCallInfo, Method origin, Object instance, Object[] arguments) {
            this.selfCallInfo = selfCallInfo;
            this.origin = origin;
            this.instance = instance;
            this.arguments = arguments;
        }
</source>
    </clone>
    <clone nlines="6" distance="7">
        <source file="java/org/mockito/internal/verification/VerificationOverTimeImpl.java" startline="50" startcolumn="5" endline="55" endcolumn="5">
public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer) {
        this.pollingPeriodMillis = pollingPeriodMillis;
        this.delegate = delegate;
        this.returnOnSuccess = returnOnSuccess;
        this.timer = timer;
    }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java" startline="140" startcolumn="9" endline="145" endcolumn="9">
private SerializableSuperMethodCall(String identifier, Method origin, Object instance, Object[] arguments) {
            this.origin = new SerializableMethod(origin);
            this.identifier = identifier;
            this.instance = instance;
            this.arguments = arguments;
        }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/util/reflection/GenericMetadataSupport.java" startline="353" startcolumn="9" endline="360" endcolumn="9">
public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable&lt;?&gt;[] typeParameters, ParameterizedType parameterizedType) {
            this.parameterizedType = parameterizedType;
            this.typeParameters = typeParameters;
            this.contextualActualTypeParameters = source.contextualActualTypeParameters;

            readTypeParameters();
            readTypeVariables();
        }
</source>
        <source file="java/org/mockito/internal/util/reflection/GenericMetadataSupport.java" startline="385" startcolumn="9" endline="392" endcolumn="9">
public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable&lt;?&gt;[] typeParameters, TypeVariable&lt;?&gt; typeVariable) {
            this.typeParameters = typeParameters;
            this.typeVariable = typeVariable;
            this.contextualActualTypeParameters = source.contextualActualTypeParameters;

            readTypeParameters();
            readTypeVariables();
        }
</source>
    </clone>
    <clone nlines="8" distance="4">
        <source file="java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java" startline="224" startcolumn="9" endline="231" endcolumn="9">
@Override
        public boolean equals(Object other) {
            if (other instanceof LatentKey&lt;?&gt;) {
                return ((LatentKey&lt;?&gt;) other).key == key;
            } else {
                return ((WeakKey&lt;?&gt;) other).get() == key;
            }
        }
</source>
        <source file="java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java" startline="197" startcolumn="9" endline="204" endcolumn="9">
@Override
        public boolean equals(Object other) {
            if (other instanceof LatentKey&lt;?&gt;) {
                return ((LatentKey&lt;?&gt;) other).key == get();
            } else {
                return ((WeakKey&lt;?&gt;) other).get() == get();
            }
        }
</source>
    </clone>
    <clone nlines="8" distance="4">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="152" startcolumn="13" endline="159" endcolumn="13">
@SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3));
            }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="174" startcolumn="13" endline="182" endcolumn="13">
@SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3));
                return null;
            }
</source>
    </clone>
    <clone nlines="9" distance="4">
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="199" startcolumn="13" endline="207" endcolumn="13">
@SuppressWarnings("unchecked")
            public T answer(InvocationOnMock invocation) throws Throwable {
                return answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3),
                        (E)invocation.getArgument(4));
            }
</source>
        <source file="java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java" startline="223" startcolumn="13" endline="232" endcolumn="13">
@SuppressWarnings("unchecked")
            public Void answer(InvocationOnMock invocation) throws Throwable {
                answer.answer(
                        (A)invocation.getArgument(0),
                        (B)invocation.getArgument(1),
                        (C)invocation.getArgument(2),
                        (D)invocation.getArgument(3),
                        (E)invocation.getArgument(4));
                return null;
            }
</source>
    </clone>
    <clone nlines="6" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="272" startcolumn="5" endline="277" endcolumn="5">
public static MockitoException stubPassedToVerify() {
        return new CannotVerifyStubOnlyMock(join(
                "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="7" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="150" startcolumn="5" endline="156" endcolumn="5">
public static MockitoException notAMockPassedToWhenMethod() {
        return new NotAMockException(join(
                "Argument passed to when() is not a mock!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="2">
        <source file="java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java" startline="162" startcolumn="9" endline="167" endcolumn="9">
@Override
        public boolean equals(Object object) {
            if (this == object) return true;
            if (!(object instanceof Key)) return false;
            return value == ((Key) object).get();
        }
</source>
        <source file="java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java" startline="184" startcolumn="9" endline="189" endcolumn="9">
@Override
        public boolean equals(Object object) {
            if (this == object) return true;
            if (!(object instanceof Key)) return false;
            return get() == ((Key) object).get();
        }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="557" startcolumn="5" endline="562" endcolumn="5">
public static MockitoException extraInterfacesAcceptsOnlyInterfaces(Class&lt;?&gt; wrongType) {
        return new MockitoException(join(
                "extraInterfaces() accepts only interfaces.",
                "You passed following type: " + wrongType.getSimpleName() + " which is not an interface."
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="7">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="564" startcolumn="5" endline="570" endcolumn="5">
public static MockitoException extraInterfacesCannotContainMockedType(Class&lt;?&gt; wrongType) {
        return new MockitoException(join(
                "extraInterfaces() does not accept the same type as the mocked type.",
                "You mocked following type: " + wrongType.getSimpleName(),
                "and you passed the same very interface to the extraInterfaces()"
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="382" startcolumn="5" endline="387" endcolumn="5">
public static MockitoAssertionError tooManyActualInvocationsInOrder(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {
        String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);
        return new VerificationInOrderFailure(join(
                "Verification in order failure:" + message
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="409" startcolumn="5" endline="415" endcolumn="5">
public static MockitoAssertionError tooLittleActualInvocationsInOrder(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {
        String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);

        return new VerificationInOrderFailure(join(
                "Verification in order failure:" + message
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="127" startcolumn="5" endline="136" endcolumn="5">
public static MockitoException notAMockPassedToVerify(Class&lt;?&gt; type) {
        return new NotAMockException(join(
                "Argument passed to verify() is of type " + type.getSimpleName() + " and is not a mock!",
                "Make sure you place the parenthesis correctly!",
                "See the examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="775" startcolumn="5" endline="785" endcolumn="5">
public static MockitoException serializableWontWorkForObjectsThatDontImplementSerializable(Class&lt;?&gt; classToMock) {
        return new MockitoException(join(
                "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
                "do not implement Serializable AND do not have a no-arg constructor.",
                "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized",
                "",
                "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,",
                "i.e. the top-most superclass has to implements Serializable.",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="127" startcolumn="5" endline="136" endcolumn="5">
public static MockitoException notAMockPassedToVerify(Class&lt;?&gt; type) {
        return new NotAMockException(join(
                "Argument passed to verify() is of type " + type.getSimpleName() + " and is not a mock!",
                "Make sure you place the parenthesis correctly!",
                "See the examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="630" startcolumn="5" endline="638" endcolumn="5">
public static MockitoException cannotInitializeForInjectMocksAnnotation(String fieldName, String causeMessage) {
        return new MockitoException(join("Cannot instantiate @InjectMocks field named '" + fieldName + "'! Cause: "+causeMessage,
                                         "You haven't provided the instance at field declaration so I tried to construct the instance.",
                                         "Examples of correct usage of @InjectMocks:",
                                         "   @InjectMocks Service service = new Service();",
                                         "   @InjectMocks Service service;",
                                         "   //and... don't forget about some @Mocks for injection :)",
                                         ""));
    }
</source>
    </clone>
    <clone nlines="6" distance="1">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="557" startcolumn="5" endline="562" endcolumn="5">
public static MockitoException extraInterfacesAcceptsOnlyInterfaces(Class&lt;?&gt; wrongType) {
        return new MockitoException(join(
                "extraInterfaces() accepts only interfaces.",
                "You passed following type: " + wrongType.getSimpleName() + " which is not an interface."
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="564" startcolumn="5" endline="570" endcolumn="5">
public static MockitoException extraInterfacesCannotContainMockedType(Class&lt;?&gt; wrongType) {
        return new MockitoException(join(
                "extraInterfaces() does not accept the same type as the mocked type.",
                "You mocked following type: " + wrongType.getSimpleName(),
                "and you passed the same very interface to the extraInterfaces()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="3">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="158" startcolumn="5" endline="165" endcolumn="5">
public static MockitoException nullPassedToWhenMethod() {
        return new NullInsteadOfMockException(join(
                "Argument passed to when() is null!",
                "Example of correct stubbing:",
                "    doThrow(new RuntimeException()).when(mock).someMethod();",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="187" startcolumn="5" endline="194" endcolumn="5">
public static MockitoException nullPassedToVerifyNoMoreInteractions() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="196" startcolumn="5" endline="203" endcolumn="5">
public static MockitoException notAMockPassedWhenCreatingInOrder() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="205" startcolumn="5" endline="212" endcolumn="5">
public static MockitoException nullPassedWhenCreatingInOrder() {
        return new NullInsteadOfMockException(join(
                "Argument(s) passed is null!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="214" startcolumn="5" endline="221" endcolumn="5">
public static MockitoException mocksHaveToBePassedWhenCreatingInOrder() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that require verification in order.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne, mockTwo);"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="223" startcolumn="5" endline="230" endcolumn="5">
public static MockitoException inOrderRequiresFamiliarMock() {
        return new MockitoException(join(
                "InOrder can only verify mocks that were passed in during creation of InOrder.",
                "For example:",
                "    InOrder inOrder = inOrder(mockOne);",
                "    inOrder.verify(mockOne).doStuff();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="8" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="589" startcolumn="5" endline="596" endcolumn="5">
public static MockitoException cannotCallAbstractRealMethod() {
        return new MockitoException(join(
                "Cannot call abstract real method on java object!",
                "Calling real methods is only possible when mocking non abstract method.",
                "  //correct example:",
                "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="708" startcolumn="5" endline="714" endcolumn="5">
public static MockitoException invalidArgumentRangeAtIdentityAnswerCreationTime() {
        return new MockitoException(join(
                "Invalid argument index.",
                "The index need to be a positive number that indicates the position of the argument to return.",
                "However it is possible to use the -1 value to indicates that the last argument should be",
                "returned."));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="7">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="598" startcolumn="5" endline="606" endcolumn="5">
public static MockitoException cannotVerifyToString() {
        return new MockitoException(join(
                "Mockito cannot verify toString()",
                "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                        "Verifying it may give inconsistent or hard to understand results. " +
                        "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
        ));
    }
</source>
    </clone>
    <clone nlines="6" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="52" startcolumn="5" endline="57" endcolumn="5">
public static MockitoException checkedExceptionInvalid(Throwable t) {
        return new MockitoException(join(
                "Checked exception is invalid for this method!",
                "Invalid: " + t
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="16" distance="7">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="66" startcolumn="5" endline="82" endcolumn="5">
public static MockitoException unfinishedStubbing(Location location) {
        return new UnfinishedStubbingException(join(
                "Unfinished stubbing detected here:",
                location,
                "",
                "E.g. thenReturn() may be missing.",
                "Examples of correct stubbing:",
                "    when(mock.isOk()).thenReturn(true);",
                "    when(mock.isOk()).thenThrow(exception);",
                "    doThrow(exception).when(mock).someVoidMethod();",
                "Hints:",
                " 1. missing thenReturn()",
                " 2. you are trying to stub a final method, which is not supported",
                " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="447" startcolumn="5" endline="462" endcolumn="5">
public static MockitoException cannotStubVoidMethodWithAReturnValue(String methodName) {
        return new CannotStubVoidMethodWithReturnValue(join(
                "'" + methodName + "' is a *void method* and it *cannot* be stubbed with a *return value*!",
                "Voids are usually stubbed with Throwables:",
                "    doThrow(exception).when(mock).someVoidMethod();",
                "***",
                "If you're unsure why you're getting above error read on.",
                "Due to the nature of the syntax above problem might occur because:",
                "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.",
                "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.",
                "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                "4. " + MockitoLimitations.NON_PUBLIC_PARENT,
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="14" distance="7">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="112" startcolumn="5" endline="125" endcolumn="5">
public static MockitoException unfinishedVerificationException(Location location) {
        return new UnfinishedVerificationException(join(
                "Missing method call for verify(mock) here:",
                location,
                "",
                "Example of correct verification:",
                "    verify(mock).doSomething()",
                "",
                "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.",
                "Those methods *cannot* be stubbed/verified.",
                MockitoLimitations.NON_PUBLIC_PARENT,
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="66" startcolumn="5" endline="82" endcolumn="5">
public static MockitoException unfinishedStubbing(Location location) {
        return new UnfinishedStubbingException(join(
                "Unfinished stubbing detected here:",
                location,
                "",
                "E.g. thenReturn() may be missing.",
                "Examples of correct stubbing:",
                "    when(mock.isOk()).thenReturn(true);",
                "    when(mock.isOk()).thenThrow(exception);",
                "    doThrow(exception).when(mock).someVoidMethod();",
                "Hints:",
                " 1. missing thenReturn()",
                " 2. you are trying to stub a final method, which is not supported",
                " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="14" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="112" startcolumn="5" endline="125" endcolumn="5">
public static MockitoException unfinishedVerificationException(Location location) {
        return new UnfinishedVerificationException(join(
                "Missing method call for verify(mock) here:",
                location,
                "",
                "Example of correct verification:",
                "    verify(mock).doSomething()",
                "",
                "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.",
                "Those methods *cannot* be stubbed/verified.",
                MockitoLimitations.NON_PUBLIC_PARENT,
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="97" startcolumn="5" endline="110" endcolumn="5">
public static MockitoException missingMethodInvocation() {
        return new MissingMethodInvocationException(join(
                "when() requires an argument which has to be 'a method call on a mock'.",
                "For example:",
                "    when(mock.getArticles()).thenReturn(articles);",
                "",
                "Also, this error might show up because:",
                "1. you stub either of: final/private/equals()/hashCode() methods.",
                "   Those methods *cannot* be stubbed/verified.",
                "   " + MockitoLimitations.NON_PUBLIC_PARENT,
                "2. inside when() you don't call method on mock but on some other object.",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="7" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="279" startcolumn="5" endline="285" endcolumn="5">
public static MockitoException reportNoSubMatchersFound(String additionalMatcherName) {
        return new InvalidUseOfMatchersException(join(
                "No matchers found for additional matcher " + additionalMatcherName,
                new LocationImpl(),
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="9" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="9" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="167" startcolumn="5" endline="175" endcolumn="5">
public static MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions() {
        return new MockitoException(join(
                "Method requires argument(s)!",
                "Pass mocks that should be verified, e.g:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="811" startcolumn="5" endline="820" endcolumn="5">
public static MockitoException cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
        return new FriendlyReminderException(join(
                "",
                "Don't panic! I'm just a friendly reminder!",
                "It is impossible for time to go backward, therefore...",
                "You cannot put negative value of duration: (" + durationMillis + ")",
                "as argument of timer methods (after(), timeout())",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="177" startcolumn="5" endline="185" endcolumn="5">
public static MockitoException notAMockPassedToVerifyNoMoreInteractions() {
        return new NotAMockException(join(
                "Argument(s) passed is not a mock!",
                "Examples of correct verifications:",
                "    verifyNoMoreInteractions(mockOne, mockTwo);",
                "    verifyZeroInteractions(mockOne, mockTwo);",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="811" startcolumn="5" endline="820" endcolumn="5">
public static MockitoException cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
        return new FriendlyReminderException(join(
                "",
                "Don't panic! I'm just a friendly reminder!",
                "It is impossible for time to go backward, therefore...",
                "You cannot put negative value of duration: (" + durationMillis + ")",
                "as argument of timer methods (after(), timeout())",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="525" startcolumn="5" endline="534" endcolumn="5">
public static MockitoException smartNullPointerException(String invocation, Location location) {
        return new SmartNullPointerException(join(
                "You have a NullPointerException here:",
                new LocationImpl(),
                "because this method call was *not* stubbed correctly:",
                location,
                invocation,
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="371" startcolumn="5" endline="380" endcolumn="5">
public static MockitoAssertionError neverWantedButInvoked(DescribedInvocation wanted, Location firstUndesired) {
        return new NeverWantedButInvoked(join(
                wanted.toString(),
                "Never wanted here:",
                new LocationImpl(),
                "But invoked here:",
                firstUndesired,
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="84" startcolumn="5" endline="95" endcolumn="5">
public static MockitoException incorrectUseOfApi() {
        return new MockitoException(join(
                "Incorrect use of API detected here:",
                new LocationImpl(),
                "",
                "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.",
                "Examples of correct usage:",
                "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);",
                "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="84" startcolumn="5" endline="95" endcolumn="5">
public static MockitoException incorrectUseOfApi() {
        return new MockitoException(join(
                "Incorrect use of API detected here:",
                new LocationImpl(),
                "",
                "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.",
                "Examples of correct usage:",
                "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);",
                "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="11" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="138" startcolumn="5" endline="148" endcolumn="5">
public static MockitoException nullPassedToVerify() {
        return new NullInsteadOfMockException(join(
                "Argument passed to verify() should be a mock but is null!",
                "Examples of correct verifications:",
                "    verify(mock).someMethod();",
                "    verify(mock, times(10)).someMethod();",
                "    verify(mock, atLeastOnce()).someMethod();",
                "    not: verify(mock.someMethod());",
                "Also, if you use @Mock annotation don't miss initMocks()"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="811" startcolumn="5" endline="820" endcolumn="5">
public static MockitoException cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
        return new FriendlyReminderException(join(
                "",
                "Don't panic! I'm just a friendly reminder!",
                "It is impossible for time to go backward, therefore...",
                "You cannot put negative value of duration: (" + durationMillis + ")",
                "as argument of timer methods (after(), timeout())",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="464" startcolumn="5" endline="474" endcolumn="5">
public static MockitoException onlyVoidMethodsCanBeSetToDoNothing() {
        return new MockitoException(join(
                "Only void methods can doNothing()!",
                "Example of correct use of doNothing():",
                "    doNothing().",
                "    doThrow(new RuntimeException())",
                "    .when(mock).someVoidMethod();",
                "Above means:",
                "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="811" startcolumn="5" endline="820" endcolumn="5">
public static MockitoException cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
        return new FriendlyReminderException(join(
                "",
                "Don't panic! I'm just a friendly reminder!",
                "It is impossible for time to go backward, therefore...",
                "You cannot put negative value of duration: (" + durationMillis + ")",
                "as argument of timer methods (after(), timeout())",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="9" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="630" startcolumn="5" endline="638" endcolumn="5">
public static MockitoException cannotInitializeForInjectMocksAnnotation(String fieldName, String causeMessage) {
        return new MockitoException(join("Cannot instantiate @InjectMocks field named '" + fieldName + "'! Cause: "+causeMessage,
                                         "You haven't provided the instance at field declaration so I tried to construct the instance.",
                                         "Examples of correct usage of @InjectMocks:",
                                         "   @InjectMocks Service service = new Service();",
                                         "   @InjectMocks Service service;",
                                         "   //and... don't forget about some @Mocks for injection :)",
                                         ""));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="775" startcolumn="5" endline="785" endcolumn="5">
public static MockitoException serializableWontWorkForObjectsThatDontImplementSerializable(Class&lt;?&gt; classToMock) {
        return new MockitoException(join(
                "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
                "do not implement Serializable AND do not have a no-arg constructor.",
                "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized",
                "",
                "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,",
                "i.e. the top-most superclass has to implements Serializable.",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="97" startcolumn="5" endline="110" endcolumn="5">
public static MockitoException missingMethodInvocation() {
        return new MissingMethodInvocationException(join(
                "when() requires an argument which has to be 'a method call on a mock'.",
                "For example:",
                "    when(mock.getArticles()).thenReturn(articles);",
                "",
                "Also, this error might show up because:",
                "1. you stub either of: final/private/equals()/hashCode() methods.",
                "   Those methods *cannot* be stubbed/verified.",
                "   " + MockitoLimitations.NON_PUBLIC_PARENT,
                "2. inside when() you don't call method on mock but on some other object.",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="66" startcolumn="5" endline="82" endcolumn="5">
public static MockitoException unfinishedStubbing(Location location) {
        return new UnfinishedStubbingException(join(
                "Unfinished stubbing detected here:",
                location,
                "",
                "E.g. thenReturn() may be missing.",
                "Examples of correct stubbing:",
                "    when(mock.isOk()).thenReturn(true);",
                "    when(mock.isOk()).thenThrow(exception);",
                "    doThrow(exception).when(mock).someVoidMethod();",
                "Hints:",
                " 1. missing thenReturn()",
                " 2. you are trying to stub a final method, which is not supported",
                " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="14" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="66" startcolumn="5" endline="82" endcolumn="5">
public static MockitoException unfinishedStubbing(Location location) {
        return new UnfinishedStubbingException(join(
                "Unfinished stubbing detected here:",
                location,
                "",
                "E.g. thenReturn() may be missing.",
                "Examples of correct stubbing:",
                "    when(mock.isOk()).thenReturn(true);",
                "    when(mock.isOk()).thenThrow(exception);",
                "    doThrow(exception).when(mock).someVoidMethod();",
                "Hints:",
                " 1. missing thenReturn()",
                " 2. you are trying to stub a final method, which is not supported",
                " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="14" distance="6">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="112" startcolumn="5" endline="125" endcolumn="5">
public static MockitoException unfinishedVerificationException(Location location) {
        return new UnfinishedVerificationException(join(
                "Missing method call for verify(mock) here:",
                location,
                "",
                "Example of correct verification:",
                "    verify(mock).doSomething()",
                "",
                "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.",
                "Those methods *cannot* be stubbed/verified.",
                MockitoLimitations.NON_PUBLIC_PARENT,
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="97" startcolumn="5" endline="110" endcolumn="5">
public static MockitoException missingMethodInvocation() {
        return new MissingMethodInvocationException(join(
                "when() requires an argument which has to be 'a method call on a mock'.",
                "For example:",
                "    when(mock.getArticles()).thenReturn(articles);",
                "",
                "Also, this error might show up because:",
                "1. you stub either of: final/private/equals()/hashCode() methods.",
                "   Those methods *cannot* be stubbed/verified.",
                "   " + MockitoLimitations.NON_PUBLIC_PARENT,
                "2. inside when() you don't call method on mock but on some other object.",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="112" startcolumn="5" endline="125" endcolumn="5">
public static MockitoException unfinishedVerificationException(Location location) {
        return new UnfinishedVerificationException(join(
                "Missing method call for verify(mock) here:",
                location,
                "",
                "Example of correct verification:",
                "    verify(mock).doSomething()",
                "",
                "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.",
                "Those methods *cannot* be stubbed/verified.",
                MockitoLimitations.NON_PUBLIC_PARENT,
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="84" startcolumn="5" endline="95" endcolumn="5">
public static MockitoException incorrectUseOfApi() {
        return new MockitoException(join(
                "Incorrect use of API detected here:",
                new LocationImpl(),
                "",
                "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.",
                "Examples of correct usage:",
                "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);",
                "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="8">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="97" startcolumn="5" endline="110" endcolumn="5">
public static MockitoException missingMethodInvocation() {
        return new MissingMethodInvocationException(join(
                "when() requires an argument which has to be 'a method call on a mock'.",
                "For example:",
                "    when(mock.getArticles()).thenReturn(articles);",
                "",
                "Also, this error might show up because:",
                "1. you stub either of: final/private/equals()/hashCode() methods.",
                "   Those methods *cannot* be stubbed/verified.",
                "   " + MockitoLimitations.NON_PUBLIC_PARENT,
                "2. inside when() you don't call method on mock but on some other object.",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="536" startcolumn="5" endline="549" endcolumn="5">
public static MockitoException noArgumentValueWasCaptured() {
        return new MockitoException(join(
                "No argument value was captured!",
                "You might have forgotten to use argument.capture() in verify()...",
                "...or you used capture() in stubbing but stubbed method was not called.",
                "Be aware that it is recommended to use capture() only with verify()",
                "",
                "Examples of correct argument capturing:",
                "    ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);",
                "    verify(mock).doSomething(argument.capture());",
                "    assertEquals(\"John\", argument.getValue().getName());",
                ""
        ));
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="640" startcolumn="5" endline="649" endcolumn="5">
public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
        return new FriendlyReminderException(join("",
                                                  "Don't panic! I'm just a friendly reminder!",
                                                  "timeout() should not be used with atMost() or never() because...",
                                                  "...it does not make much sense - the test would have passed immediately in concurency",
                                                  "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                  "In future release we will remove timeout(x).atMost(y) from the API.",
                                                  "If you want to find out more please refer to issue 235",
                                                  ""));
    }
</source>
        <source file="java/org/mockito/internal/exceptions/Reporter.java" startline="811" startcolumn="5" endline="820" endcolumn="5">
public static MockitoException cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
        return new FriendlyReminderException(join(
                "",
                "Don't panic! I'm just a friendly reminder!",
                "It is impossible for time to go backward, therefore...",
                "You cannot put negative value of duration: (" + durationMillis + ")",
                "as argument of timer methods (after(), timeout())",
                ""
        ));
    }
</source>
    </clone>
</clones>
