<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<clones>
    <clone nlines="10" distance="5">
        <source file="org/h2/Driver.java" startline="166" endline="175">
public static synchronized void unload() {
        try {
            if (registered) {
                registered = false;
                DriverManager.deregisterDriver(INSTANCE);
            }
        } catch (SQLException e) {
            DbException.traceThrowable(e);
        }
    }
</source>
        <source file="org/h2/Driver.java" startline="151" endline="161">
public static synchronized Driver load() {
        try {
            if (!registered) {
                registered = true;
                DriverManager.registerDriver(INSTANCE);
            }
        } catch (SQLException e) {
            DbException.traceThrowable(e);
        }
        return INSTANCE;
    }
</source>
    </clone>
    <clone nlines="17" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="799" endline="815">
@Deprecated
    @Override
    public BigDecimal getBigDecimal(int columnIndex, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getBigDecimal(" + columnIndex + ", " + scale + ");");
            }
            if (scale &lt; 0) {
                throw DbException.getInvalidValueException("scale", scale);
            }
            BigDecimal bd = get(columnIndex).getBigDecimal();
            return bd == null ? null : ValueDecimal.setScale(bd, scale);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="769" endline="786">
@Deprecated
    @Override
    public BigDecimal getBigDecimal(String columnLabel, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getBigDecimal(" +
                        StringUtils.quoteJavaString(columnLabel)+", "+scale+");");
            }
            if (scale &lt; 0) {
                throw DbException.getInvalidValueException("scale", scale);
            }
            BigDecimal bd = get(columnLabel).getBigDecimal();
            return bd == null ? null : ValueDecimal.setScale(bd, scale);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="17" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="303" endline="319">
PreparedStatement prepareAutoCloseStatement(String sql) throws SQLException {
        try {
            int id = getNextId(TraceObject.PREPARED_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("PreparedStatement",
                        TraceObject.PREPARED_STATEMENT, id,
                        "prepareStatement(" + quote(sql) + ")");
            }
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcPreparedStatement(this, sql, id,
                    ResultSet.TYPE_FORWARD_ONLY,
                    Constants.DEFAULT_RESULT_SET_CONCURRENCY, true);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="277" endline="294">
@Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        try {
            int id = getNextId(TraceObject.PREPARED_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("PreparedStatement",
                        TraceObject.PREPARED_STATEMENT, id,
                        "prepareStatement(" + quote(sql) + ")");
            }
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcPreparedStatement(this, sql, id,
                    ResultSet.TYPE_FORWARD_ONLY,
                    Constants.DEFAULT_RESULT_SET_CONCURRENCY, false);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="17" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="303" endline="319">
PreparedStatement prepareAutoCloseStatement(String sql) throws SQLException {
        try {
            int id = getNextId(TraceObject.PREPARED_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("PreparedStatement",
                        TraceObject.PREPARED_STATEMENT, id,
                        "prepareStatement(" + quote(sql) + ")");
            }
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcPreparedStatement(this, sql, id,
                    ResultSet.TYPE_FORWARD_ONLY,
                    Constants.DEFAULT_RESULT_SET_CONCURRENCY, true);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="901" endline="918">
@Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        try {
            int id = getNextId(TraceObject.CALLABLE_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("CallableStatement",
                        TraceObject.CALLABLE_STATEMENT, id, "prepareCall(" +
                                quote(sql) + ")");
            }
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcCallableStatement(this, sql, id,
                    ResultSet.TYPE_FORWARD_ONLY,
                    Constants.DEFAULT_RESULT_SET_CONCURRENCY);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="org/h2/store/Page.java" startline="156" endline="171">
protected static long[] insert(long[] old, int oldSize, int pos, long x) {
        long[] result;
        if (old != null &amp;&amp; old.length &gt; oldSize) {
            result = old;
        } else {
            result = new long[oldSize + 1 + COPY_THRESHOLD];
            if (pos &gt; 0) {
                System.arraycopy(old, 0, result, 0, pos);
            }
        }
        if (old != null &amp;&amp; oldSize - pos &gt; 0) {
            System.arraycopy(old, pos, result, pos + 1, oldSize - pos);
        }
        result[pos] = x;
        return result;
    }
</source>
        <source file="org/h2/store/Page.java" startline="202" endline="217">
protected static int[] insert(int[] old, int oldSize, int pos, int x) {
        int[] result;
        if (old != null &amp;&amp; old.length &gt; oldSize) {
            result = old;
        } else {
            result = new int[oldSize + 1 + COPY_THRESHOLD];
            if (pos &gt; 0 &amp;&amp; old != null) {
                System.arraycopy(old, 0, result, 0, pos);
            }
        }
        if (old != null &amp;&amp; oldSize - pos &gt; 0) {
            System.arraycopy(old, pos, result, pos + 1, oldSize - pos);
        }
        result[pos] = x;
        return result;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/tools/Recover.java" startline="1109" endline="1118">
private int readBlock(byte[] buff, int off, int len) {
            fillBuffer();
            if (endOfFile) {
                return -1;
            }
            int l = Math.min(remaining, len);
            page.read(buff, off, l);
            remaining -= l;
            return l;
        }
</source>
        <source file="org/h2/store/FileStoreInputStream.java" startline="76" endline="85">
private int readBlock(byte[] buff, int off, int len) throws IOException {
        fillBuffer();
        if (endOfFile) {
            return -1;
        }
        int l = Math.min(remainingInBuffer, len);
        page.read(buff, off, l);
        remainingInBuffer -= l;
        return l;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/engine/Database.java" startline="1533" endline="1542">
public ArrayList&lt;Table&gt; getAllTablesAndViews(boolean includeMeta) {
        if (includeMeta) {
            initMetaTables();
        }
        ArrayList&lt;Table&gt; list = New.arrayList();
        for (Schema schema : schemas.values()) {
            list.addAll(schema.getAllTablesAndViews());
        }
        return list;
    }
</source>
        <source file="org/h2/engine/Database.java" startline="1514" endline="1523">
public ArrayList&lt;SchemaObject&gt; getAllSchemaObjects(int type) {
        if (type == DbObject.TABLE_OR_VIEW) {
            initMetaTables();
        }
        ArrayList&lt;SchemaObject&gt; list = New.arrayList();
        for (Schema schema : schemas.values()) {
            list.addAll(schema.getAll(type));
        }
        return list;
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/store/fs/FilePathRetryOnInterrupt.java" startline="177" endline="187">
@Override
    public void force(boolean metaData) throws IOException {
        for (int i = 0;; i++) {
            try {
                channel.force(metaData);
                return;
            } catch (IOException e) {
                reopen(i, e);
            }
        }
    }
</source>
        <source file="org/h2/store/fs/FilePathRetryOnInterrupt.java" startline="153" endline="163">
@Override
    public FileChannel position(long pos) throws IOException {
        for (int i = 0;; i++) {
            try {
                channel.position(pos);
                return this;
            } catch (IOException e) {
                reopen(i, e);
            }
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/store/fs/FilePathRetryOnInterrupt.java" startline="177" endline="187">
@Override
    public void force(boolean metaData) throws IOException {
        for (int i = 0;; i++) {
            try {
                channel.force(metaData);
                return;
            } catch (IOException e) {
                reopen(i, e);
            }
        }
    }
</source>
        <source file="org/h2/store/fs/FilePathRetryOnInterrupt.java" startline="165" endline="175">
@Override
    public FileChannel truncate(long newLength) throws IOException {
        for (int i = 0;; i++) {
            try {
                channel.truncate(newLength);
                return this;
            } catch (IOException e) {
                reopen(i, e);
            }
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/command/ddl/AlterTableAddConstraint.java" startline="307" endline="317">
private static Index getUniqueIndex(Table t, IndexColumn[] cols) {
        if (t.getIndexes() == null) {
            return null;
        }
        for (Index idx : t.getIndexes()) {
            if (canUseUniqueIndex(idx, t, cols)) {
                return idx;
            }
        }
        return null;
    }
</source>
        <source file="org/h2/command/ddl/AlterTableAddConstraint.java" startline="319" endline="329">
private static Index getIndex(Table t, IndexColumn[] cols, boolean moreColumnOk) {
        if (t.getIndexes() == null) {
            return null;
        }
        for (Index idx : t.getIndexes()) {
            if (canUseIndex(idx, t, cols, moreColumnOk)) {
                return idx;
            }
        }
        return null;
    }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="org/h2/mvstore/DataUtils.java" startline="180" endline="191">
public static int getVarIntLen(int x) {
        if ((x &amp; (-1 &lt;&lt; 7)) == 0) {
            return 1;
        } else if ((x &amp; (-1 &lt;&lt; 14)) == 0) {
            return 2;
        } else if ((x &amp; (-1 &lt;&lt; 21)) == 0) {
            return 3;
        } else if ((x &amp; (-1 &lt;&lt; 28)) == 0) {
            return 4;
        }
        return 5;
    }
</source>
        <source file="org/h2/store/Data.java" startline="1194" endline="1205">
private static int getVarIntLen(int x) {
        if ((x &amp; (-1 &lt;&lt; 7)) == 0) {
            return 1;
        } else if ((x &amp; (-1 &lt;&lt; 14)) == 0) {
            return 2;
        } else if ((x &amp; (-1 &lt;&lt; 21)) == 0) {
            return 3;
        } else if ((x &amp; (-1 &lt;&lt; 28)) == 0) {
            return 4;
        }
        return 5;
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/util/StringUtils.java" startline="377" endline="387">
public static String quoteJavaIntArray(int[] array) {
        if (array == null) {
            return "null";
        }
        StatementBuilder buff = new StatementBuilder("new int[]{");
        for (int a : array) {
            buff.appendExceptFirst(", ");
            buff.append(a);
        }
        return buff.append('}').toString();
    }
</source>
        <source file="org/h2/util/StringUtils.java" startline="358" endline="368">
public static String quoteJavaStringArray(String[] array) {
        if (array == null) {
            return "null";
        }
        StatementBuilder buff = new StatementBuilder("new String[]{");
        for (String a : array) {
            buff.appendExceptFirst(", ");
            buff.append(quoteJavaString(a));
        }
        return buff.append('}').toString();
    }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="org/h2/server/TcpServer.java" startline="213" endline="223">
boolean allow(Socket socket) {
        if (allowOthers) {
            return true;
        }
        try {
            return NetUtils.isLocalAddress(socket);
        } catch (UnknownHostException e) {
            traceError(e);
            return false;
        }
    }
</source>
        <source file="org/h2/server/pg/PgServer.java" startline="163" endline="173">
private boolean allow(Socket socket) {
        if (allowOthers) {
            return true;
        }
        try {
            return NetUtils.isLocalAddress(socket);
        } catch (UnknownHostException e) {
            traceError(e);
            return false;
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/h2/mvstore/MVMap.java" startline="494" endline="509">
protected Page binarySearchPage(Page p, Object key) {
        int x = p.binarySearch(key);
        if (!p.isLeaf()) {
            if (x &lt; 0) {
                x = -x - 1;
            } else {
                x++;
            }
            p = p.getChildPage(x);
            return binarySearchPage(p, key);
        }
        if (x &gt;= 0) {
            return p;
        }
        return null;
    }
</source>
        <source file="org/h2/mvstore/MVMap.java" startline="465" endline="480">
protected Object binarySearch(Page p, Object key) {
        int x = p.binarySearch(key);
        if (!p.isLeaf()) {
            if (x &lt; 0) {
                x = -x - 1;
            } else {
                x++;
            }
            p = p.getChildPage(x);
            return binarySearch(p, key);
        }
        if (x &gt;= 0) {
            return p.getValue(x);
        }
        return null;
    }
</source>
    </clone>
    <clone nlines="23" distance="2">
        <source file="org/h2/engine/Database.java" startline="2840" endline="2863">
private void initJavaObjectSerializer() {
        if (javaObjectSerializerInitialized) {
            return;
        }
        synchronized (this) {
            if (javaObjectSerializerInitialized) {
                return;
            }
            String serializerName = javaObjectSerializerName;
            if (serializerName != null) {
                serializerName = serializerName.trim();
                if (!serializerName.isEmpty() &amp;&amp;
                        !serializerName.equals("null")) {
                    try {
                        javaObjectSerializer = (JavaObjectSerializer)
                                JdbcUtils.loadUserClass(serializerName).newInstance();
                    } catch (Exception e) {
                        throw DbException.convert(e);
                    }
                }
            }
            javaObjectSerializerInitialized = true;
        }
    }
</source>
        <source file="org/h2/engine/SessionRemote.java" startline="806" endline="828">
private void initJavaObjectSerializer() {
        if (javaObjectSerializerInitialized) {
            return;
        }
        synchronized (this) {
            if (javaObjectSerializerInitialized) {
                return;
            }
            String serializerFQN = readSerializationSettings();
            if (serializerFQN != null) {
                serializerFQN = serializerFQN.trim();
                if (!serializerFQN.isEmpty() &amp;&amp; !serializerFQN.equals("null")) {
                    try {
                        javaObjectSerializer = (JavaObjectSerializer) JdbcUtils
                                .loadUserClass(serializerFQN).newInstance();
                    } catch (Exception e) {
                        throw DbException.convert(e);
                    }
                }
            }
            javaObjectSerializerInitialized = true;
        }
    }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="org/h2/tools/Recover.java" startline="1091" endline="1107">
@Override
        public int read(byte[] b, int off, int len) {
            if (len == 0) {
                return 0;
            }
            int read = 0;
            while (len &gt; 0) {
                int r = readBlock(b, off, len);
                if (r &lt; 0) {
                    break;
                }
                read += r;
                off += r;
                len -= r;
            }
            return read == 0 ? -1 : read;
        }
</source>
        <source file="org/h2/compress/LZFInputStream.java" startline="98" endline="114">
@Override
    public int read(byte[] b, int off, int len) throws IOException {
        if (len == 0) {
            return 0;
        }
        int read = 0;
        while (len &gt; 0) {
            int r = readBlock(b, off, len);
            if (r &lt; 0) {
                break;
            }
            read += r;
            off += r;
            len -= r;
        }
        return read == 0 ? -1 : read;
    }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="org/h2/tools/Recover.java" startline="1091" endline="1107">
@Override
        public int read(byte[] b, int off, int len) {
            if (len == 0) {
                return 0;
            }
            int read = 0;
            while (len &gt; 0) {
                int r = readBlock(b, off, len);
                if (r &lt; 0) {
                    break;
                }
                read += r;
                off += r;
                len -= r;
            }
            return read == 0 ? -1 : read;
        }
</source>
        <source file="org/h2/store/FileStoreInputStream.java" startline="58" endline="74">
@Override
    public int read(byte[] b, int off, int len) throws IOException {
        if (len == 0) {
            return 0;
        }
        int read = 0;
        while (len &gt; 0) {
            int r = readBlock(b, off, len);
            if (r &lt; 0) {
                break;
            }
            read += r;
            off += r;
            len -= r;
        }
        return read == 0 ? -1 : read;
    }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="org/h2/tools/Recover.java" startline="1091" endline="1107">
@Override
        public int read(byte[] b, int off, int len) {
            if (len == 0) {
                return 0;
            }
            int read = 0;
            while (len &gt; 0) {
                int r = readBlock(b, off, len);
                if (r &lt; 0) {
                    break;
                }
                read += r;
                off += r;
                len -= r;
            }
            return read == 0 ? -1 : read;
        }
</source>
        <source file="org/h2/store/PageInputStream.java" startline="55" endline="71">
@Override
    public int read(byte[] b, int off, int len) throws IOException {
        if (len == 0) {
            return 0;
        }
        int read = 0;
        while (len &gt; 0) {
            int r = readBlock(b, off, len);
            if (r &lt; 0) {
                break;
            }
            read += r;
            off += r;
            len -= r;
        }
        return read == 0 ? -1 : read;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/h2/value/ValueLob.java" startline="576" endline="591">
@Override
    public byte[] getBytesNoCopy() {
        if (type == CLOB) {
            // convert hex to string
            return super.getBytesNoCopy();
        }
        if (small != null) {
            return small;
        }
        try {
            return IOUtils.readBytesAndClose(
                    getInputStream(), Integer.MAX_VALUE);
        } catch (IOException e) {
            throw DbException.convertIOException(e, fileName);
        }
    }
</source>
        <source file="org/h2/value/ValueLobDb.java" startline="310" endline="324">
@Override
    public byte[] getBytesNoCopy() {
        if (type == CLOB) {
            // convert hex to string
            return super.getBytesNoCopy();
        }
        if (small != null) {
            return small;
        }
        try {
            return IOUtils.readBytesAndClose(getInputStream(), Integer.MAX_VALUE);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="549" endline="559">
@Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setReadOnly(" + readOnly + ");");
            }
            checkClosed();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="517" endline="528">
@Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setEscapeProcessing("+enable+");");
            }
            checkClosed();
            escapeProcessing = enable;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="918" endline="929">
@Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBytes("+parameterIndex+", "+quoteBytes(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="397" endline="409">
@Override
    public void setDate(int parameterIndex, java.sql.Date x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDate("+parameterIndex+", " + quoteDate(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="918" endline="929">
@Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBytes("+parameterIndex+", "+quoteBytes(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="418" endline="430">
@Override
    public void setTime(int parameterIndex, java.sql.Time x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTime("+parameterIndex+", " + quoteTime(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="918" endline="929">
@Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBytes("+parameterIndex+", "+quoteBytes(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="439" endline="451">
@Override
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTimestamp("+parameterIndex+", " + quoteTimestamp(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTimestamp.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/h2/util/Utils.java" startline="192" endline="205">
public static int compareNotNullSigned(byte[] data1, byte[] data2) {
        if (data1 == data2) {
            return 0;
        }
        int len = Math.min(data1.length, data2.length);
        for (int i = 0; i &lt; len; i++) {
            byte b = data1[i];
            byte b2 = data2[i];
            if (b != b2) {
                return b &gt; b2 ? 1 : -1;
            }
        }
        return Integer.signum(data1.length - data2.length);
    }
</source>
        <source file="org/h2/mvstore/type/ObjectDataType.java" startline="394" endline="407">
public static int compareNotNull(byte[] data1, byte[] data2) {
        if (data1 == data2) {
            return 0;
        }
        int len = Math.min(data1.length, data2.length);
        for (int i = 0; i &lt; len; i++) {
            int b = data1[i] &amp; 255;
            int b2 = data2[i] &amp; 255;
            if (b != b2) {
                return b &gt; b2 ? 1 : -1;
            }
        }
        return Integer.signum(data1.length - data2.length);
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/h2/util/Utils.java" startline="192" endline="205">
public static int compareNotNullSigned(byte[] data1, byte[] data2) {
        if (data1 == data2) {
            return 0;
        }
        int len = Math.min(data1.length, data2.length);
        for (int i = 0; i &lt; len; i++) {
            byte b = data1[i];
            byte b2 = data2[i];
            if (b != b2) {
                return b &gt; b2 ? 1 : -1;
            }
        }
        return Integer.signum(data1.length - data2.length);
    }
</source>
        <source file="org/h2/util/Utils.java" startline="219" endline="232">
public static int compareNotNullUnsigned(byte[] data1, byte[] data2) {
        if (data1 == data2) {
            return 0;
        }
        int len = Math.min(data1.length, data2.length);
        for (int i = 0; i &lt; len; i++) {
            int b = data1[i] &amp; 0xff;
            int b2 = data2[i] &amp; 0xff;
            if (b != b2) {
                return b &gt; b2 ? 1 : -1;
            }
        }
        return Integer.signum(data1.length - data2.length);
    }
</source>
    </clone>
    <clone nlines="22" distance="2">
        <source file="org/h2/value/ValueLob.java" startline="543" endline="564">
@Override
    public String getString() {
        int len = precision &gt; Integer.MAX_VALUE || precision == 0 ?
                Integer.MAX_VALUE : (int) precision;
        try {
            if (type == Value.CLOB) {
                if (small != null) {
                    return new String(small, Constants.UTF8);
                }
                return IOUtils.readStringAndClose(getReader(), len);
            }
            byte[] buff;
            if (small != null) {
                buff = small;
            } else {
                buff = IOUtils.readBytesAndClose(getInputStream(), len);
            }
            return StringUtils.convertBytesToHex(buff);
        } catch (IOException e) {
            throw DbException.convertIOException(e, fileName);
        }
    }
</source>
        <source file="org/h2/value/ValueLobDb.java" startline="277" endline="298">
@Override
    public String getString() {
        int len = precision &gt; Integer.MAX_VALUE || precision == 0 ?
                Integer.MAX_VALUE : (int) precision;
        try {
            if (type == Value.CLOB) {
                if (small != null) {
                    return new String(small, Constants.UTF8);
                }
                return IOUtils.readStringAndClose(getReader(), len);
            }
            byte[] buff;
            if (small != null) {
                buff = small;
            } else {
                buff = IOUtils.readBytesAndClose(getInputStream(), len);
            }
            return StringUtils.convertBytesToHex(buff);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1586" endline="1603">
@Override
    public Blob createBlob() throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            debugCodeAssign("Blob", TraceObject.BLOB, id, "createClob()");
            checkClosedForWrite();
            try {
                Value v = session.getDataHandler().getLobStorage().createBlob(
                        new ByteArrayInputStream(Utils.EMPTY_BYTES), 0);
                session.addTemporaryLob(v);
                return new JdbcBlob(this, v, id);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1561" endline="1579">
@Override
    public Clob createClob() throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            debugCodeAssign("Clob", TraceObject.CLOB, id, "createClob()");
            checkClosedForWrite();
            try {
                Value v = session.getDataHandler().getLobStorage().createClob(
                        new InputStreamReader(
                        new ByteArrayInputStream(Utils.EMPTY_BYTES)), 0);
                session.addTemporaryLob(v);
                return new JdbcClob(this, v, id);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1586" endline="1603">
@Override
    public Blob createBlob() throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            debugCodeAssign("Blob", TraceObject.BLOB, id, "createClob()");
            checkClosedForWrite();
            try {
                Value v = session.getDataHandler().getLobStorage().createBlob(
                        new ByteArrayInputStream(Utils.EMPTY_BYTES), 0);
                session.addTemporaryLob(v);
                return new JdbcBlob(this, v, id);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1610" endline="1628">
@Override
    public NClob createNClob() throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            debugCodeAssign("NClob", TraceObject.CLOB, id, "createNClob()");
            checkClosedForWrite();
            try {
                Value v = session.getDataHandler().getLobStorage().createClob(
                        new InputStreamReader(
                        new ByteArrayInputStream(Utils.EMPTY_BYTES)), 0);
                session.addTemporaryLob(v);
                return new JdbcClob(this, v, id);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/index/PageDataIndex.java" startline="438" endline="448">
@Override
    public long getRowCount(Session session) {
        if (multiVersion) {
            Integer i = sessionRowCount.get(session.getId());
            long count = i == null ? 0 : i.intValue();
            count += rowCount;
            count -= rowCountDiff;
            return count;
        }
        return rowCount;
    }
</source>
        <source file="org/h2/index/ScanIndex.java" startline="182" endline="192">
@Override
    public long getRowCount(Session session) {
        if (database.isMultiVersion()) {
            Integer i = sessionRowCount.get(session.getId());
            long count = i == null ? 0 : i.intValue();
            count += rowCount;
            count -= rowCountDiff;
            return count;
        }
        return rowCount;
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/store/fs/FilePathMem.java" startline="51" endline="64">
@Override
    public void moveTo(FilePath newName, boolean atomicReplace) {
        synchronized (MEMORY_FILES) {
            if (!atomicReplace &amp;&amp; !newName.name.equals(name) &amp;&amp;
                    MEMORY_FILES.containsKey(newName.name)) {
                throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2,
                        new String[] { name, newName + " (exists)" });
            }
            FileMemData f = getMemoryFile();
            f.setName(newName.name);
            MEMORY_FILES.remove(name);
            MEMORY_FILES.put(newName.name, f);
        }
    }
</source>
        <source file="org/h2/store/fs/FilePathNioMem.java" startline="54" endline="67">
@Override
    public void moveTo(FilePath newName, boolean atomicReplace) {
        synchronized (MEMORY_FILES) {
            if (!atomicReplace &amp;&amp; !name.equals(newName.name) &amp;&amp;
                    MEMORY_FILES.containsKey(newName.name)) {
                throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2,
                        new String[] { name, newName + " (exists)" });
            }
            FileNioMemData f = getMemoryFile();
            f.setName(newName.name);
            MEMORY_FILES.remove(name);
            MEMORY_FILES.put(newName.name, f);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/store/FileStoreOutputStream.java" startline="74" endline="83">
@Override
    public void close() {
        if (store != null) {
            try {
                store.close();
            } finally {
                store = null;
            }
        }
    }
</source>
        <source file="org/h2/table/TableLink.java" startline="435" endline="444">
@Override
    public void close(Session session) {
        if (conn != null) {
            try {
                conn.close(false);
            } finally {
                conn = null;
            }
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/store/FileStoreOutputStream.java" startline="74" endline="83">
@Override
    public void close() {
        if (store != null) {
            try {
                store.close();
            } finally {
                store = null;
            }
        }
    }
</source>
        <source file="org/h2/store/FileStoreInputStream.java" startline="132" endline="142">
@Override
    public void close() {
        if (store != null) {
            try {
                store.close();
                endOfFile = true;
            } finally {
                store = null;
            }
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2914" endline="2923">
@Override
    public void moveToInsertRow() throws SQLException {
        try {
            debugCodeCall("moveToInsertRow");
            checkUpdatable();
            insertRow = new Value[columnCount];
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2914" endline="2923">
@Override
    public void moveToInsertRow() throws SQLException {
        try {
            debugCodeCall("moveToInsertRow");
            checkUpdatable();
            insertRow = new Value[columnCount];
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2914" endline="2923">
@Override
    public void moveToInsertRow() throws SQLException {
        try {
            debugCodeCall("moveToInsertRow");
            checkUpdatable();
            insertRow = new Value[columnCount];
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/h2/store/fs/FilePathSplit.java" startline="39" endline="51">
@Override
    public boolean setReadOnly() {
        boolean result = false;
        for (int i = 0;; i++) {
            FilePath f = getBase(i);
            if (f.exists()) {
                result = f.setReadOnly();
            } else {
                break;
            }
        }
        return result;
    }
</source>
        <source file="org/h2/store/fs/FilePathSplit.java" startline="80" endline="92">
@Override
    public long size() {
        long length = 0;
        for (int i = 0;; i++) {
            FilePath f = getBase(i);
            if (f.exists()) {
                length += f.size();
            } else {
                break;
            }
        }
        return length;
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1024" endline="1037">
@Override
    public Blob getBlob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1047" endline="1060">
@Override
    public Blob getBlob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1024" endline="1037">
@Override
    public Blob getBlob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1165" endline="1178">
@Override
    public Clob getClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1024" endline="1037">
@Override
    public Blob getBlob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1210" endline="1223">
@Override
    public Array getArray(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1143" endline="1155">
@Override
    public Clob getClob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1047" endline="1060">
@Override
    public Blob getBlob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1143" endline="1155">
@Override
    public Clob getClob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1165" endline="1178">
@Override
    public Clob getClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1143" endline="1155">
@Override
    public Clob getClob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1210" endline="1223">
@Override
    public Array getArray(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1188" endline="1200">
@Override
    public Array getArray(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1047" endline="1060">
@Override
    public Blob getBlob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1188" endline="1200">
@Override
    public Array getArray(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1165" endline="1178">
@Override
    public Clob getClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1188" endline="1200">
@Override
    public Array getArray(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1210" endline="1223">
@Override
    public Array getArray(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3476" endline="3488">
@Override
    public NClob getNClob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("NClob", TraceObject.CLOB, id, "getNClob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1047" endline="1060">
@Override
    public Blob getBlob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3476" endline="3488">
@Override
    public NClob getNClob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("NClob", TraceObject.CLOB, id, "getNClob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1165" endline="1178">
@Override
    public Clob getClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3476" endline="3488">
@Override
    public NClob getNClob(int columnIndex) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("NClob", TraceObject.CLOB, id, "getNClob(" + columnIndex + ")");
            }
            Value v = get(columnIndex);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1210" endline="1223">
@Override
    public Array getArray(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3498" endline="3510">
@Override
    public NClob getNClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("NClob", TraceObject.CLOB, id, "getNClob(" + columnLabel + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1047" endline="1060">
@Override
    public Blob getBlob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.BLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Blob", TraceObject.BLOB,
                                id, "getBlob(" + quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcBlob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3498" endline="3510">
@Override
    public NClob getNClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("NClob", TraceObject.CLOB, id, "getNClob(" + columnLabel + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1165" endline="1178">
@Override
    public Clob getClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("Clob", TraceObject.CLOB, id, "getClob(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3498" endline="3510">
@Override
    public NClob getNClob(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.CLOB);
            if (isDebugEnabled()) {
                debugCodeAssign("NClob", TraceObject.CLOB, id, "getNClob(" + columnLabel + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcClob(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1210" endline="1223">
@Override
    public Array getArray(String columnLabel) throws SQLException {
        try {
            int id = getNextId(TraceObject.ARRAY);
            if (isDebugEnabled()) {
                debugCodeAssign("Array", TraceObject.ARRAY, id, "getArray(" +
                                quote(columnLabel) + ")");
            }
            Value v = get(columnLabel);
            return v == ValueNull.INSTANCE ? null : new JdbcArray(conn, v, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/index/PageDataIndex.java" startline="507" endline="516">
@Override
    public void commit(int operation, Row row) {
        if (multiVersion) {
            if (delta != null) {
                delta.remove(row);
            }
            incrementRowCount(row.getSessionId(),
                    operation == UndoLogRecord.DELETE ? 1 : -1);
        }
    }
</source>
        <source file="org/h2/index/ScanIndex.java" startline="117" endline="126">
@Override
    public void commit(int operation, Row row) {
        if (database.isMultiVersion()) {
            if (delta != null) {
                delta.remove(row);
            }
            incrementRowCount(row.getSessionId(),
                    operation == UndoLogRecord.DELETE ? 1 : -1);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/h2/mvstore/rtree/SpatialDataType.java" startline="139" endline="151">
public boolean isOverlap(Object objA, Object objB) {
        SpatialKey a = (SpatialKey) objA;
        SpatialKey b = (SpatialKey) objB;
        if (a.isNull() || b.isNull()) {
            return false;
        }
        for (int i = 0; i &lt; dimensions; i++) {
            if (a.max(i) &lt; b.min(i) || a.min(i) &gt; b.max(i)) {
                return false;
            }
        }
        return true;
    }
</source>
        <source file="org/h2/mvstore/rtree/SpatialDataType.java" startline="243" endline="255">
public boolean contains(Object objA, Object objB) {
        SpatialKey a = (SpatialKey) objA;
        SpatialKey b = (SpatialKey) objB;
        if (a.isNull() || b.isNull()) {
            return false;
        }
        for (int i = 0; i &lt; dimensions; i++) {
            if (a.min(i) &gt; b.min(i) || a.max(i) &lt; b.max(i)) {
                return false;
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/h2/mvstore/rtree/SpatialDataType.java" startline="139" endline="151">
public boolean isOverlap(Object objA, Object objB) {
        SpatialKey a = (SpatialKey) objA;
        SpatialKey b = (SpatialKey) objB;
        if (a.isNull() || b.isNull()) {
            return false;
        }
        for (int i = 0; i &lt; dimensions; i++) {
            if (a.max(i) &lt; b.min(i) || a.min(i) &gt; b.max(i)) {
                return false;
            }
        }
        return true;
    }
</source>
        <source file="org/h2/mvstore/rtree/SpatialDataType.java" startline="265" endline="277">
public boolean isInside(Object objA, Object objB) {
        SpatialKey a = (SpatialKey) objA;
        SpatialKey b = (SpatialKey) objB;
        if (a.isNull() || b.isNull()) {
            return false;
        }
        for (int i = 0; i &lt; dimensions; i++) {
            if (a.min(i) &lt;= b.min(i) || a.max(i) &gt;= b.max(i)) {
                return false;
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="org/h2/mvstore/rtree/SpatialDataType.java" startline="243" endline="255">
public boolean contains(Object objA, Object objB) {
        SpatialKey a = (SpatialKey) objA;
        SpatialKey b = (SpatialKey) objB;
        if (a.isNull() || b.isNull()) {
            return false;
        }
        for (int i = 0; i &lt; dimensions; i++) {
            if (a.min(i) &gt; b.min(i) || a.max(i) &lt; b.max(i)) {
                return false;
            }
        }
        return true;
    }
</source>
        <source file="org/h2/mvstore/rtree/SpatialDataType.java" startline="265" endline="277">
public boolean isInside(Object objA, Object objB) {
        SpatialKey a = (SpatialKey) objA;
        SpatialKey b = (SpatialKey) objB;
        if (a.isNull() || b.isNull()) {
            return false;
        }
        for (int i = 0; i &lt; dimensions; i++) {
            if (a.min(i) &lt;= b.min(i) || a.max(i) &gt;= b.max(i)) {
                return false;
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="154" endline="163">
@Override
    public boolean isSigned(int param) throws SQLException {
        try {
            debugCodeCall("isSigned", param);
            getParameter(param);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="213" endline="222">
@Override
    public boolean isCaseSensitive(int column) throws SQLException {
        try {
            debugCodeCall("isCaseSensitive", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="232" endline="241">
@Override
    public boolean isSearchable(int column) throws SQLException {
        try {
            debugCodeCall("isSearchable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="251" endline="260">
@Override
    public boolean isCurrency(int column) throws SQLException {
        try {
            debugCodeCall("isCurrency", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="292" endline="301">
@Override
    public boolean isSigned(int column) throws SQLException {
        try {
            debugCodeCall("isSigned", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="311" endline="320">
@Override
    public boolean isReadOnly(int column) throws SQLException {
        try {
            debugCodeCall("isReadOnly", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="330" endline="339">
@Override
    public boolean isWritable(int column) throws SQLException {
        try {
            debugCodeCall("isWritable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="349" endline="358">
@Override
    public boolean isDefinitelyWritable(int column) throws SQLException {
        try {
            debugCodeCall("isDefinitelyWritable", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="154" endline="163">
@Override
    public boolean isSigned(int param) throws SQLException {
        try {
            debugCodeCall("isSigned", param);
            getParameter(param);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="213" endline="222">
@Override
    public boolean isCaseSensitive(int column) throws SQLException {
        try {
            debugCodeCall("isCaseSensitive", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="232" endline="241">
@Override
    public boolean isSearchable(int column) throws SQLException {
        try {
            debugCodeCall("isSearchable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="251" endline="260">
@Override
    public boolean isCurrency(int column) throws SQLException {
        try {
            debugCodeCall("isCurrency", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="292" endline="301">
@Override
    public boolean isSigned(int column) throws SQLException {
        try {
            debugCodeCall("isSigned", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="311" endline="320">
@Override
    public boolean isReadOnly(int column) throws SQLException {
        try {
            debugCodeCall("isReadOnly", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="330" endline="339">
@Override
    public boolean isWritable(int column) throws SQLException {
        try {
            debugCodeCall("isWritable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="349" endline="358">
@Override
    public boolean isDefinitelyWritable(int column) throws SQLException {
        try {
            debugCodeCall("isDefinitelyWritable", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="145" endline="154">
@Override
    public String getBaseTypeName() throws SQLException {
        try {
            debugCodeCall("getBaseTypeName");
            checkClosed();
            return "NULL";
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="482" endline="491">
@Override
    public int getMaxFieldSize() throws SQLException {
        try {
            debugCodeCall("getMaxFieldSize");
            checkClosed();
            return 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="627" endline="636">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="258" endline="267">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="286" endline="295">
@Override
    public SQLWarning getWarnings() throws SQLException {
        try {
            debugCodeCall("getWarnings");
            checkClosed();
            return null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/expression/ValueExpression.java" startline="150" endline="167">
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.OPTIMIZABLE_MIN_MAX_COUNT_ALL:
        case ExpressionVisitor.DETERMINISTIC:
        case ExpressionVisitor.READONLY:
        case ExpressionVisitor.INDEPENDENT:
        case ExpressionVisitor.EVALUATABLE:
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:
        case ExpressionVisitor.NOT_FROM_RESOLVER:
        case ExpressionVisitor.GET_DEPENDENCIES:
        case ExpressionVisitor.QUERY_COMPARABLE:
        case ExpressionVisitor.GET_COLUMNS:
            return true;
        default:
            throw DbException.throwInternalError("type=" + visitor.getType());
        }
    }
</source>
        <source file="org/h2/expression/Variable.java" startline="64" endline="85">
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.EVALUATABLE:
            // the value will be evaluated at execute time
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:
            // it is checked independently if the value is the same as the last
            // time
        case ExpressionVisitor.OPTIMIZABLE_MIN_MAX_COUNT_ALL:
        case ExpressionVisitor.READONLY:
        case ExpressionVisitor.INDEPENDENT:
        case ExpressionVisitor.NOT_FROM_RESOLVER:
        case ExpressionVisitor.QUERY_COMPARABLE:
        case ExpressionVisitor.GET_DEPENDENCIES:
        case ExpressionVisitor.GET_COLUMNS:
            return true;
        case ExpressionVisitor.DETERMINISTIC:
            return false;
        default:
            throw DbException.throwInternalError("type="+visitor.getType());
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/expression/ValueExpression.java" startline="150" endline="167">
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.OPTIMIZABLE_MIN_MAX_COUNT_ALL:
        case ExpressionVisitor.DETERMINISTIC:
        case ExpressionVisitor.READONLY:
        case ExpressionVisitor.INDEPENDENT:
        case ExpressionVisitor.EVALUATABLE:
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:
        case ExpressionVisitor.NOT_FROM_RESOLVER:
        case ExpressionVisitor.GET_DEPENDENCIES:
        case ExpressionVisitor.QUERY_COMPARABLE:
        case ExpressionVisitor.GET_COLUMNS:
            return true;
        default:
            throw DbException.throwInternalError("type=" + visitor.getType());
        }
    }
</source>
        <source file="org/h2/expression/Rownum.java" startline="80" endline="99">
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.QUERY_COMPARABLE:
        case ExpressionVisitor.OPTIMIZABLE_MIN_MAX_COUNT_ALL:
        case ExpressionVisitor.DETERMINISTIC:
        case ExpressionVisitor.INDEPENDENT:
            return false;
        case ExpressionVisitor.EVALUATABLE:
        case ExpressionVisitor.READONLY:
        case ExpressionVisitor.NOT_FROM_RESOLVER:
        case ExpressionVisitor.GET_DEPENDENCIES:
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:
        case ExpressionVisitor.GET_COLUMNS:
            // if everything else is the same, the rownum is the same
            return true;
        default:
            throw DbException.throwInternalError("type="+visitor.getType());
        }
    }
</source>
    </clone>
    <clone nlines="19" distance="2">
        <source file="org/h2/value/ValueTimestamp.java" startline="261" endline="279">
@Override
    public Value convertScale(boolean onlyToSmallerScale, int targetScale) {
        if (targetScale &gt;= DEFAULT_SCALE) {
            return this;
        }
        if (targetScale &lt; 0) {
            throw DbException.getInvalidValueException("scale", targetScale);
        }
        long n = timeNanos;
        BigDecimal bd = BigDecimal.valueOf(n);
        bd = bd.movePointLeft(9);
        bd = ValueDecimal.setScale(bd, targetScale);
        bd = bd.movePointRight(9);
        long n2 = bd.longValue();
        if (n2 == n) {
            return this;
        }
        return fromDateValueAndNanos(dateValue, n2);
    }
</source>
        <source file="org/h2/value/ValueTimestampTimeZone.java" startline="270" endline="288">
@Override
    public Value convertScale(boolean onlyToSmallerScale, int targetScale) {
        if (targetScale &gt;= DEFAULT_SCALE) {
            return this;
        }
        if (targetScale &lt; 0) {
            throw DbException.getInvalidValueException("scale", targetScale);
        }
        long n = timeNanos;
        BigDecimal bd = BigDecimal.valueOf(n);
        bd = bd.movePointLeft(9);
        bd = ValueDecimal.setScale(bd, targetScale);
        bd = bd.movePointRight(9);
        long n2 = bd.longValue();
        if (n2 == n) {
            return this;
        }
        return fromDateValueAndNanos(dateValue, n2, timeZoneOffsetMins);
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/mvstore/type/ObjectDataType.java" startline="739" endline="750">
@Override
        public Object read(ByteBuffer buff, int tag) {
            switch (tag) {
            case TYPE_INT:
                return DataUtils.readVarInt(buff);
            case TAG_INTEGER_NEGATIVE:
                return -DataUtils.readVarInt(buff);
            case TAG_INTEGER_FIXED:
                return buff.getInt();
            }
            return tag - TAG_INTEGER_0_15;
        }
</source>
        <source file="org/h2/mvstore/type/ObjectDataType.java" startline="805" endline="816">
@Override
        public Object read(ByteBuffer buff, int tag) {
            switch (tag) {
            case TYPE_LONG:
                return DataUtils.readVarLong(buff);
            case TAG_LONG_NEGATIVE:
                return -DataUtils.readVarLong(buff);
            case TAG_LONG_FIXED:
                return buff.getLong();
            }
            return Long.valueOf(tag - TAG_LONG_0_7);
        }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/expression/ConditionNot.java" startline="77" endline="89">
@Override
    public void addFilterConditions(TableFilter filter, boolean outerJoin) {
        if (outerJoin) {
            // can not optimize:
            // select * from test t1 left join test t2 on t1.id = t2.id where
            // not t2.id is not null
            // to
            // select * from test t1 left join test t2 on t1.id = t2.id and
            // t2.id is not null
            return;
        }
        super.addFilterConditions(filter, outerJoin);
    }
</source>
        <source file="org/h2/expression/Comparison.java" startline="476" endline="488">
@Override
    public void addFilterConditions(TableFilter filter, boolean outerJoin) {
        if (compareType == IS_NULL &amp;&amp; outerJoin) {
            // can not optimize:
            // select * from test t1 left join test t2 on t1.id = t2.id
            // where t2.id is null
            // to
            // select * from test t1 left join test t2
            // on t1.id = t2.id and t2.id is null
            return;
        }
        super.addFilterConditions(filter, outerJoin);
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1661" endline="1673">
@Override
    public void updateBigDecimal(int columnIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal("+columnIndex+", " + quoteBigDecimal(x) + ");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1704" endline="1715">
@Override
    public void updateString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3367" endline="3378">
@Override
    public void updateNString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value)
                    ValueNull.INSTANCE : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1661" endline="1673">
@Override
    public void updateBigDecimal(int columnIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal("+columnIndex+", " + quoteBigDecimal(x) + ");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1704" endline="1715">
@Override
    public void updateString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3367" endline="3378">
@Override
    public void updateNString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value)
                    ValueNull.INSTANCE : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1661" endline="1673">
@Override
    public void updateBigDecimal(int columnIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal("+columnIndex+", " + quoteBigDecimal(x) + ");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1704" endline="1715">
@Override
    public void updateString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3367" endline="3378">
@Override
    public void updateNString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value)
                    ValueNull.INSTANCE : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="318" endline="328">
@Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNull("+parameterIndex+", "+sqlType+");");
            }
            setParameter(parameterIndex, ValueNull.INSTANCE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="337" endline="347">
@Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setInt("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="539" endline="549">
@Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBoolean("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="558" endline="568">
@Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setByte("+parameterIndex+", "+x+");");
            }
            setParameter(parameterIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="577" endline="587">
@Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setShort("+parameterIndex+", (short) "+x+");");
            }
            setParameter(parameterIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="596" endline="606">
@Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setLong("+parameterIndex+", "+x+"L);");
            }
            setParameter(parameterIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="615" endline="625">
@Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setFloat("+parameterIndex+", "+x+"f);");
            }
            setParameter(parameterIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="634" endline="644">
@Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDouble("+parameterIndex+", "+x+"d);");
            }
            setParameter(parameterIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1356" endline="1366">
@Override
    public void updateBoolean(int columnIndex, boolean x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1395" endline="1405">
@Override
    public void updateByte(int columnIndex, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1414" endline="1424">
@Override
    public void updateByte(String columnLabel, byte x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateByte("+columnLabel+", "+x+");");
            }
            update(columnLabel, ValueByte.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1471" endline="1481">
@Override
    public void updateShort(int columnIndex, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+columnIndex+", (short) "+x+");");
            }
            update(columnIndex, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1509" endline="1519">
@Override
    public void updateInt(int columnIndex, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+columnIndex+", "+x+");");
            }
            update(columnIndex, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1547" endline="1557">
@Override
    public void updateLong(int columnIndex, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+columnIndex+", "+x+"L);");
            }
            update(columnIndex, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1585" endline="1595">
@Override
    public void updateFloat(int columnIndex, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+columnIndex+", "+x+"f);");
            }
            update(columnIndex, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1375" endline="1386">
@Override
    public void updateBoolean(String columnLabel, boolean x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBoolean("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueBoolean.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1490" endline="1500">
@Override
    public void updateShort(String columnLabel, short x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateShort("+quote(columnLabel)+", (short) "+x+");");
            }
            update(columnLabel, ValueShort.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1528" endline="1538">
@Override
    public void updateInt(String columnLabel, int x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateInt("+quote(columnLabel)+", "+x+");");
            }
            update(columnLabel, ValueInt.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1566" endline="1576">
@Override
    public void updateLong(String columnLabel, long x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateLong("+quote(columnLabel)+", "+x+"L);");
            }
            update(columnLabel, ValueLong.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1604" endline="1614">
@Override
    public void updateFloat(String columnLabel, float x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateFloat("+quote(columnLabel)+", "+x+"f);");
            }
            update(columnLabel, ValueFloat.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1623" endline="1633">
@Override
    public void updateDouble(int columnIndex, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+columnIndex+", "+x+"d);");
            }
            update(columnIndex, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1642" endline="1652">
@Override
    public void updateDouble(String columnLabel, double x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDouble("+quote(columnLabel)+", "+x+"d);");
            }
            update(columnLabel, ValueDouble.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="356" endline="367">
@Override
    public void setString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="397" endline="409">
@Override
    public void setDate(int parameterIndex, java.sql.Date x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDate("+parameterIndex+", " + quoteDate(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="356" endline="367">
@Override
    public void setString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="418" endline="430">
@Override
    public void setTime(int parameterIndex, java.sql.Time x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTime("+parameterIndex+", " + quoteTime(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="356" endline="367">
@Override
    public void setString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="439" endline="451">
@Override
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTimestamp("+parameterIndex+", " + quoteTimestamp(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTimestamp.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="376" endline="388">
@Override
    public void setBigDecimal(int parameterIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBigDecimal("+parameterIndex+", " + quoteBigDecimal(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDecimal.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="397" endline="409">
@Override
    public void setDate(int parameterIndex, java.sql.Date x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDate("+parameterIndex+", " + quoteDate(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="376" endline="388">
@Override
    public void setBigDecimal(int parameterIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBigDecimal("+parameterIndex+", " + quoteBigDecimal(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDecimal.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="418" endline="430">
@Override
    public void setTime(int parameterIndex, java.sql.Time x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTime("+parameterIndex+", " + quoteTime(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="376" endline="388">
@Override
    public void setBigDecimal(int parameterIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBigDecimal("+parameterIndex+", " + quoteBigDecimal(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDecimal.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="439" endline="451">
@Override
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTimestamp("+parameterIndex+", " + quoteTimestamp(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTimestamp.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1467" endline="1478">
@Override
    public void setNString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="397" endline="409">
@Override
    public void setDate(int parameterIndex, java.sql.Date x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setDate("+parameterIndex+", " + quoteDate(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1467" endline="1478">
@Override
    public void setNString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="418" endline="430">
@Override
    public void setTime(int parameterIndex, java.sql.Time x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTime("+parameterIndex+", " + quoteTime(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1467" endline="1478">
@Override
    public void setNString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="439" endline="451">
@Override
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setTimestamp("+parameterIndex+", " + quoteTimestamp(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueTimestamp.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="356" endline="367">
@Override
    public void setString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="918" endline="929">
@Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBytes("+parameterIndex+", "+quoteBytes(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="376" endline="388">
@Override
    public void setBigDecimal(int parameterIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBigDecimal("+parameterIndex+", " + quoteBigDecimal(x) + ");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueDecimal.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="918" endline="929">
@Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBytes("+parameterIndex+", "+quoteBytes(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1467" endline="1478">
@Override
    public void setNString(int parameterIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNString("+parameterIndex+", "+quote(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="918" endline="929">
@Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBytes("+parameterIndex+", "+quoteBytes(x)+");");
            }
            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x);
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1661" endline="1673">
@Override
    public void updateBigDecimal(int columnIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal("+columnIndex+", " + quoteBigDecimal(x) + ");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1682" endline="1695">
@Override
    public void updateBigDecimal(String columnLabel, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal(" + quote(columnLabel) + ", " +
                        quoteBigDecimal(x) + ");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1661" endline="1673">
@Override
    public void updateBigDecimal(int columnIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal("+columnIndex+", " + quoteBigDecimal(x) + ");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1724" endline="1735">
@Override
    public void updateString(String columnLabel, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+quote(columnLabel)+", "+quote(x)+");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1661" endline="1673">
@Override
    public void updateBigDecimal(int columnIndex, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal("+columnIndex+", " + quoteBigDecimal(x) + ");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3387" endline="3398">
@Override
    public void updateNString(String columnLabel, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+quote(columnLabel)+", "+quote(x)+");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE :
                    ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1704" endline="1715">
@Override
    public void updateString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1682" endline="1695">
@Override
    public void updateBigDecimal(String columnLabel, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal(" + quote(columnLabel) + ", " +
                        quoteBigDecimal(x) + ");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1704" endline="1715">
@Override
    public void updateString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1724" endline="1735">
@Override
    public void updateString(String columnLabel, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+quote(columnLabel)+", "+quote(x)+");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1704" endline="1715">
@Override
    public void updateString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3387" endline="3398">
@Override
    public void updateNString(String columnLabel, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+quote(columnLabel)+", "+quote(x)+");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE :
                    ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3367" endline="3378">
@Override
    public void updateNString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value)
                    ValueNull.INSTANCE : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1682" endline="1695">
@Override
    public void updateBigDecimal(String columnLabel, BigDecimal x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBigDecimal(" + quote(columnLabel) + ", " +
                        quoteBigDecimal(x) + ");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueDecimal.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3367" endline="3378">
@Override
    public void updateNString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value)
                    ValueNull.INSTANCE : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1724" endline="1735">
@Override
    public void updateString(String columnLabel, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateString("+quote(columnLabel)+", "+quote(x)+");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3367" endline="3378">
@Override
    public void updateNString(int columnIndex, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+columnIndex+", "+quote(x)+");");
            }
            update(columnIndex, x == null ? (Value)
                    ValueNull.INSTANCE : ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3387" endline="3398">
@Override
    public void updateNString(String columnLabel, String x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNString("+quote(columnLabel)+", "+quote(x)+");");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE :
                    ValueString.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3051" endline="3065">
@Override
    public void deleteRow() throws SQLException {
        try {
            debugCodeCall("deleteRow");
            checkUpdatable();
            if (insertRow != null) {
                throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);
            }
            checkOnValidRow();
            getUpdatableRow().deleteRow(result.currentRow());
            updateRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3074" endline="3088">
@Override
    public void refreshRow() throws SQLException {
        try {
            debugCodeCall("refreshRow");
            checkClosed();
            if (insertRow != null) {
                throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);
            }
            checkOnValidRow();
            patchCurrentRow(getUpdatableRow().readRow(result.currentRow()));
            updateRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="54" distance="2">
        <source file="org/h2/table/RegularTable.java" startline="480" endline="533">
private void doLock1(Session session, int lockMode, boolean exclusive) {
        traceLock(session, exclusive, "requesting for");
        // don't get the current time unless necessary
        long max = 0;
        boolean checkDeadlock = false;
        while (true) {
            // if I'm the next one in the queue
            if (waitingSessions.getFirst() == session) {
                if (doLock2(session, lockMode, exclusive)) {
                    return;
                }
            }
            if (checkDeadlock) {
                ArrayList&lt;Session&gt; sessions = checkDeadlock(session, null, null);
                if (sessions != null) {
                    throw DbException.get(ErrorCode.DEADLOCK_1,
                            getDeadlockDetails(sessions, exclusive));
                }
            } else {
                // check for deadlocks from now on
                checkDeadlock = true;
            }
            long now = System.nanoTime();
            if (max == 0) {
                // try at least one more time
                max = now + TimeUnit.MILLISECONDS.toNanos(session.getLockTimeout());
            } else if (now &gt;= max) {
                traceLock(session, exclusive, "timeout after " + session.getLockTimeout());
                throw DbException.get(ErrorCode.LOCK_TIMEOUT_1, getName());
            }
            try {
                traceLock(session, exclusive, "waiting for");
                if (database.getLockMode() == Constants.LOCK_MODE_TABLE_GC) {
                    for (int i = 0; i &lt; 20; i++) {
                        long free = Runtime.getRuntime().freeMemory();
                        System.gc();
                        long free2 = Runtime.getRuntime().freeMemory();
                        if (free == free2) {
                            break;
                        }
                    }
                }
                // don't wait too long so that deadlocks are detected early
                long sleep = Math.min(Constants.DEADLOCK_CHECK,
                        TimeUnit.NANOSECONDS.toMillis(max - now));
                if (sleep == 0) {
                    sleep = 1;
                }
                database.wait(sleep);
            } catch (InterruptedException e) {
                // ignore
            }
        }
    }
</source>
        <source file="org/h2/mvstore/db/MVTable.java" startline="194" endline="248">
private void doLock1(Session session, int lockMode, boolean exclusive) {
        traceLock(session, exclusive, "requesting for");
        // don't get the current time unless necessary
        long max = 0;
        boolean checkDeadlock = false;
        while (true) {
            // if I'm the next one in the queue
            if (waitingSessions.getFirst() == session) {
                if (doLock2(session, lockMode, exclusive)) {
                    return;
                }
            }
            if (checkDeadlock) {
                ArrayList&lt;Session&gt; sessions = checkDeadlock(session, null, null);
                if (sessions != null) {
                    throw DbException.get(ErrorCode.DEADLOCK_1,
                            getDeadlockDetails(sessions, exclusive));
                }
            } else {
                // check for deadlocks from now on
                checkDeadlock = true;
            }
            long now = System.nanoTime();
            if (max == 0) {
                // try at least one more time
                max = now + TimeUnit.MILLISECONDS.toNanos(session.getLockTimeout());
            } else if (now &gt;= max) {
                traceLock(session, exclusive,
                        "timeout after " + session.getLockTimeout());
                throw DbException.get(ErrorCode.LOCK_TIMEOUT_1, getName());
            }
            try {
                traceLock(session, exclusive, "waiting for");
                if (database.getLockMode() == Constants.LOCK_MODE_TABLE_GC) {
                    for (int i = 0; i &lt; 20; i++) {
                        long free = Runtime.getRuntime().freeMemory();
                        System.gc();
                        long free2 = Runtime.getRuntime().freeMemory();
                        if (free == free2) {
                            break;
                        }
                    }
                }
                // don't wait too long so that deadlocks are detected early
                long sleep = Math.min(Constants.DEADLOCK_CHECK,
                        TimeUnit.NANOSECONDS.toMillis(max - now));
                if (sleep == 0) {
                    sleep = 1;
                }
                getLockSyncObject().wait(sleep);
            } catch (InterruptedException e) {
                // ignore
            }
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/engine/Session.java" startline="410" endline="419">
public void addLocalTempTableIndex(Index index) {
        if (localTempTableIndexes == null) {
            localTempTableIndexes = database.newStringMap();
        }
        if (localTempTableIndexes.get(index.getName()) != null) {
            throw DbException.get(ErrorCode.INDEX_ALREADY_EXISTS_1,
                    index.getSQL());
        }
        localTempTableIndexes.put(index.getName(), index);
    }
</source>
        <source file="org/h2/engine/Session.java" startline="358" endline="368">
public void addLocalTempTable(Table table) {
        if (localTempTables == null) {
            localTempTables = database.newStringMap();
        }
        if (localTempTables.get(table.getName()) != null) {
            throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1,
                    table.getSQL());
        }
        modificationId++;
        localTempTables.put(table.getName(), table);
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/h2/command/ddl/DropAggregate.java" startline="28" endline="42">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        UserAggregate aggregate = db.findAggregate(name);
        if (aggregate == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.AGGREGATE_NOT_FOUND_1, name);
            }
        } else {
            db.removeDatabaseObject(session, aggregate);
        }
        return 0;
    }
</source>
        <source file="org/h2/command/ddl/DropConstant.java" startline="37" endline="51">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        Constant constant = getSchema().findConstant(constantName);
        if (constant == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.CONSTANT_NOT_FOUND_1, constantName);
            }
        } else {
            db.removeSchemaObject(session, constant);
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/h2/command/ddl/DropAggregate.java" startline="28" endline="42">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        UserAggregate aggregate = db.findAggregate(name);
        if (aggregate == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.AGGREGATE_NOT_FOUND_1, name);
            }
        } else {
            db.removeDatabaseObject(session, aggregate);
        }
        return 0;
    }
</source>
        <source file="org/h2/command/ddl/DropFunctionAlias.java" startline="29" endline="43">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        FunctionAlias functionAlias = getSchema().findFunction(aliasName);
        if (functionAlias == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.FUNCTION_ALIAS_NOT_FOUND_1, aliasName);
            }
        } else {
            db.removeSchemaObject(session, functionAlias);
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/h2/command/ddl/DropUserDataType.java" startline="32" endline="46">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        UserDataType type = db.findUserDataType(typeName);
        if (type == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.USER_DATA_TYPE_NOT_FOUND_1, typeName);
            }
        } else {
            db.removeDatabaseObject(session, type);
        }
        return 0;
    }
</source>
        <source file="org/h2/command/ddl/DropConstant.java" startline="37" endline="51">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        Constant constant = getSchema().findConstant(constantName);
        if (constant == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.CONSTANT_NOT_FOUND_1, constantName);
            }
        } else {
            db.removeSchemaObject(session, constant);
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="org/h2/command/ddl/DropUserDataType.java" startline="32" endline="46">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        UserDataType type = db.findUserDataType(typeName);
        if (type == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.USER_DATA_TYPE_NOT_FOUND_1, typeName);
            }
        } else {
            db.removeDatabaseObject(session, type);
        }
        return 0;
    }
</source>
        <source file="org/h2/command/ddl/DropFunctionAlias.java" startline="29" endline="43">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        FunctionAlias functionAlias = getSchema().findFunction(aliasName);
        if (functionAlias == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.FUNCTION_ALIAS_NOT_FOUND_1, aliasName);
            }
        } else {
            db.removeSchemaObject(session, functionAlias);
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1152" endline="1161">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchParameters = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2930" endline="2939">
@Override
    public void moveToCurrentRow() throws SQLException {
        try {
            debugCodeCall("moveToCurrentRow");
            checkUpdatable();
            insertRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="638" endline="647">
@Override
    public void clearBatch() throws SQLException {
        try {
            debugCodeCall("clearBatch");
            checkClosed();
            batchCommands = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="849" endline="858">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return holdability;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="43" endline="52">
@Override
    public int getParameterCount() throws SQLException {
        try {
            debugCodeCall("getParameterCount");
            checkClosed();
            return paramCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="165" endline="174">
@Override
    public boolean wasNull() throws SQLException {
        try {
            debugCodeCall("wasNull");
            checkClosed();
            return wasNull;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="45" endline="54">
@Override
    public int getColumnCount() throws SQLException {
        try {
            debugCodeCall("getColumnCount");
            checkClosed();
            return columnCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="238" endline="247">
@Override
    public int getUpdateCount() throws SQLException {
        try {
            debugCodeCall("getUpdateCount");
            checkClosed();
            return updateCount;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="367" endline="376">
@Override
    public int getMaxRows() throws SQLException {
        try {
            debugCodeCall("getMaxRows");
            checkClosed();
            return maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="432" endline="441">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return fetchSize;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="448" endline="457">
@Override
    public int getResultSetConcurrency() throws SQLException {
        try {
            debugCodeCall("getResultSetConcurrency");
            checkClosed();
            return resultSetConcurrency;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="465" endline="474">
@Override
    public int getResultSetType()  throws SQLException {
        try {
            debugCodeCall("getResultSetType");
            checkClosed();
            return resultSetType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="org/h2/jdbc/JdbcSavepoint.java" startline="82" endline="94">
@Override
    public int getSavepointId() throws SQLException {
        try {
            debugCodeCall("getSavepointId");
            checkValid();
            if (name != null) {
                throw DbException.get(ErrorCode.SAVEPOINT_IS_NAMED);
            }
            return savepointId;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcSavepoint.java" startline="100" endline="112">
@Override
    public String getSavepointName() throws SQLException {
        try {
            debugCodeCall("getSavepointName");
            checkValid();
            if (name == null) {
                throw DbException.get(ErrorCode.SAVEPOINT_IS_UNNAMED);
            }
            return name;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcSavepoint.java" startline="82" endline="94">
@Override
    public int getSavepointId() throws SQLException {
        try {
            debugCodeCall("getSavepointId");
            checkValid();
            if (name != null) {
                throw DbException.get(ErrorCode.SAVEPOINT_IS_NAMED);
            }
            return savepointId;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3096" endline="3108">
@Override
    public void cancelRowUpdates() throws SQLException {
        try {
            debugCodeCall("cancelRowUpdates");
            checkClosed();
            if (insertRow != null) {
                throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);
            }
            updateRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="708" endline="720">
@Override
    public ResultSet getGeneratedKeys() throws SQLException {
        try {
            int id = getNextId(TraceObject.RESULT_SET);
            if (isDebugEnabled()) {
                debugCodeAssign("ResultSet", TraceObject.RESULT_SET, id, "getGeneratedKeys()");
            }
            checkClosed();
            return conn.getGeneratedKeys(this, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="327" endline="340">
@Override
    public DatabaseMetaData getMetaData() throws SQLException {
        try {
            int id = getNextId(TraceObject.DATABASE_META_DATA);
            if (isDebugEnabled()) {
                debugCodeAssign("DatabaseMetaData",
                        TraceObject.DATABASE_META_DATA, id, "getMetaData()");
            }
            checkClosed();
            return new JdbcDatabaseMetaData(this, trace, id);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="org/h2/server/web/WebServer.java" startline="362" endline="377">
@Override
    public boolean isRunning(boolean traceError) {
        if (serverSocket == null) {
            return false;
        }
        try {
            Socket s = NetUtils.createLoopbackSocket(port, ssl);
            s.close();
            return true;
        } catch (Exception e) {
            if (traceError) {
                traceError(e);
            }
            return false;
        }
    }
</source>
        <source file="org/h2/server/TcpServer.java" startline="264" endline="279">
@Override
    public synchronized boolean isRunning(boolean traceError) {
        if (serverSocket == null) {
            return false;
        }
        try {
            Socket s = NetUtils.createLoopbackSocket(port, ssl);
            s.close();
            return true;
        } catch (Exception e) {
            if (traceError) {
                traceError(e);
            }
            return false;
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="5">
        <source file="org/h2/server/web/WebServer.java" startline="362" endline="377">
@Override
    public boolean isRunning(boolean traceError) {
        if (serverSocket == null) {
            return false;
        }
        try {
            Socket s = NetUtils.createLoopbackSocket(port, ssl);
            s.close();
            return true;
        } catch (Exception e) {
            if (traceError) {
                traceError(e);
            }
            return false;
        }
    }
</source>
        <source file="org/h2/server/pg/PgServer.java" startline="246" endline="261">
@Override
    public boolean isRunning(boolean traceError) {
        if (serverSocket == null) {
            return false;
        }
        try {
            Socket s = NetUtils.createLoopbackSocket(serverSocket.getLocalPort(), false);
            s.close();
            return true;
        } catch (Exception e) {
            if (traceError) {
                traceError(e);
            }
            return false;
        }
    }
</source>
    </clone>
    <clone nlines="22" distance="3">
        <source file="org/h2/expression/Variable.java" startline="64" endline="85">
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.EVALUATABLE:
            // the value will be evaluated at execute time
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:
            // it is checked independently if the value is the same as the last
            // time
        case ExpressionVisitor.OPTIMIZABLE_MIN_MAX_COUNT_ALL:
        case ExpressionVisitor.READONLY:
        case ExpressionVisitor.INDEPENDENT:
        case ExpressionVisitor.NOT_FROM_RESOLVER:
        case ExpressionVisitor.QUERY_COMPARABLE:
        case ExpressionVisitor.GET_DEPENDENCIES:
        case ExpressionVisitor.GET_COLUMNS:
            return true;
        case ExpressionVisitor.DETERMINISTIC:
            return false;
        default:
            throw DbException.throwInternalError("type="+visitor.getType());
        }
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="148" endline="169">
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.EVALUATABLE:
            // the parameter _will_be_ evaluatable at execute time
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:
            // it is checked independently if the value is the same as the last
            // time
        case ExpressionVisitor.NOT_FROM_RESOLVER:
        case ExpressionVisitor.QUERY_COMPARABLE:
        case ExpressionVisitor.GET_DEPENDENCIES:
        case ExpressionVisitor.OPTIMIZABLE_MIN_MAX_COUNT_ALL:
        case ExpressionVisitor.DETERMINISTIC:
        case ExpressionVisitor.READONLY:
        case ExpressionVisitor.GET_COLUMNS:
            return true;
        case ExpressionVisitor.INDEPENDENT:
            return value != null;
        default:
            throw DbException.throwInternalError("type="+visitor.getType());
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="63" endline="72">
@Override
    public String getColumnLabel(int column) throws SQLException {
        try {
            debugCodeCall("getColumnLabel", column);
            checkColumnIndex(column);
            return result.getAlias(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="81" endline="90">
@Override
    public String getColumnName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnName", column);
            checkColumnIndex(column);
            return result.getColumnName(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="194" endline="203">
@Override
    public boolean isAutoIncrement(int column) throws SQLException {
        try {
            debugCodeCall("isAutoIncrement", column);
            checkColumnIndex(column);
            return result.isAutoIncrement(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="273" endline="282">
@Override
    public int isNullable(int column) throws SQLException {
        try {
            debugCodeCall("isNullable", column);
            checkColumnIndex(column);
            return result.getNullable(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="406" endline="415">
@Override
    public int getScale(int column) throws SQLException {
        try {
            debugCodeCall("getScale", column);
            checkColumnIndex(column);
            return result.getColumnScale(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="424" endline="433">
@Override
    public int getColumnDisplaySize(int column) throws SQLException {
        try {
            debugCodeCall("getColumnDisplaySize", column);
            checkColumnIndex(column);
            return result.getDisplaySize(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1744" endline="1754">
@Override
    public void updateDate(int columnIndex, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1744" endline="1754">
@Override
    public void updateDate(int columnIndex, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1744" endline="1754">
@Override
    public void updateDate(int columnIndex, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1782" endline="1792">
@Override
    public void updateTime(int columnIndex, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1782" endline="1792">
@Override
    public void updateTime(int columnIndex, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1782" endline="1792">
@Override
    public void updateTime(int columnIndex, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1820" endline="1832">
@Override
    public void updateTimestamp(int columnIndex, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1763" endline="1773">
@Override
    public void updateDate(String columnLabel, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1820" endline="1832">
@Override
    public void updateTimestamp(int columnIndex, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1801" endline="1811">
@Override
    public void updateTime(String columnLabel, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1820" endline="1832">
@Override
    public void updateTimestamp(int columnIndex, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1841" endline="1853">
@Override
    public void updateTimestamp(String columnLabel, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1744" endline="1754">
@Override
    public void updateDate(int columnIndex, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1782" endline="1792">
@Override
    public void updateTime(int columnIndex, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1820" endline="1832">
@Override
    public void updateTimestamp(int columnIndex, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1433" endline="1443">
@Override
    public void updateBytes(int columnIndex, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1744" endline="1754">
@Override
    public void updateDate(int columnIndex, Date x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateDate("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueDate.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1782" endline="1792">
@Override
    public void updateTime(int columnIndex, Time x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTime("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE : ValueTime.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1820" endline="1832">
@Override
    public void updateTimestamp(int columnIndex, Timestamp x)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateTimestamp("+columnIndex+", x);");
            }
            update(columnIndex, x == null ? (Value) ValueNull.INSTANCE
                    : ValueTimestamp.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1452" endline="1462">
@Override
    public void updateBytes(String columnLabel, byte[] x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBytes("+quote(columnLabel)+", x);");
            }
            update(columnLabel, x == null ? (Value) ValueNull.INSTANCE : ValueBytes.get(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2206" endline="2216">
@Override
    public void updateObject(int columnIndex, Object x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x);");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2225" endline="2235">
@Override
    public void updateObject(String columnLabel, Object x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x);");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/util/Utils.java" startline="729" endline="739">
public static boolean getProperty(String key, boolean defaultValue) {
        String s = getProperty(key, null);
        if (s != null) {
            try {
                return Boolean.parseBoolean(s);
            } catch (NumberFormatException e) {
                // ignore
            }
        }
        return defaultValue;
    }
</source>
        <source file="org/h2/util/Utils.java" startline="709" endline="719">
public static int getProperty(String key, int defaultValue) {
        String s = getProperty(key, null);
        if (s != null) {
            try {
                return Integer.decode(s).intValue();
            } catch (NumberFormatException e) {
                // ignore
            }
        }
        return defaultValue;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/mvstore/FreeSpaceBitSet.java" startline="79" endline="88">
public boolean isFree(long pos, int length) {
        int start = getBlock(pos);
        int blocks = getBlockCount(length);
        for (int i = start; i &lt; start + blocks; i++) {
            if (set.get(i)) {
                return false;
            }
        }
        return true;
    }
</source>
        <source file="org/h2/mvstore/FreeSpaceBitSet.java" startline="61" endline="70">
public boolean isUsed(long pos, int length) {
        int start = getBlock(pos);
        int blocks = getBlockCount(length);
        for (int i = start; i &lt; start + blocks; i++) {
            if (!set.get(i)) {
                return false;
            }
        }
        return true;
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/command/ddl/DropSchema.java" startline="32" endline="49">
@Override
    public int update() {
        session.getUser().checkSchemaAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        Schema schema = db.findSchema(schemaName);
        if (schema == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.SCHEMA_NOT_FOUND_1, schemaName);
            }
        } else {
            if (!schema.canDrop()) {
                throw DbException.get(ErrorCode.SCHEMA_CAN_NOT_BE_DROPPED_1, schemaName);
            }
            db.removeDatabaseObject(session, schema);
        }
        return 0;
    }
</source>
        <source file="org/h2/command/ddl/DropSequence.java" startline="37" endline="54">
@Override
    public int update() {
        session.getUser().checkAdmin();
        session.commit(true);
        Database db = session.getDatabase();
        Sequence sequence = getSchema().findSequence(sequenceName);
        if (sequence == null) {
            if (!ifExists) {
                throw DbException.get(ErrorCode.SEQUENCE_NOT_FOUND_1, sequenceName);
            }
        } else {
            if (sequence.getBelongsToTable()) {
                throw DbException.get(ErrorCode.SEQUENCE_BELONGS_TO_A_TABLE_1, sequenceName);
            }
            db.removeSchemaObject(session, sequence);
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="43" endline="52">
@Override
    public Object getArray() throws SQLException {
        try {
            debugCodeCall("getArray");
            checkClosed();
            return get();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="126" endline="135">
@Override
    public boolean next() throws SQLException {
        try {
            debugCodeCall("next");
            checkClosed();
            return nextRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="731" endline="741">
@Override
    public boolean getMoreResults() throws SQLException {
        try {
            debugCodeCall("getMoreResults");
            checkClosed();
            closeOldResultSet();
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcArray.java" startline="128" endline="137">
@Override
    public int getBaseType() throws SQLException {
        try {
            debugCodeCall("getBaseType");
            checkClosed();
            return Types.NULL;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2573" endline="2582">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="350" endline="359">
@Override
    public int getFetchDirection() throws SQLException {
        try {
            debugCodeCall("getFetchDirection");
            checkClosed();
            return ResultSet.FETCH_FORWARD;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="930" endline="939">
@Override
    public int getResultSetHoldability() throws SQLException {
        try {
            debugCodeCall("getResultSetHoldability");
            checkClosed();
            return ResultSet.HOLD_CURSORS_OVER_COMMIT;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2897" endline="2906">
@Override
    public boolean previous() throws SQLException {
        try {
            debugCodeCall("previous");
            checkClosed();
            return relative(-1);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcSavepoint.java" startline="100" endline="112">
@Override
    public String getSavepointName() throws SQLException {
        try {
            debugCodeCall("getSavepointName");
            checkValid();
            if (name == null) {
                throw DbException.get(ErrorCode.SAVEPOINT_IS_UNNAMED);
            }
            return name;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3096" endline="3108">
@Override
    public void cancelRowUpdates() throws SQLException {
        try {
            debugCodeCall("cancelRowUpdates");
            checkClosed();
            if (insertRow != null) {
                throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);
            }
            updateRow = null;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="758" endline="770">
@Override
    public ResultSet getCatalogs() throws SQLException {
        try {
            debugCodeCall("getCatalogs");
            checkClosed();
            PreparedStatement prep = conn.prepareAutoCloseStatement(
                    "SELECT CATALOG_NAME TABLE_CAT "
                    + "FROM INFORMATION_SCHEMA.CATALOGS");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="782" endline="795">
@Override
    public ResultSet getTableTypes() throws SQLException {
        try {
            debugCodeCall("getTableTypes");
            checkClosed();
            PreparedStatement prep = conn.prepareAutoCloseStatement("SELECT "
                    + "TYPE TABLE_TYPE "
                    + "FROM INFORMATION_SCHEMA.TABLE_TYPES "
                    + "ORDER BY TABLE_TYPE");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="154" endline="163">
@Override
    public boolean isSigned(int param) throws SQLException {
        try {
            debugCodeCall("isSigned", param);
            getParameter(param);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="213" endline="222">
@Override
    public boolean isCaseSensitive(int column) throws SQLException {
        try {
            debugCodeCall("isCaseSensitive", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="232" endline="241">
@Override
    public boolean isSearchable(int column) throws SQLException {
        try {
            debugCodeCall("isSearchable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="251" endline="260">
@Override
    public boolean isCurrency(int column) throws SQLException {
        try {
            debugCodeCall("isCurrency", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="292" endline="301">
@Override
    public boolean isSigned(int column) throws SQLException {
        try {
            debugCodeCall("isSigned", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="311" endline="320">
@Override
    public boolean isReadOnly(int column) throws SQLException {
        try {
            debugCodeCall("isReadOnly", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="330" endline="339">
@Override
    public boolean isWritable(int column) throws SQLException {
        try {
            debugCodeCall("isWritable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="349" endline="358">
@Override
    public boolean isDefinitelyWritable(int column) throws SQLException {
        try {
            debugCodeCall("isDefinitelyWritable", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="154" endline="163">
@Override
    public boolean isSigned(int param) throws SQLException {
        try {
            debugCodeCall("isSigned", param);
            getParameter(param);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="213" endline="222">
@Override
    public boolean isCaseSensitive(int column) throws SQLException {
        try {
            debugCodeCall("isCaseSensitive", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="232" endline="241">
@Override
    public boolean isSearchable(int column) throws SQLException {
        try {
            debugCodeCall("isSearchable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="251" endline="260">
@Override
    public boolean isCurrency(int column) throws SQLException {
        try {
            debugCodeCall("isCurrency", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="292" endline="301">
@Override
    public boolean isSigned(int column) throws SQLException {
        try {
            debugCodeCall("isSigned", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="311" endline="320">
@Override
    public boolean isReadOnly(int column) throws SQLException {
        try {
            debugCodeCall("isReadOnly", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="330" endline="339">
@Override
    public boolean isWritable(int column) throws SQLException {
        try {
            debugCodeCall("isWritable", column);
            checkColumnIndex(column);
            return true;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="349" endline="358">
@Override
    public boolean isDefinitelyWritable(int column) throws SQLException {
        try {
            debugCodeCall("isDefinitelyWritable", column);
            checkColumnIndex(column);
            return false;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="172" endline="185">
@Override
    public String getParameterClassName(int param) throws SQLException {
        try {
            debugCodeCall("getParameterClassName", param);
            ParameterInterface p = getParameter(param);
            int type = p.getType();
            if (type == Value.UNKNOWN) {
                type = Value.STRING;
            }
            return DataType.getTypeClassName(type);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="79" endline="92">
@Override
    public int getParameterType(int param) throws SQLException {
        try {
            debugCodeCall("getParameterType", param);
            ParameterInterface p = getParameter(param);
            int type = p.getType();
            if (type == Value.UNKNOWN) {
                type = Value.STRING;
            }
            return DataType.getDataType(type).sqlType;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="172" endline="185">
@Override
    public String getParameterClassName(int param) throws SQLException {
        try {
            debugCodeCall("getParameterClassName", param);
            ParameterInterface p = getParameter(param);
            int type = p.getType();
            if (type == Value.UNKNOWN) {
                type = Value.STRING;
            }
            return DataType.getTypeClassName(type);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="194" endline="207">
@Override
    public String getParameterTypeName(int param) throws SQLException {
        try {
            debugCodeCall("getParameterTypeName", param);
            ParameterInterface p = getParameter(param);
            int type = p.getType();
            if (type == Value.UNKNOWN) {
                type = Value.STRING;
            }
            return DataType.getDataType(type).name;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1252" endline="1261">
@Override
    public InputStream getAsciiStream(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getAsciiStream", columnLabel);
            String s = get(columnLabel).getString();
            return IOUtils.getInputStreamFromString(s);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="101" endline="110">
@Override
    public int getPrecision(int param) throws SQLException {
        try {
            debugCodeCall("getPrecision", param);
            ParameterInterface p = getParameter(param);
            return MathUtils.convertLongToInt(p.getPrecision());
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="548" endline="557">
@Override
    public boolean getBoolean(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getBoolean", columnIndex);
            Boolean v = get(columnIndex).getBoolean();
            return v == null ? false : v.booleanValue();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1233" endline="1242">
@Override
    public InputStream getAsciiStream(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getAsciiStream", columnIndex);
            String s = get(columnIndex).getString();
            return s == null ? null : IOUtils.getInputStreamFromString(s);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="567" endline="576">
@Override
    public boolean getBoolean(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getBoolean", columnLabel);
            Boolean v = get(columnLabel).getBoolean();
            return v == null ? false : v.booleanValue();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1233" endline="1242">
@Override
    public InputStream getAsciiStream(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getAsciiStream", columnIndex);
            String s = get(columnIndex).getString();
            return s == null ? null : IOUtils.getInputStreamFromString(s);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1155" endline="1167">
@Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteIntArray(columnIndexes) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1180" endline="1192">
@Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " +
                        quoteArray(columnNames) + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="813" endline="823">
@Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="838" endline="848">
@Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="888" endline="898">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteIntArray(columnIndexes)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="913" endline="923">
@Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+quoteArray(columnNames)+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1131" endline="1142">
@Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("prepareStatement(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            return prepareStatement(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="787" endline="798">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeUpdateInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="863" endline="873">
@Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            return executeInternal(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1297" endline="1308">
@Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate("+quote(sql)+", "+autoGeneratedKeys+");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1318" endline="1330">
@Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1339" endline="1352">
@Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("executeUpdate(" + quote(sql) + ", " +
                                quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1382" endline="1392">
@Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteIntArray(columnIndexes) + ");");
            }
            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1361" endline="1373">
@Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + autoGeneratedKeys + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1401" endline="1413">
@Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("execute(" + quote(sql) + ", " + quoteArray(columnNames) + ");");
            }
            throw DbException.get(
                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="932" endline="951">
@Override
    public CallableStatement prepareCall(String sql, int resultSetType,
            int resultSetConcurrency) throws SQLException {
        try {
            int id = getNextId(TraceObject.CALLABLE_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("CallableStatement",
                        TraceObject.CALLABLE_STATEMENT, id, "prepareCall(" +
                                quote(sql) + ", " + resultSetType + ", " +
                                resultSetConcurrency + ")");
            }
            checkTypeConcurrency(resultSetType, resultSetConcurrency);
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcCallableStatement(this, sql, id, resultSetType,
                    resultSetConcurrency);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="663" endline="682">
@Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency) throws SQLException {
        try {
            int id = getNextId(TraceObject.PREPARED_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("PreparedStatement", TraceObject.PREPARED_STATEMENT, id,
                        "prepareStatement(" + quote(sql) + ", " +
                                resultSetType + ", " + resultSetConcurrency +
                                ")");
            }
            checkTypeConcurrency(resultSetType, resultSetConcurrency);
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcPreparedStatement(this, sql, id, resultSetType,
                    resultSetConcurrency, false);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="384" endline="396">
@Override
    public void setMaxRows(int maxRows) throws SQLException {
        try {
            debugCodeCall("setMaxRows", maxRows);
            checkClosed();
            if (maxRows &lt; 0) {
                throw DbException.getInvalidValueException("maxRows", maxRows);
            }
            this.maxRows = maxRows;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcStatement.java" startline="601" endline="613">
@Override
    public void setQueryTimeout(int seconds) throws SQLException {
        try {
            debugCodeCall("setQueryTimeout", seconds);
            checkClosed();
            if (seconds &lt; 0) {
                throw DbException.getInvalidValueException("seconds", seconds);
            }
            conn.setQueryTimeout(seconds);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1532" endline="1549">
@Override
    public void setNClob(int parameterIndex, NClob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNClob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2321" endline="2338">
@Override
    public void updateBlob(String columnLabel, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createBlob(x.getBinaryStream(), -1);
            }
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1532" endline="1549">
@Override
    public void setNClob(int parameterIndex, NClob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNClob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2443" endline="2460">
@Override
    public void updateClob(String columnLabel, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2295" endline="2312">
@Override
    public void updateBlob(int columnIndex, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createBlob(x.getBinaryStream(), -1);
            }
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2321" endline="2338">
@Override
    public void updateBlob(String columnLabel, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createBlob(x.getBinaryStream(), -1);
            }
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2295" endline="2312">
@Override
    public void updateBlob(int columnIndex, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createBlob(x.getBinaryStream(), -1);
            }
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2443" endline="2460">
@Override
    public void updateClob(String columnLabel, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2382" endline="2399">
@Override
    public void updateClob(int columnIndex, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2321" endline="2338">
@Override
    public void updateBlob(String columnLabel, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createBlob(x.getBinaryStream(), -1);
            }
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2382" endline="2399">
@Override
    public void updateClob(int columnIndex, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2443" endline="2460">
@Override
    public void updateClob(String columnLabel, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1532" endline="1549">
@Override
    public void setNClob(int parameterIndex, NClob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNClob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="892" endline="909">
@Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setArray("+parameterIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = DataType.convertToValue(session, x.getArray(), Value.ARRAY);
            }
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2295" endline="2312">
@Override
    public void updateBlob(int columnIndex, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createBlob(x.getBinaryStream(), -1);
            }
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="892" endline="909">
@Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setArray("+parameterIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = DataType.convertToValue(session, x.getArray(), Value.ARRAY);
            }
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2382" endline="2399">
@Override
    public void updateClob(int columnIndex, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = conn.createClob(x.getCharacterStream(), -1);
            }
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="892" endline="909">
@Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setArray("+parameterIndex+", x);");
            }
            checkClosed();
            Value v;
            if (x == null) {
                v = ValueNull.INSTANCE;
            } else {
                v = DataType.convertToValue(session, x.getArray(), Value.ARRAY);
            }
            setParameter(parameterIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2163" endline="2174">
@Override
    public void updateObject(int columnIndex, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+columnIndex+", x, "+scale+");");
            }
            update(columnIndex, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2186" endline="2197">
@Override
    public void updateObject(String columnLabel, Object x, int scale)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateObject("+quote(columnLabel)+", x, "+scale+");");
            }
            update(columnLabel, convertToUnknownValue(x));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1940" endline="1953">
@Override
    public void updateAsciiStream(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1940" endline="1953">
@Override
    public void updateAsciiStream(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1940" endline="1953">
@Override
    public void updateAsciiStream(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1940" endline="1953">
@Override
    public void updateAsciiStream(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/expression/ExpressionColumn.java" startline="253" endline="262">
@Override
    public String getAlias() {
        if (column != null) {
            return column.getName();
        }
        if (tableAlias != null) {
            return tableAlias + "." + columnName;
        }
        return columnName;
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="110" endline="119">
@Override
    public int getScale() {
        if (value != null) {
            return value.getScale();
        }
        if (column != null) {
            return column.getScale();
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/expression/ExpressionColumn.java" startline="253" endline="262">
@Override
    public String getAlias() {
        if (column != null) {
            return column.getName();
        }
        if (tableAlias != null) {
            return tableAlias + "." + columnName;
        }
        return columnName;
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="121" endline="130">
@Override
    public long getPrecision() {
        if (value != null) {
            return value.getPrecision();
        }
        if (column != null) {
            return column.getPrecision();
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/expression/ExpressionColumn.java" startline="253" endline="262">
@Override
    public String getAlias() {
        if (column != null) {
            return column.getName();
        }
        if (tableAlias != null) {
            return tableAlias + "." + columnName;
        }
        return columnName;
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="132" endline="141">
@Override
    public int getDisplaySize() {
        if (value != null) {
            return value.getDisplaySize();
        }
        if (column != null) {
            return column.getDisplaySize();
        }
        return 0;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="455" endline="464">
@Override
    public synchronized boolean getAutoCommit() throws SQLException {
        try {
            checkClosed();
            debugCodeCall("getAutoCommit");
            return session.getAutoCommit();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcBlob.java" startline="147" endline="156">
@Override
    public InputStream getBinaryStream() throws SQLException {
        try {
            debugCodeCall("getBinaryStream");
            checkClosed();
            return value.getInputStream();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcClob.java" startline="106" endline="115">
@Override
    public Reader getCharacterStream() throws SQLException {
        try {
            debugCodeCall("getCharacterStream");
            checkClosed();
            return value.getReader();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2589" endline="2598">
@Override
    public int getFetchSize() throws SQLException {
        try {
            debugCodeCall("getFetchSize");
            checkClosed();
            return result.getFetchSize();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3334" endline="3343">
@Override
    public int getHoldability() throws SQLException {
        try {
            debugCodeCall("getHoldability");
            checkClosed();
            return conn.getHoldability();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcStatement.java" startline="580" endline="589">
@Override
    public int getQueryTimeout() throws SQLException {
        try {
            debugCodeCall("getQueryTimeout");
            checkClosed();
            return conn.getQueryTimeout();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcArray.java" startline="163" endline="172">
@Override
    public ResultSet getResultSet() throws SQLException {
        try {
            debugCodeCall("getResultSet");
            checkClosed();
            return getResultSet(get(), 0);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2678" endline="2687">
@Override
    public boolean isBeforeFirst() throws SQLException {
        try {
            debugCodeCall("isBeforeFirst");
            checkClosed();
            return result.getRowId() &lt; 0 &amp;&amp; result.hasNext();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2697" endline="2706">
@Override
    public boolean isAfterLast() throws SQLException {
        try {
            debugCodeCall("isAfterLast");
            checkClosed();
            return result.getRowId() &gt; 0 &amp;&amp; result.isAfterLast();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2678" endline="2687">
@Override
    public boolean isBeforeFirst() throws SQLException {
        try {
            debugCodeCall("isBeforeFirst");
            checkClosed();
            return result.getRowId() &lt; 0 &amp;&amp; result.hasNext();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2715" endline="2724">
@Override
    public boolean isFirst() throws SQLException {
        try {
            debugCodeCall("isFirst");
            checkClosed();
            return result.getRowId() == 0 &amp;&amp; !result.isAfterLast();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2697" endline="2706">
@Override
    public boolean isAfterLast() throws SQLException {
        try {
            debugCodeCall("isAfterLast");
            checkClosed();
            return result.getRowId() &gt; 0 &amp;&amp; result.isAfterLast();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2715" endline="2724">
@Override
    public boolean isFirst() throws SQLException {
        try {
            debugCodeCall("isFirst");
            checkClosed();
            return result.getRowId() == 0 &amp;&amp; !result.isAfterLast();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="org/h2/jdbc/JdbcBlob.java" startline="49" endline="64">
@Override
    public long length() throws SQLException {
        try {
            debugCodeCall("length");
            checkClosed();
            if (value.getType() == Value.BLOB) {
                long precision = value.getPrecision();
                if (precision &gt; 0) {
                    return precision;
                }
            }
            return IOUtils.copyAndCloseInput(value.getInputStream(), null);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcClob.java" startline="51" endline="66">
@Override
    public long length() throws SQLException {
        try {
            debugCodeCall("length");
            checkClosed();
            if (value.getType() == Value.CLOB) {
                long precision = value.getPrecision();
                if (precision &gt; 0) {
                    return precision;
                }
            }
            return IOUtils.copyAndCloseInput(value.getReader(), null, Long.MAX_VALUE);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/h2/jdbc/JdbcClob.java" startline="81" endline="91">
@Override
    public InputStream getAsciiStream() throws SQLException {
        try {
            debugCodeCall("getAsciiStream");
            checkClosed();
            String s = value.getString();
            return IOUtils.getInputStreamFromString(s);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="758" endline="770">
@Override
    public ResultSet getCatalogs() throws SQLException {
        try {
            debugCodeCall("getCatalogs");
            checkClosed();
            PreparedStatement prep = conn.prepareAutoCloseStatement(
                    "SELECT CATALOG_NAME TABLE_CAT "
                    + "FROM INFORMATION_SCHEMA.CATALOGS");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="782" endline="795">
@Override
    public ResultSet getTableTypes() throws SQLException {
        try {
            debugCodeCall("getTableTypes");
            checkClosed();
            PreparedStatement prep = conn.prepareAutoCloseStatement("SELECT "
                    + "TYPE TABLE_TYPE "
                    + "FROM INFORMATION_SCHEMA.TABLE_TYPES "
                    + "ORDER BY TABLE_TYPE");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="729" endline="745">
@Override
    public ResultSet getSchemas() throws SQLException {
        try {
            debugCodeCall("getSchemas");
            checkClosed();
            PreparedStatement prep = conn
                    .prepareAutoCloseStatement("SELECT "
                            + "SCHEMA_NAME TABLE_SCHEM, "
                            + "CATALOG_NAME TABLE_CATALOG, "
                            +" IS_DEFAULT "
                            + "FROM INFORMATION_SCHEMA.SCHEMATA "
                            + "ORDER BY SCHEMA_NAME");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="901" endline="918">
@Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        try {
            int id = getNextId(TraceObject.CALLABLE_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("CallableStatement",
                        TraceObject.CALLABLE_STATEMENT, id, "prepareCall(" +
                                quote(sql) + ")");
            }
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcCallableStatement(this, sql, id,
                    ResultSet.TYPE_FORWARD_ONLY,
                    Constants.DEFAULT_RESULT_SET_CONCURRENCY);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="277" endline="294">
@Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        try {
            int id = getNextId(TraceObject.PREPARED_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("PreparedStatement",
                        TraceObject.PREPARED_STATEMENT, id,
                        "prepareStatement(" + quote(sql) + ")");
            }
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcPreparedStatement(this, sql, id,
                    ResultSet.TYPE_FORWARD_ONLY,
                    Constants.DEFAULT_RESULT_SET_CONCURRENCY, false);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="61" endline="70">
@Override
    public int getParameterMode(int param) throws SQLException {
        try {
            debugCodeCall("getParameterMode", param);
            getParameter(param);
            return parameterModeIn;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="531" endline="540">
@Override
    public String nativeSQL(String sql) throws SQLException {
        try {
            debugCodeCall("nativeSQL", sql);
            checkClosed();
            return translateSQL(sql);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="63" endline="72">
@Override
    public String getColumnLabel(int column) throws SQLException {
        try {
            debugCodeCall("getColumnLabel", column);
            checkColumnIndex(column);
            return result.getAlias(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="81" endline="90">
@Override
    public String getColumnName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnName", column);
            checkColumnIndex(column);
            return result.getColumnName(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="194" endline="203">
@Override
    public boolean isAutoIncrement(int column) throws SQLException {
        try {
            debugCodeCall("isAutoIncrement", column);
            checkColumnIndex(column);
            return result.isAutoIncrement(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="273" endline="282">
@Override
    public int isNullable(int column) throws SQLException {
        try {
            debugCodeCall("isNullable", column);
            checkColumnIndex(column);
            return result.getNullable(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="406" endline="415">
@Override
    public int getScale(int column) throws SQLException {
        try {
            debugCodeCall("getScale", column);
            checkColumnIndex(column);
            return result.getColumnScale(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="5">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="424" endline="433">
@Override
    public int getColumnDisplaySize(int column) throws SQLException {
        try {
            debugCodeCall("getColumnDisplaySize", column);
            checkColumnIndex(column);
            return result.getDisplaySize(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="119" endline="128">
@Override
    public int getScale(int param) throws SQLException {
        try {
            debugCodeCall("getScale", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="63" endline="72">
@Override
    public String getColumnLabel(int column) throws SQLException {
        try {
            debugCodeCall("getColumnLabel", column);
            checkColumnIndex(column);
            return result.getAlias(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="63" endline="72">
@Override
    public String getColumnLabel(int column) throws SQLException {
        try {
            debugCodeCall("getColumnLabel", column);
            checkColumnIndex(column);
            return result.getAlias(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="81" endline="90">
@Override
    public String getColumnName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnName", column);
            checkColumnIndex(column);
            return result.getColumnName(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="81" endline="90">
@Override
    public String getColumnName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnName", column);
            checkColumnIndex(column);
            return result.getColumnName(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="194" endline="203">
@Override
    public boolean isAutoIncrement(int column) throws SQLException {
        try {
            debugCodeCall("isAutoIncrement", column);
            checkColumnIndex(column);
            return result.isAutoIncrement(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="194" endline="203">
@Override
    public boolean isAutoIncrement(int column) throws SQLException {
        try {
            debugCodeCall("isAutoIncrement", column);
            checkColumnIndex(column);
            return result.isAutoIncrement(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="273" endline="282">
@Override
    public int isNullable(int column) throws SQLException {
        try {
            debugCodeCall("isNullable", column);
            checkColumnIndex(column);
            return result.getNullable(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="273" endline="282">
@Override
    public int isNullable(int column) throws SQLException {
        try {
            debugCodeCall("isNullable", column);
            checkColumnIndex(column);
            return result.getNullable(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="406" endline="415">
@Override
    public int getScale(int column) throws SQLException {
        try {
            debugCodeCall("getScale", column);
            checkColumnIndex(column);
            return result.getColumnScale(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="406" endline="415">
@Override
    public int getScale(int column) throws SQLException {
        try {
            debugCodeCall("getScale", column);
            checkColumnIndex(column);
            return result.getColumnScale(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="424" endline="433">
@Override
    public int getColumnDisplaySize(int column) throws SQLException {
        try {
            debugCodeCall("getColumnDisplaySize", column);
            checkColumnIndex(column);
            return result.getDisplaySize(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="424" endline="433">
@Override
    public int getColumnDisplaySize(int column) throws SQLException {
        try {
            debugCodeCall("getColumnDisplaySize", column);
            checkColumnIndex(column);
            return result.getDisplaySize(--column);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="100" endline="110">
@Override
    public int getColumnType(int column) throws SQLException {
        try {
            debugCodeCall("getColumnType", column);
            checkColumnIndex(column);
            int type = result.getColumnType(--column);
            return DataType.convertTypeToSQLType(type);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="119" endline="129">
@Override
    public String getColumnTypeName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnTypeName", column);
            checkColumnIndex(column);
            int type = result.getColumnType(--column);
            return DataType.getDataType(type).name;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="368" endline="378">
@Override
    public String getColumnClassName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnClassName", column);
            checkColumnIndex(column);
            int type = result.getColumnType(--column);
            return DataType.getTypeClassName(type);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="119" endline="129">
@Override
    public String getColumnTypeName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnTypeName", column);
            checkColumnIndex(column);
            int type = result.getColumnType(--column);
            return DataType.getDataType(type).name;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="387" endline="397">
@Override
    public int getPrecision(int column) throws SQLException {
        try {
            debugCodeCall("getPrecision", column);
            checkColumnIndex(column);
            long prec = result.getColumnPrecision(--column);
            return MathUtils.convertLongToInt(prec);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSetMetaData.java" startline="119" endline="129">
@Override
    public String getColumnTypeName(int column) throws SQLException {
        try {
            debugCodeCall("getColumnTypeName", column);
            checkColumnIndex(column);
            int type = result.getColumnType(--column);
            return DataType.getDataType(type).name;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1252" endline="1261">
@Override
    public InputStream getAsciiStream(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getAsciiStream", columnLabel);
            String s = get(columnLabel).getString();
            return IOUtils.getInputStreamFromString(s);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1252" endline="1261">
@Override
    public InputStream getAsciiStream(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getAsciiStream", columnLabel);
            String s = get(columnLabel).getString();
            return IOUtils.getInputStreamFromString(s);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="509" endline="518">
@Override
    public Object getObject(int columnIndex) throws SQLException {
        try {
            debugCodeCall("getObject", columnIndex);
            Value v = get(columnIndex);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="101" endline="110">
@Override
    public int getPrecision(int param) throws SQLException {
        try {
            debugCodeCall("getPrecision", param);
            ParameterInterface p = getParameter(param);
            return MathUtils.convertLongToInt(p.getPrecision());
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="529" endline="538">
@Override
    public Object getObject(String columnLabel) throws SQLException {
        try {
            debugCodeCall("getObject", columnLabel);
            Value v = get(columnLabel);
            return conn.convertToDefaultObject(v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcParameterMetaData.java" startline="101" endline="110">
@Override
    public int getPrecision(int param) throws SQLException {
        try {
            debugCodeCall("getPrecision", param);
            ParameterInterface p = getParameter(param);
            return MathUtils.convertLongToInt(p.getPrecision());
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="883" endline="893">
@Override
    public Date getDate(int columnIndex, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getDate(" + columnIndex + ", calendar)");
            }
            return DateTimeUtils.convertDate(get(columnIndex), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="905" endline="918">
@Override
    public Date getDate(String columnLabel, Calendar calendar)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getDate(" +
                        StringUtils.quoteJavaString(columnLabel) +
                        ", calendar)");
            }
            return DateTimeUtils.convertDate(get(columnLabel), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="883" endline="893">
@Override
    public Date getDate(int columnIndex, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getDate(" + columnIndex + ", calendar)");
            }
            return DateTimeUtils.convertDate(get(columnIndex), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="952" endline="965">
@Override
    public Time getTime(String columnLabel, Calendar calendar)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTime(" +
                        StringUtils.quoteJavaString(columnLabel) +
                        ", calendar)");
            }
            return DateTimeUtils.convertTime(get(columnLabel), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="930" endline="940">
@Override
    public Time getTime(int columnIndex, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTime(" + columnIndex + ", calendar)");
            }
            return DateTimeUtils.convertTime(get(columnIndex), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="905" endline="918">
@Override
    public Date getDate(String columnLabel, Calendar calendar)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getDate(" +
                        StringUtils.quoteJavaString(columnLabel) +
                        ", calendar)");
            }
            return DateTimeUtils.convertDate(get(columnLabel), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="11" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="930" endline="940">
@Override
    public Time getTime(int columnIndex, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTime(" + columnIndex + ", calendar)");
            }
            return DateTimeUtils.convertTime(get(columnIndex), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="952" endline="965">
@Override
    public Time getTime(String columnLabel, Calendar calendar)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTime(" +
                        StringUtils.quoteJavaString(columnLabel) +
                        ", calendar)");
            }
            return DateTimeUtils.convertTime(get(columnLabel), calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="13" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="977" endline="989">
@Override
    public Timestamp getTimestamp(int columnIndex, Calendar calendar)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTimestamp(" + columnIndex + ", calendar)");
            }
            Value value = get(columnIndex);
            return DateTimeUtils.convertTimestamp(value, calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1000" endline="1014">
@Override
    public Timestamp getTimestamp(String columnLabel, Calendar calendar)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTimestamp(" +
                        StringUtils.quoteJavaString(columnLabel) +
                        ", calendar)");
            }
            Value value = get(columnLabel);
            return DateTimeUtils.convertTimestamp(value, calendar);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="22" distance="2">
        <source file="org/h2/jdbc/JdbcConnection.java" startline="966" endline="987">
@Override
    public CallableStatement prepareCall(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        try {
            int id = getNextId(TraceObject.CALLABLE_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("CallableStatement",
                        TraceObject.CALLABLE_STATEMENT, id, "prepareCall(" +
                                quote(sql) + ", " + resultSetType + ", " +
                                resultSetConcurrency + ", " +
                                resultSetHoldability + ")");
            }
            checkTypeConcurrency(resultSetType, resultSetConcurrency);
            checkHoldability(resultSetHoldability);
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcCallableStatement(this, sql, id, resultSetType,
                    resultSetConcurrency);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcConnection.java" startline="1097" endline="1118">
@Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        try {
            int id = getNextId(TraceObject.PREPARED_STATEMENT);
            if (isDebugEnabled()) {
                debugCodeAssign("PreparedStatement", TraceObject.PREPARED_STATEMENT, id,
                        "prepareStatement(" + quote(sql) + ", " +
                        resultSetType + ", " + resultSetConcurrency + ", " +
                        resultSetHoldability + ")");
            }
            checkTypeConcurrency(resultSetType, resultSetConcurrency);
            checkHoldability(resultSetHoldability);
            checkClosed();
            sql = translateSQL(sql);
            return new JdbcPreparedStatement(this, sql, id,
                    resultSetType, resultSetConcurrency, false);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="22" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="862" endline="883">
@Override
    public void setClob(int parameterIndex, Reader x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setClob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            try {
                Value v;
                if (x == null) {
                    v = ValueNull.INSTANCE;
                } else {
                    v = conn.createClob(x, -1);
                }
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="773" endline="794">
@Override
    public void setBlob(int parameterIndex, Blob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBlob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            try {
                Value v;
                if (x == null) {
                    v = ValueNull.INSTANCE;
                } else {
                    v = conn.createBlob(x.getBinaryStream(), -1);
                }
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="22" distance="4">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="862" endline="883">
@Override
    public void setClob(int parameterIndex, Reader x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setClob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            try {
                Value v;
                if (x == null) {
                    v = ValueNull.INSTANCE;
                } else {
                    v = conn.createClob(x, -1);
                }
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="830" endline="851">
@Override
    public void setClob(int parameterIndex, Clob x) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setClob("+parameterIndex+", x);");
            }
            checkClosedForWrite();
            try {
                Value v;
                if (x == null) {
                    v = ValueNull.INSTANCE;
                } else {
                    v = conn.createClob(x.getCharacterStream(), -1);
                }
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/expression/Parameter.java" startline="110" endline="119">
@Override
    public int getScale() {
        if (value != null) {
            return value.getScale();
        }
        if (column != null) {
            return column.getScale();
        }
        return 0;
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="62" endline="71">
@Override
    public int getType() {
        if (value != null) {
            return value.getType();
        }
        if (column != null) {
            return column.getType();
        }
        return Value.UNKNOWN;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/expression/Parameter.java" startline="121" endline="130">
@Override
    public long getPrecision() {
        if (value != null) {
            return value.getPrecision();
        }
        if (column != null) {
            return column.getPrecision();
        }
        return 0;
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="62" endline="71">
@Override
    public int getType() {
        if (value != null) {
            return value.getType();
        }
        if (column != null) {
            return column.getType();
        }
        return Value.UNKNOWN;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/h2/expression/Parameter.java" startline="132" endline="141">
@Override
    public int getDisplaySize() {
        if (value != null) {
            return value.getDisplaySize();
        }
        if (column != null) {
            return column.getDisplaySize();
        }
        return 0;
    }
</source>
        <source file="org/h2/expression/Parameter.java" startline="62" endline="71">
@Override
    public int getType() {
        if (value != null) {
            return value.getType();
        }
        if (column != null) {
            return column.getType();
        }
        return Value.UNKNOWN;
    }
</source>
    </clone>
    <clone nlines="12" distance="5">
        <source file="org/h2/store/fs/FilePathMem.java" startline="321" endline="332">
@Override
    public int write(ByteBuffer src) throws IOException {
        int len = src.remaining();
        if (len == 0) {
            return 0;
        }
        data.touch(readOnly);
        pos = data.readWrite(pos, src.array(),
                src.arrayOffset() + src.position(), len, true);
        src.position(src.position() + len);
        return len;
    }
</source>
        <source file="org/h2/store/fs/FilePathMem.java" startline="308" endline="319">
@Override
    public int write(ByteBuffer src, long position) throws IOException {
        int len = src.remaining();
        if (len == 0) {
            return 0;
        }
        data.touch(readOnly);
        data.readWrite(position, src.array(),
                src.arrayOffset() + src.position(), len, true);
        src.position(src.position() + len);
        return len;
    }
</source>
    </clone>
    <clone nlines="35" distance="4">
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="888" endline="922">
@Override
    public ResultSet getTablePrivileges(String catalogPattern,
            String schemaPattern, String tableNamePattern) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getTablePrivileges("
                        +quote(catalogPattern)+", "
                        +quote(schemaPattern)+", "
                        +quote(tableNamePattern)+");");
            }
            checkClosed();
            PreparedStatement prep = conn.prepareAutoCloseStatement("SELECT "
                    + "TABLE_CATALOG TABLE_CAT, "
                    + "TABLE_SCHEMA TABLE_SCHEM, "
                    + "TABLE_NAME, "
                    + "GRANTOR, "
                    + "GRANTEE, "
                    + "PRIVILEGE_TYPE PRIVILEGE, "
                    + "IS_GRANTABLE "
                    + "FROM INFORMATION_SCHEMA.TABLE_PRIVILEGES "
                    + "WHERE TABLE_CATALOG LIKE ? ESCAPE ? "
                    + "AND TABLE_SCHEMA LIKE ? ESCAPE ? "
                    + "AND TABLE_NAME LIKE ? ESCAPE ? "
                    + "ORDER BY TABLE_SCHEM, TABLE_NAME, PRIVILEGE");
            prep.setString(1, getCatalogPattern(catalogPattern));
            prep.setString(2, "\\");
            prep.setString(3, getSchemaPattern(schemaPattern));
            prep.setString(4, "\\");
            prep.setString(5, getPattern(tableNamePattern));
            prep.setString(6, "\\");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcDatabaseMetaData.java" startline="582" endline="618">
@Override
    public ResultSet getProcedures(String catalogPattern, String schemaPattern,
            String procedureNamePattern) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("getProcedures("
                        +quote(catalogPattern)+", "
                        +quote(schemaPattern)+", "
                        +quote(procedureNamePattern)+");");
            }
            checkClosed();
            PreparedStatement prep = conn.prepareAutoCloseStatement("SELECT "
                    + "ALIAS_CATALOG PROCEDURE_CAT, "
                    + "ALIAS_SCHEMA PROCEDURE_SCHEM, "
                    + "ALIAS_NAME PROCEDURE_NAME, "
                    + "COLUMN_COUNT NUM_INPUT_PARAMS, "
                    + "ZERO() NUM_OUTPUT_PARAMS, "
                    + "ZERO() NUM_RESULT_SETS, "
                    + "REMARKS, "
                    + "RETURNS_RESULT PROCEDURE_TYPE, "
                    + "ALIAS_NAME SPECIFIC_NAME "
                    + "FROM INFORMATION_SCHEMA.FUNCTION_ALIASES "
                    + "WHERE ALIAS_CATALOG LIKE ? ESCAPE ? "
                    + "AND ALIAS_SCHEMA LIKE ? ESCAPE ? "
                    + "AND ALIAS_NAME LIKE ? ESCAPE ? "
                    + "ORDER BY PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS");
            prep.setString(1, getCatalogPattern(catalogPattern));
            prep.setString(2, "\\");
            prep.setString(3, getSchemaPattern(schemaPattern));
            prep.setString(4, "\\");
            prep.setString(5, getPattern(procedureNamePattern));
            prep.setString(6, "\\");
            return prep.executeQuery();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="21" distance="4">
        <source file="org/h2/mvstore/type/ObjectDataType.java" startline="844" endline="864">
@Override
        public void write(WriteBuffer buff, Object obj) {
            if (!(obj instanceof Float)) {
                super.write(buff, obj);
                return;
            }
            float x = (Float) obj;
            int f = Float.floatToIntBits(x);
            if (f == ObjectDataType.FLOAT_ZERO_BITS) {
                buff.put((byte) TAG_FLOAT_0);
            } else if (f == ObjectDataType.FLOAT_ONE_BITS) {
                buff.put((byte) TAG_FLOAT_1);
            } else {
                int value = Integer.reverse(f);
                if (value &gt;= 0 &amp;&amp; value &lt;= DataUtils.COMPRESSED_VAR_INT_MAX) {
                    buff.put((byte) TYPE_FLOAT).putVarInt(value);
                } else {
                    buff.put((byte) TAG_FLOAT_FIXED).putFloat(x);
                }
            }
        }
</source>
        <source file="org/h2/mvstore/type/ObjectDataType.java" startline="906" endline="928">
@Override
        public void write(WriteBuffer buff, Object obj) {
            if (!(obj instanceof Double)) {
                super.write(buff, obj);
                return;
            }
            double x = (Double) obj;
            long d = Double.doubleToLongBits(x);
            if (d == ObjectDataType.DOUBLE_ZERO_BITS) {
                buff.put((byte) TAG_DOUBLE_0);
            } else if (d == ObjectDataType.DOUBLE_ONE_BITS) {
                buff.put((byte) TAG_DOUBLE_1);
            } else {
                long value = Long.reverse(d);
                if (value &gt;= 0 &amp;&amp; value &lt;= DataUtils.COMPRESSED_VAR_LONG_MAX) {
                    buff.put((byte) TYPE_DOUBLE);
                    buff.putVarLong(value);
                } else {
                    buff.put((byte) TAG_DOUBLE_FIXED);
                    buff.putDouble(x);
                }
            }
        }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="941" endline="958">
@Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBinaryStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createBlob(x, length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1017" endline="1034">
@Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setAsciiStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1092" endline="1109">
@Override
    public void setCharacterStream(int parameterIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setCharacterStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(x, length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1017" endline="1034">
@Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setAsciiStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1490" endline="1508">
@Override
    public void setNCharacterStream(int parameterIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNCharacterStream("+
                    parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(x, length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1017" endline="1034">
@Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setAsciiStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1587" endline="1604">
@Override
    public void setClob(int parameterIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setClob("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(x, length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1017" endline="1034">
@Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setAsciiStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1616" endline="1633">
@Override
    public void setBlob(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setBlob("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createBlob(x, length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1017" endline="1034">
@Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setAsciiStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="18" distance="5">
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1645" endline="1662">
@Override
    public void setNClob(int parameterIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setNClob("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(x, length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcPreparedStatement.java" startline="1017" endline="1034">
@Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("setAsciiStream("+parameterIndex+", x, "+length+"L);");
            }
            checkClosedForWrite();
            try {
                Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
                setParameter(parameterIndex, v);
            } finally {
                afterWriting();
            }
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1890" endline="1903">
@Override
    public void updateAsciiStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1940" endline="1953">
@Override
    public void updateAsciiStream(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1990" endline="2003">
@Override
    public void updateBinaryStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1990" endline="2003">
@Override
    public void updateBinaryStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1990" endline="2003">
@Override
    public void updateBinaryStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1990" endline="2003">
@Override
    public void updateBinaryStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2063" endline="2076">
@Override
    public void updateCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2063" endline="2076">
@Override
    public void updateCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2063" endline="2076">
@Override
    public void updateCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2063" endline="2076">
@Override
    public void updateCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2273" endline="2286">
@Override
    public void updateBlob(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2273" endline="2286">
@Override
    public void updateBlob(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2273" endline="2286">
@Override
    public void updateBlob(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2273" endline="2286">
@Override
    public void updateBlob(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2421" endline="2434">
@Override
    public void updateClob(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2421" endline="2434">
@Override
    public void updateClob(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2421" endline="2434">
@Override
    public void updateClob(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2421" endline="2434">
@Override
    public void updateClob(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3641" endline="3654">
@Override
    public void updateNCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2040" endline="2053">
@Override
    public void updateBinaryStream(String columnLabel, InputStream x,
            long length) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3641" endline="3654">
@Override
    public void updateNCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2140" endline="2153">
@Override
    public void updateCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3641" endline="3654">
@Override
    public void updateNCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2482" endline="2495">
@Override
    public void updateClob(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3641" endline="3654">
@Override
    public void updateNCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3677" endline="3690">
@Override
    public void updateNCharacterStream(String columnLabel, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+quote(columnLabel)+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1990" endline="2003">
@Override
    public void updateBinaryStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1890" endline="1903">
@Override
    public void updateAsciiStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2063" endline="2076">
@Override
    public void updateCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1890" endline="1903">
@Override
    public void updateAsciiStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2273" endline="2286">
@Override
    public void updateBlob(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1890" endline="1903">
@Override
    public void updateAsciiStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2421" endline="2434">
@Override
    public void updateClob(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1890" endline="1903">
@Override
    public void updateAsciiStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3641" endline="3654">
@Override
    public void updateNCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1890" endline="1903">
@Override
    public void updateAsciiStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateAsciiStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="1990" endline="2003">
@Override
    public void updateBinaryStream(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBinaryStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2063" endline="2076">
@Override
    public void updateCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2273" endline="2286">
@Override
    public void updateBlob(int columnIndex, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2421" endline="2434">
@Override
    public void updateClob(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateClob("+columnIndex+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
    <clone nlines="14" distance="5">
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="3641" endline="3654">
@Override
    public void updateNCharacterStream(int columnIndex, Reader x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateNCharacterStream("+columnIndex+", x, "+length+"L);");
            }
            checkClosed();
            Value v = conn.createClob(x, length);
            update(columnIndex, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
        <source file="org/h2/jdbc/JdbcResultSet.java" startline="2360" endline="2373">
@Override
    public void updateBlob(String columnLabel, InputStream x, long length)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode("updateBlob("+quote(columnLabel)+", x, " + length + "L);");
            }
            checkClosed();
            Value v = conn.createBlob(x, -1);
            update(columnLabel, v);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }
</source>
    </clone>
</clones>
