<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<clones>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/DTDConfiguration.java" startline="303" startcolumn="9" endline="312" endcolumn="10">
final String[] recognizedFeatures = {
            //WARN_ON_DUPLICATE_ATTDEF,     // from XMLDTDScannerImpl
            //WARN_ON_UNDECLARED_ELEMDEF,   // from XMLDTDScannerImpl
            //ALLOW_JAVA_ENCODINGS,         // from XMLEntityManager
            CONTINUE_AFTER_FATAL_ERROR,
            LOAD_EXTERNAL_DTD,    // from XMLDTDScannerImpl
            //NOTIFY_BUILTIN_REFS,  // from XMLDocumentFragmentScannerImpl
            //NOTIFY_CHAR_REFS,         // from XMLDocumentFragmentScannerImpl
            //WARN_ON_DUPLICATE_ENTITYDEF,  // from XMLEntityManager
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/NonValidatingConfiguration.java" startline="284" startcolumn="9" endline="295" endcolumn="10">
final String[] recognizedFeatures = {
                PARSER_SETTINGS,
                        NAMESPACES,
            //WARN_ON_DUPLICATE_ATTDEF,     // from XMLDTDScannerImpl
            //WARN_ON_UNDECLARED_ELEMDEF,   // from XMLDTDScannerImpl
            //ALLOW_JAVA_ENCODINGS,         // from XMLEntityManager
            CONTINUE_AFTER_FATAL_ERROR,
            //LOAD_EXTERNAL_DTD,    // from XMLDTDScannerImpl
            //NOTIFY_BUILTIN_REFS,  // from XMLDocumentFragmentScannerImpl
            //NOTIFY_CHAR_REFS,         // from XMLDocumentFragmentScannerImpl
            //WARN_ON_DUPLICATE_ENTITYDEF   // from XMLEntityManager
        };
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/compiler/Compiler.java" startline="906" startcolumn="5" endline="932" endcolumn="5">
if(null == ancestorPattern)
    {
      // This is the magic and invisible "." at the head of every
      // match pattern, and corresponds to the current node in the context
      // list, from where predicates are counted.
      // So, in order to calculate "foo[3]", it has to count from the
      // current node in the context list, so, from that current node,
      // the full pattern is really "self::node()/child::foo[3]".  If you
      // translate this to a select pattern from the node being tested,
      // which is really how we're treating match patterns, it works out to
      // self::foo/parent::node[child::foo[3]]", or close enough.
        /*      if(addMagicSelf &amp;&amp; pattern.getPredicateCount() &gt; 0)
      {
        StepPattern selfPattern = new StepPattern(DTMFilter.SHOW_ALL,
                                                  Axis.PARENT, Axis.CHILD);
        // We need to keep the new nodetest from affecting the score...
        XNumber score = pattern.getStaticScore();
        pattern.setRelativePathPattern(selfPattern);
        pattern.setStaticScore(score);
        selfPattern.setStaticScore(score);
        }*/
    }
    else
    {
      // System.out.println("Setting "+ancestorPattern+" as relative to "+pattern);
      pattern.setRelativePathPattern(ancestorPattern);
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/WalkerFactory.java" startline="841" startcolumn="7" endline="850" endcolumn="7">
if (null == firstStep)
      {
        firstStep = step;
      }
      else
      {

        //prevStep.setNextWalker(step);
        step.setRelativePathPattern(prevStep);
      }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="javax/xml/datatype/DatatypeFactory.java" startline="897" startcolumn="13" endline="906" endcolumn="14">
return newXMLGregorianCalendar(
                    realYear,
                    month,
                    day,
                    hour,
                    minute,
                    second,
                    realMillisecond,
                    timezone
            );
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DatatypeFactoryImpl.java" startline="641" startcolumn="17" endline="650" endcolumn="18">
return new XMLGregorianCalendarImpl(
                        year,
                        month,
                        day,
                        hour,
                        minute,
                        second,
                        fractionalSecond,
                        timezone
                );
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DatatypeFactoryImpl.java" startline="641" startcolumn="17" endline="650" endcolumn="18">
return new XMLGregorianCalendarImpl(
                        year,
                        month,
                        day,
                        hour,
                        minute,
                        second,
                        fractionalSecond,
                        timezone
                );
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/XMLGregorianCalendarImpl.java" startline="735" startcolumn="9" endline="744" endcolumn="10">
return new XMLGregorianCalendarImpl(
            year,
            month,
            day,
            hour,
            minute,
            second,
            DatatypeConstants.FIELD_UNDEFINED,  //millisecond
                DatatypeConstants.FIELD_UNDEFINED //timezone
        );
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerBase.java" startline="1072" startcolumn="9" endline="1082" endcolumn="9">
if (m_writer != null)
        {
            try
            {
                m_writer.flush();
            }
            catch(IOException ioe)
            {

            }
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/NamespaceMappings.java" startline="268" startcolumn="13" endline="278" endcolumn="13">
if (saxHandler != null)
            {
                try
                {
                    saxHandler.endPrefixMapping(prefix);
                }
                catch (SAXException e)
                {
                    // not much we can do if they aren't willing to listen
                }
            }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSAnnotationImpl.java" startline="136" startcolumn="9" endline="146" endcolumn="9">
try {
            parser.parse(aSource);
        }
        catch (SAXException e) {
            // this should never happen!
            // REVISIT:  what to do with this?; should really not
            // eat it...
        }
        catch (IOException i) {
            // ditto with above
        }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Filter.java" startline="156" startcolumn="5" endline="169" endcolumn="5">
try
    {
      eventsource.
        setProperty("http://xml.org/sax/properties/lexical-handler",
                    this);
    }
    catch(SAXNotRecognizedException e)
    {
      // Nothing we can do about it
    }
    catch(SAXNotSupportedException e)
    {
      // Nothing we can do about it
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSAnnotationImpl.java" startline="159" startcolumn="9" endline="169" endcolumn="9">
try {
            parser.parse(aSource);
        }
        catch (SAXException e) {
            // this should never happen!
            // REVISIT:  what to do with this?; should really not
            // eat it...
        }
        catch (IOException i) {
            // ditto with above
        }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Filter.java" startline="156" startcolumn="5" endline="169" endcolumn="5">
try
    {
      eventsource.
        setProperty("http://xml.org/sax/properties/lexical-handler",
                    this);
    }
    catch(SAXNotRecognizedException e)
    {
      // Nothing we can do about it
    }
    catch(SAXNotSupportedException e)
    {
      // Nothing we can do about it
    }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="250" startcolumn="9" endline="260" endcolumn="10">
final String[] recognizedFeatures = {
            XERCES_VALIDATION,
            XERCES_NAMESPACES,
            SCHEMA,
            SCHEMA_FULL_CHECKING,
            DYNAMIC_VALIDATION,
            NORMALIZE_DATA,
            SEND_PSVI,
            NAMESPACE_GROWTH,
            TOLERATE_DUPLICATES
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/StandardParserConfiguration.java" startline="200" startcolumn="9" endline="215" endcolumn="10">
final String[] recognizedFeatures = {
            NORMALIZE_DATA,
            SCHEMA_ELEMENT_DEFAULT,
            SCHEMA_AUGMENT_PSVI,
            GENERATE_SYNTHETIC_ANNOTATIONS,
            VALIDATE_ANNOTATIONS,
            HONOUR_ALL_SCHEMALOCATIONS,
            NAMESPACE_GROWTH,
            TOLERATE_DUPLICATES,
            // NOTE: These shouldn't really be here but since the XML Schema
            //       validator is constructed dynamically, its recognized
            //       features might not have been set and it would cause a
            //       not-recognized exception to be thrown. -Ac
            XMLSCHEMA_VALIDATION,
            XMLSCHEMA_FULL_CHECKING,
        };
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="250" startcolumn="9" endline="260" endcolumn="10">
final String[] recognizedFeatures = {
            XERCES_VALIDATION,
            XERCES_NAMESPACES,
            SCHEMA,
            SCHEMA_FULL_CHECKING,
            DYNAMIC_VALIDATION,
            NORMALIZE_DATA,
            SEND_PSVI,
            NAMESPACE_GROWTH,
            TOLERATE_DUPLICATES
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="321" startcolumn="9" endline="333" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            GENERATE_SYNTHETIC_ANNOTATIONS,
            LOCALE
        };
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/serializer/TreeWalker.java" startline="427" startcolumn="7" endline="436" endcolumn="7">
if (m_contentHandler instanceof LexicalHandler)
      {
        ((LexicalHandler) this.m_contentHandler).startEntity(
          eref.getNodeName());
      }
      else
      {

        // warning("Can not output entity to a pure SAX ContentHandler");
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMTreeWalker.java" startline="341" startcolumn="7" endline="350" endcolumn="7">
if (m_contentHandler instanceof LexicalHandler)
      {
        ((LexicalHandler) this.m_contentHandler).startEntity(
          m_dtm.getNodeName(node));
      }
      else
      {

        // warning("Can not output entity to a pure SAX ContentHandler");
      }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/TreeWalker.java" startline="432" startcolumn="7" endline="441" endcolumn="7">
if (m_contentHandler instanceof LexicalHandler)
      {
        ((LexicalHandler) this.m_contentHandler).startEntity(
          eref.getNodeName());
      }
      else
      {

        // warning("Can not output entity to a pure SAX ContentHandler");
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMTreeWalker.java" startline="341" startcolumn="7" endline="350" endcolumn="7">
if (m_contentHandler instanceof LexicalHandler)
      {
        ((LexicalHandler) this.m_contentHandler).startEntity(
          m_dtm.getNodeName(node));
      }
      else
      {

        // warning("Can not output entity to a pure SAX ContentHandler");
      }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/StandardParserConfiguration.java" startline="200" startcolumn="9" endline="215" endcolumn="10">
final String[] recognizedFeatures = {
            NORMALIZE_DATA,
            SCHEMA_ELEMENT_DEFAULT,
            SCHEMA_AUGMENT_PSVI,
            GENERATE_SYNTHETIC_ANNOTATIONS,
            VALIDATE_ANNOTATIONS,
            HONOUR_ALL_SCHEMALOCATIONS,
            NAMESPACE_GROWTH,
            TOLERATE_DUPLICATES,
            // NOTE: These shouldn't really be here but since the XML Schema
            //       validator is constructed dynamically, its recognized
            //       features might not have been set and it would cause a
            //       not-recognized exception to be thrown. -Ac
            XMLSCHEMA_VALIDATION,
            XMLSCHEMA_FULL_CHECKING,
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="321" startcolumn="9" endline="333" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            GENERATE_SYNTHETIC_ANNOTATIONS,
            LOCALE
        };
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/StandardParserConfiguration.java" startline="200" startcolumn="9" endline="215" endcolumn="10">
final String[] recognizedFeatures = {
            NORMALIZE_DATA,
            SCHEMA_ELEMENT_DEFAULT,
            SCHEMA_AUGMENT_PSVI,
            GENERATE_SYNTHETIC_ANNOTATIONS,
            VALIDATE_ANNOTATIONS,
            HONOUR_ALL_SCHEMALOCATIONS,
            NAMESPACE_GROWTH,
            TOLERATE_DUPLICATES,
            // NOTE: These shouldn't really be here but since the XML Schema
            //       validator is constructed dynamically, its recognized
            //       features might not have been set and it would cause a
            //       not-recognized exception to be thrown. -Ac
            XMLSCHEMA_VALIDATION,
            XMLSCHEMA_FULL_CHECKING,
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/NonValidatingConfiguration.java" startline="311" startcolumn="9" endline="324" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            LOCALE,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaParsingConfig.java" startline="321" startcolumn="9" endline="333" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            GENERATE_SYNTHETIC_ANNOTATIONS,
            LOCALE
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/NonValidatingConfiguration.java" startline="311" startcolumn="9" endline="324" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            LOCALE,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
    </clone>
    <clone nlines="14" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/NonValidatingConfiguration.java" startline="311" startcolumn="9" endline="324" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            LOCALE,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="356" startcolumn="9" endline="370" endcolumn="35">
final String[] recognizedProperties =
            {
                XML_STRING,
                SYMBOL_TABLE,
                                ERROR_HANDLER,
                                ENTITY_RESOLVER,
                ERROR_REPORTER,
                ENTITY_MANAGER,
                DOCUMENT_SCANNER,
                DTD_SCANNER,
                DTD_VALIDATOR,
                                DATATYPE_VALIDATOR_FACTORY,
                                VALIDATION_MANAGER,
                                XML_STRING,
                XMLGRAMMAR_POOL, };
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/NonValidatingConfiguration.java" startline="311" startcolumn="9" endline="324" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            LOCALE,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="274" startcolumn="9" endline="289" endcolumn="10">
final String[] recognizedProperties = {
            XML_STRING,
            SYMBOL_TABLE,
            ERROR_HANDLER,
            ENTITY_RESOLVER,
            ERROR_REPORTER,
            ENTITY_MANAGER,
            VALIDATION_MANAGER,
            GRAMMAR_POOL,
            JAXP_SCHEMA_SOURCE,
            JAXP_SCHEMA_LANGUAGE,
            DTD_VALIDATOR_FACTORY_PROPERTY,
            SCHEMA_DV_FACTORY,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="246" startcolumn="5" endline="255" endcolumn="18">
if ((m_next) &lt; this.size())
    {
      Node next = this.elementAt(m_next);

      m_next++;

      return next;
    }
    else
      return null;
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSetDTM.java" startline="390" startcolumn="5" endline="399" endcolumn="22">
if ((m_next) &lt; this.size())
    {
      int next = this.elementAt(m_next);

      m_next++;

      return next;
    }
    else
      return DTM.NULL;
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Xerces.java" startline="205" startcolumn="17" endline="216" endcolumn="17">
try
                {
                        return new IncrementalSAXSource_Xerces(parser);
                }
                catch(NoSuchMethodException e)
                {
                        // Xerces version mismatch; neither Xerces1 nor Xerces2 succeeded.
                        // Fall back on filtering solution.
                        IncrementalSAXSource_Filter iss=new IncrementalSAXSource_Filter();
                        iss.setXMLReader(parser);
                        return iss;
                }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/IncrementalSAXSource_Xerces.java" startline="189" startcolumn="17" endline="200" endcolumn="17">
try
                {
                        return new IncrementalSAXSource_Xerces();
                }
                catch(NoSuchMethodException e)
                {
                        // Xerces version mismatch; neither Xerces1 nor Xerces2 succeeded.
                        // Fall back on filtering solution.
                        IncrementalSAXSource_Filter iss=new IncrementalSAXSource_Filter();
                        iss.setXMLReader(new SAXParser());
                        return iss;
                }
</source>
    </clone>
    <clone nlines="15" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="356" startcolumn="9" endline="370" endcolumn="35">
final String[] recognizedProperties =
            {
                XML_STRING,
                SYMBOL_TABLE,
                                ERROR_HANDLER,
                                ENTITY_RESOLVER,
                ERROR_REPORTER,
                ENTITY_MANAGER,
                DOCUMENT_SCANNER,
                DTD_SCANNER,
                DTD_VALIDATOR,
                                DATATYPE_VALIDATOR_FACTORY,
                                VALIDATION_MANAGER,
                                XML_STRING,
                XMLGRAMMAR_POOL, };
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="274" startcolumn="9" endline="289" endcolumn="10">
final String[] recognizedProperties = {
            XML_STRING,
            SYMBOL_TABLE,
            ERROR_HANDLER,
            ENTITY_RESOLVER,
            ERROR_REPORTER,
            ENTITY_MANAGER,
            VALIDATION_MANAGER,
            GRAMMAR_POOL,
            JAXP_SCHEMA_SOURCE,
            JAXP_SCHEMA_LANGUAGE,
            DTD_VALIDATOR_FACTORY_PROPERTY,
            SCHEMA_DV_FACTORY,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="356" startcolumn="9" endline="370" endcolumn="35">
final String[] recognizedProperties =
            {
                XML_STRING,
                SYMBOL_TABLE,
                                ERROR_HANDLER,
                                ENTITY_RESOLVER,
                ERROR_REPORTER,
                ENTITY_MANAGER,
                DOCUMENT_SCANNER,
                DTD_SCANNER,
                DTD_VALIDATOR,
                                DATATYPE_VALIDATOR_FACTORY,
                                VALIDATION_MANAGER,
                                XML_STRING,
                XMLGRAMMAR_POOL, };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/DTDConfiguration.java" startline="326" startcolumn="9" endline="342" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_PROCESSOR,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            JAXP_SCHEMA_SOURCE,
            JAXP_SCHEMA_LANGUAGE,
            LOCALE,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="356" startcolumn="9" endline="370" endcolumn="35">
final String[] recognizedProperties =
            {
                XML_STRING,
                SYMBOL_TABLE,
                                ERROR_HANDLER,
                                ENTITY_RESOLVER,
                ERROR_REPORTER,
                ENTITY_MANAGER,
                DOCUMENT_SCANNER,
                DTD_SCANNER,
                DTD_VALIDATOR,
                                DATATYPE_VALIDATOR_FACTORY,
                                VALIDATION_MANAGER,
                                XML_STRING,
                XMLGRAMMAR_POOL, };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="417" startcolumn="9" endline="433" endcolumn="38">
final String[] recognizedProperties =
            {
                                SYMBOL_TABLE,
                                ERROR_HANDLER,
                                ENTITY_RESOLVER,
                ERROR_REPORTER,
                ENTITY_MANAGER,
                DOCUMENT_SCANNER,
                DTD_SCANNER,
                DTD_PROCESSOR,
                DTD_VALIDATOR,
                                DATATYPE_VALIDATOR_FACTORY,
                                VALIDATION_MANAGER,
                                XML_STRING,
                XMLGRAMMAR_POOL,
                JAXP_SCHEMA_SOURCE,
                JAXP_SCHEMA_LANGUAGE};
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="307" startcolumn="7" endline="316" endcolumn="7">
while (n-- != 0)
      {
        if (fsb.charAt(i) != obj2.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XString.java" startline="563" startcolumn="5" endline="572" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (this.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="352" startcolumn="7" endline="361" endcolumn="7">
while (n-- != 0)
      {
        if (fsb.charAt(i) != str.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XString.java" startline="563" startcolumn="5" endline="572" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (this.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="389" startcolumn="7" endline="398" endcolumn="7">
while (n-- != 0)
      {
        if (fsb.charAt(i) != anotherString.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XString.java" startline="563" startcolumn="5" endline="572" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (this.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="307" startcolumn="7" endline="316" endcolumn="7">
while (n-- != 0)
      {
        if (fsb.charAt(i) != obj2.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="625" startcolumn="5" endline="634" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (fsb.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="352" startcolumn="7" endline="361" endcolumn="7">
while (n-- != 0)
      {
        if (fsb.charAt(i) != str.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="625" startcolumn="5" endline="634" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (fsb.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="389" startcolumn="7" endline="398" endcolumn="7">
while (n-- != 0)
      {
        if (fsb.charAt(i) != anotherString.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="625" startcolumn="5" endline="634" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (fsb.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XString.java" startline="563" startcolumn="5" endline="572" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (this.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="625" startcolumn="5" endline="634" endcolumn="5">
while (--pc &gt;= 0)
    {
      if (fsb.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="433" startcolumn="9" endline="443" endcolumn="9">
try {
            fSendUEAndNotationEvents =
                componentManager.getFeature(ALLOW_UE_AND_NOTATION_EVENTS);
            if (fChildConfig != null) {
                fChildConfig.setFeature(
                    ALLOW_UE_AND_NOTATION_EVENTS,
                    fSendUEAndNotationEvents);
            }
        }
        catch (XMLConfigurationException e) {
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="445" startcolumn="9" endline="456" endcolumn="9">
try {
            fFixupBaseURIs =
                componentManager.getFeature(XINCLUDE_FIXUP_BASE_URIS);
            if (fChildConfig != null) {
                fChildConfig.setFeature(
                    XINCLUDE_FIXUP_BASE_URIS,
                    fFixupBaseURIs);
            }
        }
        catch (XMLConfigurationException e) {
            fFixupBaseURIs = true;
        }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="433" startcolumn="9" endline="443" endcolumn="9">
try {
            fSendUEAndNotationEvents =
                componentManager.getFeature(ALLOW_UE_AND_NOTATION_EVENTS);
            if (fChildConfig != null) {
                fChildConfig.setFeature(
                    ALLOW_UE_AND_NOTATION_EVENTS,
                    fSendUEAndNotationEvents);
            }
        }
        catch (XMLConfigurationException e) {
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="458" startcolumn="9" endline="469" endcolumn="9">
try {
            fFixupLanguage =
                componentManager.getFeature(XINCLUDE_FIXUP_LANGUAGE);
            if (fChildConfig != null) {
                fChildConfig.setFeature(
                    XINCLUDE_FIXUP_LANGUAGE,
                    fFixupLanguage);
            }
        }
        catch (XMLConfigurationException e) {
            fFixupLanguage = true;
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xpath/internal/objects/XNodeSet.java" startline="389" startcolumn="5" endline="399" endcolumn="5">
try
    {
        if(hasCache())
                return cloneWithReset();
        else
                return this; // don't bother to clone... won't do any good!
    }
    catch (CloneNotSupportedException cnse)
    {
      throw new RuntimeException(cnse.getMessage());
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XNodeSet.java" startline="409" startcolumn="5" endline="419" endcolumn="5">
try
    {
        if(hasCache())
                return (XObject)cloneWithReset();
        else
                return this; // don't bother to clone... won't do any good!
    }
    catch (CloneNotSupportedException cnse)
    {
      throw new RuntimeException(cnse.getMessage());
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="274" startcolumn="9" endline="289" endcolumn="10">
final String[] recognizedProperties = {
            XML_STRING,
            SYMBOL_TABLE,
            ERROR_HANDLER,
            ENTITY_RESOLVER,
            ERROR_REPORTER,
            ENTITY_MANAGER,
            VALIDATION_MANAGER,
            GRAMMAR_POOL,
            JAXP_SCHEMA_SOURCE,
            JAXP_SCHEMA_LANGUAGE,
            DTD_VALIDATOR_FACTORY_PROPERTY,
            SCHEMA_DV_FACTORY,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/DTDConfiguration.java" startline="326" startcolumn="9" endline="342" endcolumn="10">
final String[] recognizedProperties = {
            ERROR_REPORTER,
            ENTITY_MANAGER,
            DOCUMENT_SCANNER,
            DTD_SCANNER,
            DTD_PROCESSOR,
            DTD_VALIDATOR,
            NAMESPACE_BINDER,
            XMLGRAMMAR_POOL,
            DATATYPE_VALIDATOR_FACTORY,
            VALIDATION_MANAGER,
            JAXP_SCHEMA_SOURCE,
            JAXP_SCHEMA_LANGUAGE,
            LOCALE,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="274" startcolumn="9" endline="289" endcolumn="10">
final String[] recognizedProperties = {
            XML_STRING,
            SYMBOL_TABLE,
            ERROR_HANDLER,
            ENTITY_RESOLVER,
            ERROR_REPORTER,
            ENTITY_MANAGER,
            VALIDATION_MANAGER,
            GRAMMAR_POOL,
            JAXP_SCHEMA_SOURCE,
            JAXP_SCHEMA_LANGUAGE,
            DTD_VALIDATOR_FACTORY_PROPERTY,
            SCHEMA_DV_FACTORY,
            SECURITY_MANAGER,
            XML_SECURITY_PROPERTY_MANAGER
        };
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="417" startcolumn="9" endline="433" endcolumn="38">
final String[] recognizedProperties =
            {
                                SYMBOL_TABLE,
                                ERROR_HANDLER,
                                ENTITY_RESOLVER,
                ERROR_REPORTER,
                ENTITY_MANAGER,
                DOCUMENT_SCANNER,
                DTD_SCANNER,
                DTD_PROCESSOR,
                DTD_VALIDATOR,
                                DATATYPE_VALIDATOR_FACTORY,
                                VALIDATION_MANAGER,
                                XML_STRING,
                XMLGRAMMAR_POOL,
                JAXP_SCHEMA_SOURCE,
                JAXP_SCHEMA_LANGUAGE};
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java" startline="2163" startcolumn="9" endline="2174" endcolumn="9">
if (systemURI.isAbsoluteURI()) {
            if (systemURI.getScheme().length() &gt; 1) {
                return systemId;
            }
            /**
             * If the scheme's length is only one character,
             * it's likely that this was intended as a file
             * path. Fixing this up in expandSystemId to
             * maintain backwards compatibility.
             */
            throw new URI.MalformedURIException();
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java" startline="2204" startcolumn="9" endline="2215" endcolumn="9">
if (systemURI.isAbsolute()) {
            if (systemURI.getScheme().length() &gt; 1) {
                return systemId;
            }
            /**
             * If the scheme's length is only one character,
             * it's likely that this was intended as a file
             * path. Fixing this up in expandSystemId to
             * maintain backwards compatibility.
             */
            throw new URISyntaxException(systemId, "the scheme's length is only one character");
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/bcel/internal/generic/InstructionHandle.java" startline="131" startcolumn="5" endline="140" endcolumn="5">
if(ih_list == null)
      return new InstructionHandle(i);
    else {
      InstructionHandle ih = ih_list;
      ih_list = ih.next;

      ih.setInstruction(i);

      return ih;
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/generic/BranchHandle.java" startline="85" startcolumn="5" endline="94" endcolumn="5">
if(bh_list == null)
      return new BranchHandle(i);
    else {
      BranchHandle bh = bh_list;
      bh_list = (BranchHandle)bh.next;

      bh.setInstruction(i);

      return bh;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="420" startcolumn="7" endline="430" endcolumn="7">
while (index &lt; uriSpecLen)
      {
        testChar = uriSpec.charAt(index);

        if (testChar == '/' || testChar == '?' || testChar == '#')
        {
          break;
        }

        index++;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="591" startcolumn="5" endline="602" endcolumn="5">
while (index &lt; uriSpecLen)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == ':' || testChar == '/' || testChar == '?'
              || testChar == '#')
      {
        break;
      }

      index++;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="420" startcolumn="7" endline="430" endcolumn="7">
while (index &lt; uriSpecLen)
      {
        testChar = uriSpec.charAt(index);

        if (testChar == '/' || testChar == '?' || testChar == '#')
        {
          break;
        }

        index++;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="612" startcolumn="5" endline="623" endcolumn="5">
while (index &lt; uriSpecLen)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == ':' || testChar == '/' || testChar == '?'
              || testChar == '#')
      {
        break;
      }

      index++;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="441" startcolumn="7" endline="451" endcolumn="7">
while (index &lt; uriSpecLen)
      {
        testChar = uriSpec.charAt(index);

        if (testChar == '/' || testChar == '?' || testChar == '#')
        {
          break;
        }

        index++;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="591" startcolumn="5" endline="602" endcolumn="5">
while (index &lt; uriSpecLen)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == ':' || testChar == '/' || testChar == '?'
              || testChar == '#')
      {
        break;
      }

      index++;
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="441" startcolumn="7" endline="451" endcolumn="7">
while (index &lt; uriSpecLen)
      {
        testChar = uriSpec.charAt(index);

        if (testChar == '/' || testChar == '?' || testChar == '#')
        {
          break;
        }

        index++;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="612" startcolumn="5" endline="623" endcolumn="5">
while (index &lt; uriSpecLen)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == ':' || testChar == '/' || testChar == '?'
              || testChar == '#')
      {
        break;
      }

      index++;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2532" startcolumn="7" endline="2547" endcolumn="7">
while (true)
      {
        identity++;

        // Assume this can not be null.
        type = _type2(identity);

        if (type == DTM.ATTRIBUTE_NODE)
        {
          return identity;
        }
        else if (DTM.NAMESPACE_NODE != type)
        {
          break;
        }
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2567" startcolumn="5" endline="2576" endcolumn="5">
while (true) {
      identity++;
      int type = _type2(identity);

      if (type == DTM.ATTRIBUTE_NODE) {
        return identity;
      } else if (type != DTM.NAMESPACE_NODE) {
        break;
      }
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2532" startcolumn="7" endline="2547" endcolumn="7">
while (true)
      {
        identity++;

        // Assume this can not be null.
        type = _type2(identity);

        if (type == DTM.ATTRIBUTE_NODE)
        {
          return identity;
        }
        else if (DTM.NAMESPACE_NODE != type)
        {
          break;
        }
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2495" startcolumn="7" endline="2509" endcolumn="7">
while (true)
      {
        nodeID++;
        // Assume this can not be null.
        type = _type2(nodeID);

        if (type == DTM.ATTRIBUTE_NODE)
        {
          return makeNodeHandle(nodeID);
        }
        else if (DTM.NAMESPACE_NODE != type)
        {
          break;
        }
      }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/java_cup/internal/runtime/lr_parser.java" startline="455" startcolumn="9" endline="464" endcolumn="11">
for (probe = 0; probe &lt; row.length; probe++)
          {
            /* is this entry labeled with our Symbol or the default? */
            tag = row[probe++];
            if (tag == sym || tag == -1)
              {
                /* return the next entry */
                return row[probe];
              }
          }
</source>
        <source file="com/sun/java_cup/internal/runtime/lr_parser.java" startline="511" startcolumn="7" endline="520" endcolumn="9">
for (int probe = 0; probe &lt; row.length; probe++)
        {
          /* is this entry labeled with our Symbol or the default? */
          tag = row[probe++];
          if (tag == sym || tag == -1)
            {
              /* return the next entry */
              return row[probe];
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1003" startcolumn="9" endline="1012" endcolumn="9">
if (fCurrentEntity.position != fCurrentEntity.count) {
            c = fCurrentEntity.ch[fCurrentEntity.position];
            // REVISIT: Does this need to be updated to fix the
            //          #x0D ^#x0A newline normalization problem? -Ac
            if (c == '\r' &amp;&amp; isExternal) {
                c = '\n';
            }
        } else {
            c = -1;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1084" startcolumn="9" endline="1095" endcolumn="9">
if (fCurrentEntity.position != fCurrentEntity.count) {
            c = fCurrentEntity.ch[fCurrentEntity.position];
            // NOTE: We don't want to accidentally signal the
            //       end of the literal if we're expanding an
            //       entity appearing in the literal. -Ac
            if (c == quote &amp;&amp; fCurrentEntity.literal) {
                c = -1;
            }
        }
        else {
            c = -1;
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1003" startcolumn="9" endline="1012" endcolumn="9">
if (fCurrentEntity.position != fCurrentEntity.count) {
            c = fCurrentEntity.ch[fCurrentEntity.position];
            // REVISIT: Does this need to be updated to fix the
            //          #x0D ^#x0A newline normalization problem? -Ac
            if (c == '\r' &amp;&amp; isExternal) {
                c = '\n';
            }
        } else {
            c = -1;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1164" startcolumn="9" endline="1174" endcolumn="9">
if (fCurrentEntity.position != fCurrentEntity.count) {
            c = fCurrentEntity.ch[fCurrentEntity.position];
            // NOTE: We don't want to accidentally signal the
            //       end of the literal if we're expanding an
            //       entity appearing in the literal. -Ac
            if (c == quote &amp;&amp; fCurrentEntity.literal) {
                c = -1;
            }
        } else {
            c = -1;
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XPointerElementHandler.java" startline="542" startcolumn="17" endline="554" endcolumn="17">
if(hasMoreToken()){
                    fCurrentTokenType = 0;
                    fCurrentTokenString = null;
                    return true;
                }
                else{
                    foundElement = element;
                    includeElement = true;
                    fCurrentTokenType = 0;
                    fCurrentTokenString = null;
                    fSubResourceIdentified = true;
                    return true;
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XPointerElementHandler.java" startline="564" startcolumn="17" endline="576" endcolumn="17">
if(hasMoreToken()){
                    fElementCount=0;
                    fCurrentTokenType = 0;
                    return true;
                }
                else{
                    foundElement = element;
                    includeElement = true;
                    fCurrentTokenType = 0;
                    fElementCount=0;
                    fSubResourceIdentified =true;
                    return true;
                }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2627" startcolumn="21" endline="2641" endcolumn="21">
switch (code) {
                        case LSParserFilter.FILTER_INTERRUPT:{
                            throw Abort.INSTANCE;
                        }
                        case LSParserFilter.FILTER_REJECT:{
                            // fall through to SKIP since Comment has no children.
                        }
                        case LSParserFilter.FILTER_SKIP: {
                            fCurrentNode.removeChild (child);
                            return;
                        }
                        default: {
                            // accept node -- do nothing
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="626" startcolumn="17" endline="648" endcolumn="17">
switch (code) {
                    case LSParserFilter.FILTER_INTERRUPT:{
                        throw Abort.INSTANCE;
                    }
                    case LSParserFilter.FILTER_REJECT:{
                        // REVISIT: the constant FILTER_REJECT should be changed when new
                        // DOM LS specs gets published

                        // fall through to SKIP since comment has no children.
                    }
                    case LSParserFilter.FILTER_SKIP: {
                        // REVISIT: the constant FILTER_SKIP should be changed when new
                        // DOM LS specs gets published
                        fCurrentNode.removeChild (comment);
                        // make sure we don't loose chars if next event is characters()
                        fFirstChunk = true;
                        return;
                    }

                    default: {
                        // accept node
                    }
                }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2627" startcolumn="21" endline="2641" endcolumn="21">
switch (code) {
                        case LSParserFilter.FILTER_INTERRUPT:{
                            throw Abort.INSTANCE;
                        }
                        case LSParserFilter.FILTER_REJECT:{
                            // fall through to SKIP since Comment has no children.
                        }
                        case LSParserFilter.FILTER_SKIP: {
                            fCurrentNode.removeChild (child);
                            return;
                        }
                        default: {
                            // accept node -- do nothing
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="708" startcolumn="17" endline="725" endcolumn="17">
switch (code) {
                    case LSParserFilter.FILTER_INTERRUPT:{
                        throw Abort.INSTANCE;
                    }
                    case LSParserFilter.FILTER_REJECT:{
                        // fall through to SKIP since PI has no children.
                    }
                    case LSParserFilter.FILTER_SKIP: {
                        fCurrentNode.removeChild (pi);
                        // fFirstChunk must be set to true so that data
                        // won't be lost in the case where the child before PI is
                        // a text node and the next event is characters.
                        fFirstChunk = true;
                        return;
                    }
                    default: {
                    }
                }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="214" startcolumn="13" endline="229" endcolumn="13">
if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return true;
                }
                else {
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                 return true;
                 */
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="101" startcolumn="13" endline="117" endcolumn="13">
if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return entry.symbol;
                }
                else{
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                symbolAsArray = entry.characters;
                return entry.symbol;
                 */
            }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="77" startcolumn="5" endline="86" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="131" startcolumn="5" endline="140" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="208" startcolumn="5" endline="217" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="372" startcolumn="10" endline="381" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="77" startcolumn="5" endline="86" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="131" startcolumn="5" endline="140" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="208" startcolumn="5" endline="217" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if ((m_firstFree + 2) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="98" startcolumn="5" endline="107" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      StringToStringTable newMap[] = new StringToStringTable[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="99" startcolumn="5" endline="108" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="179" startcolumn="5" endline="188" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="256" startcolumn="7" endline="265" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1114" startcolumn="10" endline="1123" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntStack.java" startline="77" startcolumn="5" endline="86" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="131" startcolumn="5" endline="140" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="208" startcolumn="5" endline="217" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="372" startcolumn="10" endline="381" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectStack.java" startline="77" startcolumn="5" endline="86" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="131" startcolumn="5" endline="140" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="208" startcolumn="5" endline="217" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTable.java" startline="91" startcolumn="5" endline="100" endcolumn="5">
if ((m_firstFree + 2) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringToStringTableVector.java" startline="98" startcolumn="5" endline="107" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      StringToStringTable newMap[] = new StringToStringTable[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="99" startcolumn="5" endline="108" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/StringVector.java" startline="179" startcolumn="5" endline="188" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      String newMap[] = new String[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1017" startcolumn="7" endline="1026" endcolumn="7">
if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1114" startcolumn="10" endline="1123" endcolumn="5">
if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xpath/internal/axes/BasicTestIterator.java" startline="170" startcolumn="7" endline="184" endcolumn="31">
do
      {
        next = getNextNode();

        if (DTM.NULL != next)
        {
          if(DTMIterator.FILTER_ACCEPT == acceptNode(next))
            break;
          else
            continue;
        }
        else
          break;
      }
      while (next != DTM.NULL);
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/MatchPatternIterator.java" startline="235" startcolumn="7" endline="249" endcolumn="31">
do
      {
        next = getNextNode();

        if (DTM.NULL != next)
        {
          if(DTMIterator.FILTER_ACCEPT == acceptNode(next, m_execContext))
            break;
          else
            continue;
        }
        else
          break;
      }
      while (next != DTM.NULL);
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaDOMParser.java" startline="339" startcolumn="9" endline="348" endcolumn="9">
if (fAnnotationDepth == -1) {
            // this is messed up, but a case to consider:
            if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA &amp;&amp;
                    element.localpart == SchemaSymbols.ELT_ANNOTATION) {
                schemaDOM.endAnnotation(element, newElem);
            }
        }
        else {
            schemaDOM.endAnnotationElement(element);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/opti/SchemaDOMParser.java" startline="323" startcolumn="9" endline="332" endcolumn="9">
if (fAnnotationDepth == -1) {
            // this is messed up, but a case to consider:
            if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA &amp;&amp;
                    element.localpart == SchemaSymbols.ELT_ANNOTATION) {
                schemaDOM.startAnnotation(element, attributes, fNamespaceContext);
            }
        }
        else {
            schemaDOM.startAnnotationElement(element, attributes);
        }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="com/sun/org/apache/xpath/internal/objects/XString.java" startline="437" startcolumn="5" endline="449" endcolumn="5">
while (n-- != 0)
    {
      char c1 = this.charAt(i);
      char c2 = xstr.charAt(j);

      if (c1 != c2)
      {
        return c1 - c2;
      }

      i++;
      j++;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/objects/XStringForFSB.java" startline="484" startcolumn="5" endline="496" endcolumn="5">
while (n-- != 0)
    {
      char c1 = fsb.charAt(i);
      char c2 = xstr.charAt(j);

      if (c1 != c2)
      {
        return c1 - c2;
      }

      i++;
      j++;
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xpath/internal/axes/WalkerFactory.java" startline="482" startcolumn="5" endline="492" endcolumn="5">
switch (stepType)
    {
    case OpCodes.OP_VARIABLE :
    case OpCodes.OP_EXTFUNCTION :
    case OpCodes.OP_FUNCTION :
    case OpCodes.OP_GROUP :
      argLen = compiler.getArgLength(opPos);
      break;
    default :
      argLen = compiler.getArgLengthOfStep(opPos);
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/WalkerFactory.java" startline="1004" startcolumn="7" endline="1014" endcolumn="7">
switch (stepType)
      {
      case OpCodes.OP_VARIABLE :
      case OpCodes.OP_EXTFUNCTION :
      case OpCodes.OP_FUNCTION :
      case OpCodes.OP_GROUP :
        expr = compiler.compile(opPos);
        break;
      default :
        expr = compiler.compile(opPos + 2);
      }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xpath/internal/axes/WalkerFactory.java" startline="1135" startcolumn="5" endline="1145" endcolumn="5">
switch (stepType)
    {
    case OpCodes.OP_VARIABLE :
    case OpCodes.OP_EXTFUNCTION :
    case OpCodes.OP_FUNCTION :
    case OpCodes.OP_GROUP :
      argLen = compiler.getArgLength(opPos);
      break;
    default :
      argLen = compiler.getArgLengthOfStep(opPos);
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/WalkerFactory.java" startline="1004" startcolumn="7" endline="1014" endcolumn="7">
switch (stepType)
      {
      case OpCodes.OP_VARIABLE :
      case OpCodes.OP_EXTFUNCTION :
      case OpCodes.OP_FUNCTION :
      case OpCodes.OP_GROUP :
        expr = compiler.compile(opPos);
        break;
      default :
        expr = compiler.compile(opPos + 2);
      }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="56" startcolumn="9" endline="65" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="61" startcolumn="9" endline="70" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="57" startcolumn="9" endline="66" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="44" startcolumn="9" endline="53" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="45" startcolumn="9" endline="54" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="56" startcolumn="9" endline="65" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="61" startcolumn="9" endline="70" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="57" startcolumn="9" endline="66" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="44" startcolumn="9" endline="53" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="74" startcolumn="9" endline="83" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="45" startcolumn="9" endline="54" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="56" startcolumn="9" endline="65" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="61" startcolumn="9" endline="70" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="57" startcolumn="9" endline="66" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="44" startcolumn="9" endline="53" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="45" startcolumn="9" endline="54" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="56" startcolumn="9" endline="65" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="61" startcolumn="9" endline="70" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="57" startcolumn="9" endline="66" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="44" startcolumn="9" endline="53" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="45" startcolumn="9" endline="54" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="56" startcolumn="9" endline="65" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="61" startcolumn="9" endline="70" endcolumn="11">
return (ClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) {
                }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="57" startcolumn="9" endline="66" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="51" startcolumn="9" endline="60" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="44" startcolumn="9" endline="53" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="64" startcolumn="9" endline="73" endcolumn="11">
return (ClassLoader)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = ClassLoader.getSystemClassLoader();
                } catch (SecurityException ex) {}
                return cl;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="45" startcolumn="9" endline="54" endcolumn="11">
return (ClassLoader)
                AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                ClassLoader cl = null;
                try {
                    cl = Thread.currentThread().getContextClassLoader();
                } catch (SecurityException ex) { }
                return cl;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParserImpl.java" startline="200" startcolumn="9" endline="211" endcolumn="10">
final String[] domRecognizedFeatures = {
            Constants.DOM_CANONICAL_FORM,
            Constants.DOM_CDATA_SECTIONS,
            Constants.DOM_CHARSET_OVERRIDES_XML_ENCODING,
            Constants.DOM_INFOSET,
            Constants.DOM_NAMESPACE_DECLARATIONS,
            Constants.DOM_SPLIT_CDATA,
            Constants.DOM_SUPPORTED_MEDIATYPES_ONLY,
            Constants.DOM_CERTIFIED,
            Constants.DOM_WELLFORMED,
            Constants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS,
        };
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/trax/TransformerFactoryImpl.java" startline="574" startcolumn="9" endline="586" endcolumn="10">
String[] features = {
            DOMSource.FEATURE,
            DOMResult.FEATURE,
            SAXSource.FEATURE,
            SAXResult.FEATURE,
            StAXSource.FEATURE,
            StAXResult.FEATURE,
            StreamSource.FEATURE,
            StreamResult.FEATURE,
            SAXTransformerFactory.FEATURE,
            SAXTransformerFactory.FEATURE_XMLFILTER,
            XalanConstants.ORACLE_FEATURE_SERVICE_MECHANISM
        };
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="801" startcolumn="9" endline="811" endcolumn="9">
if (fValidation) {
            if (fDTDElementDecls.contains(name)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_ELEMENT_ALREADY_DECLARED",
                                           new Object[]{ name},
                                           XMLErrorReporter.SEVERITY_ERROR);
            }
            else {
                fDTDElementDecls.add(name);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="1530" startcolumn="9" endline="1540" endcolumn="9">
if (fMixed &amp;&amp; fValidation) {
            if (fMixedElementTypes.contains(elementName)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "DuplicateTypeInMixedContent",
                                           new Object[]{fDTDElementDeclName, elementName},
                                           XMLErrorReporter.SEVERITY_ERROR);
            }
            else {
                fMixedElementTypes.add(elementName);
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/NodeImpl.java" startline="892" startcolumn="9" endline="902" endcolumn="9">
if (otherAncestorType == Node.ATTRIBUTE_NODE) {
            otherDepth=0;
            for (node=otherNode; node != null; node=node.getParentNode()) {
                otherDepth +=1;
                if (node == thisNode)
                  // The other node is a descendent of the reference
                  // node's element
                  return TREE_POSITION_FOLLOWING;
                otherAncestor = node;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeImpl.java" startline="877" startcolumn="9" endline="888" endcolumn="9">
if (thisAncestorType == Node.ATTRIBUTE_NODE) {
            thisDepth=0;
            for (node=thisNode; node != null; node=node.getParentNode()) {
                thisDepth +=1;
                if (node == otherNode)
                  // The other node is an ancestor of the owning element
                  {
                  return TREE_POSITION_PRECEDING;
                  }
                thisAncestor = node;
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="3137" startcolumn="7" endline="3146" endcolumn="7">
if (dataIndex &gt; 0)
      {
        return m_chars.getString(dataIndex &gt;&gt;&gt; TEXT_LENGTH_BITS,
                                  dataIndex &amp; TEXT_LENGTH_MAX);
      }
      else
      {
        return m_chars.getString(m_data.elementAt(-dataIndex),
                                  m_data.elementAt(-dataIndex+1));
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2948" startcolumn="7" endline="2957" endcolumn="7">
if (dataIndex &gt;= 0)
      {
        return m_chars.getString(dataIndex &gt;&gt;&gt; TEXT_LENGTH_BITS,
                                  dataIndex &amp; TEXT_LENGTH_MAX);
      }
      else
      {
        return m_chars.getString(m_data.elementAt(-dataIndex),
                                  m_data.elementAt(-dataIndex+1));
      }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="272" startcolumn="9" endline="281" endcolumn="9">
if (fBitCount &lt; 65)
        {
            fBits1 = srcSet.fBits1;
            fBits2 = srcSet.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] = srcSet.fByteArray[index];
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="147" startcolumn="9" endline="156" endcolumn="9">
if (fBitCount &lt; 65)
        {
            fBits1 &amp;= setToAnd.fBits1;
            fBits2 &amp;= setToAnd.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] &amp;= setToAnd.fByteArray[index];
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="272" startcolumn="9" endline="281" endcolumn="9">
if (fBitCount &lt; 65)
        {
            fBits1 = srcSet.fBits1;
            fBits2 = srcSet.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] = srcSet.fByteArray[index];
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="222" startcolumn="9" endline="231" endcolumn="9">
if (fBitCount &lt; 65)
        {
            fBits1 |= setToOr.fBits1;
            fBits2 |= setToOr.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] |= setToOr.fByteArray[index];
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="147" startcolumn="9" endline="156" endcolumn="9">
if (fBitCount &lt; 65)
        {
            fBits1 &amp;= setToAnd.fBits1;
            fBits2 &amp;= setToAnd.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] &amp;= setToAnd.fByteArray[index];
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/models/CMStateSet.java" startline="222" startcolumn="9" endline="231" endcolumn="9">
if (fBitCount &lt; 65)
        {
            fBits1 |= setToOr.fBits1;
            fBits2 |= setToOr.fBits2;
        }
         else
        {
            for (int index = fByteCount - 1; index &gt;= 0; index--)
                fByteArray[index] |= setToOr.fByteArray[index];
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="322" startcolumn="37" endline="333" endcolumn="37">
if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                                       "EntityNotDeclared",
                                                                       new Object[]{entityName},
                                                                       XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    }
                                    else {
                                        reportFatalError("EntityNotDeclared",
                                                         new Object[]{entityName});
                                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="938" startcolumn="37" endline="948" endcolumn="37">
if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(fEntityScanner,XMLMessageFormatter.XML_DOMAIN,
                                                    "EntityNotDeclared",
                                                    new Object[]{entityName},
                                                    XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    } else {
                                        reportFatalError("EntityNotDeclared",
                                                new Object[]{entityName});
                                    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/DefaultErrorHandler.java" startline="268" startcolumn="7" endline="277" endcolumn="7">
if(cause instanceof SAXParseException)
      {
        locator = new SAXSourceLocator((SAXParseException)cause);
      }
      else if (cause instanceof TransformerException)
      {
        SourceLocator causeLocator = ((TransformerException)cause).getLocator();
        if(null != causeLocator)
          locator = causeLocator;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ListingErrorHandler.java" startline="297" startcolumn="13" endline="313" endcolumn="13">
if(cause instanceof SAXParseException)
            {
                // A SAXSourceLocator is a Xalan helper class
                //  that implements both a SourceLocator and a SAX Locator
                //@todo check that the new locator actually has
                //  as much or more information as the
                //  current one already does
                locator = new SAXSourceLocator((SAXParseException)cause);
            }
            else if (cause instanceof TransformerException)
            {
                SourceLocator causeLocator = ((TransformerException)cause).getLocator();
                if(null != causeLocator)
                {
                    locator = causeLocator;
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/DefaultErrorHandler.java" startline="309" startcolumn="7" endline="318" endcolumn="7">
if(cause instanceof SAXParseException)
      {
        locator = new SAXSourceLocator((SAXParseException)cause);
      }
      else if (cause instanceof TransformerException)
      {
        SourceLocator causeLocator = ((TransformerException)cause).getLocator();
        if(null != causeLocator)
          locator = causeLocator;
      }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ListingErrorHandler.java" startline="297" startcolumn="13" endline="313" endcolumn="13">
if(cause instanceof SAXParseException)
            {
                // A SAXSourceLocator is a Xalan helper class
                //  that implements both a SourceLocator and a SAX Locator
                //@todo check that the new locator actually has
                //  as much or more information as the
                //  current one already does
                locator = new SAXSourceLocator((SAXParseException)cause);
            }
            else if (cause instanceof TransformerException)
            {
                SourceLocator causeLocator = ((TransformerException)cause).getLocator();
                if(null != causeLocator)
                {
                    locator = causeLocator;
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="1029" startcolumn="13" endline="1040" endcolumn="13">
if (fInternalNamespaceContext.containsPrefixInCurrentContext(prefix)){

                String tmp = fInternalNamespaceContext.getURI(prefix);

                if (tmp != null &amp;&amp; tmp != namespaceURINormalized) {

                       throw new XMLStreamException("prefix "+prefix+
                            " has been already bound to " +tmp +
                            ". Rebinding it to "+ namespaceURINormalized+
                            " is an error");
                }
            }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="637" startcolumn="21" endline="646" endcolumn="21">
if (fInternalNamespaceContext.containsPrefixInCurrentContext(prefix)){

                        String tmpURI = fInternalNamespaceContext.getURI(prefix);

                        if (tmpURI != null &amp;&amp; tmpURI != namespaceURI){
                            throw new XMLStreamException("Prefix "+prefix+" is " +
                                    "already bound to "+tmpURI+
                                    ". Trying to rebind it to "+namespaceURI+" is an error.");
                        }
                    }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2529" startcolumn="5" endline="2548" endcolumn="5">
if (DTM.ELEMENT_NODE == type)
    {
      // Assume that attributes and namespaces immediately follow the element.
      while (true)
      {
        identity++;

        // Assume this can not be null.
        type = _type2(identity);

        if (type == DTM.ATTRIBUTE_NODE)
        {
          return identity;
        }
        else if (DTM.NAMESPACE_NODE != type)
        {
          break;
        }
      }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="2492" startcolumn="5" endline="2510" endcolumn="5">
if (DTM.ELEMENT_NODE == type)
    {
      // Assume that attributes and namespaces immediately follow the element.
      while (true)
      {
        nodeID++;
        // Assume this can not be null.
        type = _type2(nodeID);

        if (type == DTM.ATTRIBUTE_NODE)
        {
          return makeNodeHandle(nodeID);
        }
        else if (DTM.NAMESPACE_NODE != type)
        {
          break;
        }
      }
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="155" startcolumn="5" endline="164" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="408" startcolumn="10" endline="417" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="155" startcolumn="5" endline="164" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1150" startcolumn="10" endline="1159" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="181" startcolumn="5" endline="190" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="408" startcolumn="10" endline="417" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/IntVector.java" startline="181" startcolumn="5" endline="190" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1150" startcolumn="10" endline="1159" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="155" startcolumn="5" endline="164" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="408" startcolumn="10" endline="417" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="155" startcolumn="5" endline="164" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1150" startcolumn="10" endline="1159" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="181" startcolumn="5" endline="190" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="408" startcolumn="10" endline="417" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/utils/ObjectVector.java" startline="181" startcolumn="5" endline="190" endcolumn="5">
if ((m_firstFree + numberOfElements) &gt;= m_mapSize)
    {
      m_mapSize += (m_blocksize+numberOfElements);

      Object newMap[] = new Object[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1150" startcolumn="10" endline="1159" endcolumn="5">
if ((m_firstFree + nNodes) &gt;= m_mapSize)
    {
      m_mapSize += (nNodes + m_blocksize);

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + nNodes);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="110" startcolumn="9" endline="119" endcolumn="9">
try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="110" startcolumn="9" endline="119" endcolumn="9">
try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="104" startcolumn="9" endline="113" endcolumn="9">
try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="104" startcolumn="9" endline="113" endcolumn="9">
try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="104" startcolumn="9" endline="113" endcolumn="9">
try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="104" startcolumn="9" endline="113" endcolumn="9">
try {
            return (FileInputStream)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws FileNotFoundException {
                    return new FileInputStream(file);
                }
            });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="68" startcolumn="9" endline="77" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="68" startcolumn="9" endline="77" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="72" startcolumn="9" endline="81" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="72" startcolumn="9" endline="81" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/stream/SecuritySupport.java" startline="72" startcolumn="9" endline="81" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/stream/SecuritySupport.java" startline="72" startcolumn="9" endline="81" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/transform/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/transform/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/validation/SecuritySupport.java" startline="72" startcolumn="9" endline="81" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/validation/SecuritySupport.java" startline="72" startcolumn="9" endline="81" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="69" startcolumn="9" endline="78" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="87" startcolumn="9" endline="96" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="70" startcolumn="9" endline="79" endcolumn="9">
try {
            return (FileInputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws FileNotFoundException {
                        return new FileInputStream(file);
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (FileNotFoundException)e.getException();
        }
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="84" startcolumn="9" endline="93" endcolumn="9">
try {
            return (InputStream)
                AccessController.doPrivileged(new PrivilegedExceptionAction() {
                    public Object run() throws IOException {
                        return url.openStream();
                    }
                });
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="235" startcolumn="9" endline="248" endcolumn="9">
try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = ch;
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="255" startcolumn="9" endline="268" endcolumn="9">
try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = ' ';
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="235" startcolumn="9" endline="248" endcolumn="9">
try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = ch;
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/Printer.java" startline="275" startcolumn="9" endline="288" endcolumn="9">
try {
            if ( _pos == BufferSize ) {
                _writer.write( _buffer );
                _pos = 0;
            }
            _buffer[ _pos ] = '\n';
            ++_pos;
        } catch ( IOException except ) {
            // We don't throw an exception, but hold it
            // until the end of the document.
            if ( _exception == null )
                _exception = except;
            throw except;
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="371" startcolumn="21" endline="381" endcolumn="21">
if (scanSurrogates(fStringBuffer3)) {
                        fStringBuffer.append(fStringBuffer3);
                        if (entityDepth == fEntityDepth) {
                            fStringBuffer2.append(fStringBuffer3);
                        }
                        if (DEBUG_ATTR_NORMALIZATION) {
                            System.out.println("** valueI: \""
                                               + fStringBuffer.toString()
                                               + "\"");
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="978" startcolumn="21" endline="988" endcolumn="21">
if (scanSurrogates(fStringBuffer3)) {
                        stringBuffer.append(fStringBuffer3);
                        if (entityDepth == fEntityDepth &amp;&amp; fNeedNonNormalizedValue) {
                            fStringBuffer2.append(fStringBuffer3);
                        }
                        if (DEBUG_ATTR_NORMALIZATION) {
                            System.out.println("** valueI: \""
                                    + stringBuffer.toString()
                                    + "\"");
                        }
                    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="2293" startcolumn="25" endline="2305" endcolumn="25">
for (int i = 0; i &lt; len; i++)
                        {
                            final char ch = m_charBuffer[i];
                            if (ALPHA_SIZE &lt;= ch)
                            {
                                // the key is not 7-bit ASCII so we won't find it here
                                return null;
                            }

                            node = node.m_nextChar[ch];
                            if (node == null)
                                return null;
                        }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="2179" startcolumn="25" endline="2192" endcolumn="25">
for (int i = 0; i &lt; len; i++)
                        {
                            // A thread-safe way to loop over the characters
                            final char ch = key.charAt(i);
                            if (ALPHA_SIZE &lt;= ch)
                            {
                                // the key is not 7-bit ASCII so we won't find it here
                                return null;
                            }

                            node = node.m_nextChar[ch];
                            if (node == null)
                                return null;
                        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/Trie.java" startline="166" startcolumn="17" endline="178" endcolumn="17">
for (int i = 0; i &lt; len; i++)
                {
                    final char ch = m_charBuffer[i];
                    if (ALPHA_SIZE &lt;= ch)
                    {
                        // the key is not 7-bit ASCII so we won't find it here
                        return null;
                    }

                    node = node.m_nextChar[ch];
                    if (node == null)
                        return null;
                }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java" startline="2179" startcolumn="25" endline="2192" endcolumn="25">
for (int i = 0; i &lt; len; i++)
                        {
                            // A thread-safe way to loop over the characters
                            final char ch = key.charAt(i);
                            if (ALPHA_SIZE &lt;= ch)
                            {
                                // the key is not 7-bit ASCII so we won't find it here
                                return null;
                            }

                            node = node.m_nextChar[ch];
                            if (node == null)
                                return null;
                        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1003" startcolumn="13" endline="1012" endcolumn="13">
if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.emptyElement(element, attributes, augs);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="931" startcolumn="13" endline="940" endcolumn="13">
if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth++ == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.startElement(element, attributes, augs);
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1003" startcolumn="13" endline="1012" endcolumn="13">
if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.emptyElement(element, attributes, augs);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="942" startcolumn="14" endline="951" endcolumn="9">
if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth++ == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.startElement(element, attributes, augs);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1014" startcolumn="14" endline="1023" endcolumn="9">
if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.emptyElement(element, attributes, augs);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="931" startcolumn="13" endline="940" endcolumn="13">
if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth++ == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.startElement(element, attributes, augs);
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="1014" startcolumn="14" endline="1023" endcolumn="9">
if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.emptyElement(element, attributes, augs);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="942" startcolumn="14" endline="951" endcolumn="9">
if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth++ == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.startElement(element, attributes, augs);
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="472" startcolumn="9" endline="484" endcolumn="9">
try {
            SymbolTable value =
                (SymbolTable)componentManager.getProperty(SYMBOL_TABLE);
            if (value != null) {
                fSymbolTable = value;
                if (fChildConfig != null) {
                    fChildConfig.setProperty(SYMBOL_TABLE, value);
                }
            }
        }
        catch (XMLConfigurationException e) {
            fSymbolTable = null;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="487" startcolumn="9" endline="499" endcolumn="9">
try {
            XMLErrorReporter value =
                (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);
            if (value != null) {
                setErrorReporter(value);
                if (fChildConfig != null) {
                    fChildConfig.setProperty(ERROR_REPORTER, value);
                }
            }
        }
        catch (XMLConfigurationException e) {
            fErrorReporter = null;
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="502" startcolumn="9" endline="516" endcolumn="9">
try {
            XMLEntityResolver value =
                (XMLEntityResolver)componentManager.getProperty(
                    ENTITY_RESOLVER);

            if (value != null) {
                fEntityResolver = value;
                if (fChildConfig != null) {
                    fChildConfig.setProperty(ENTITY_RESOLVER, value);
                }
            }
        }
        catch (XMLConfigurationException e) {
            fEntityResolver = null;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="487" startcolumn="9" endline="499" endcolumn="9">
try {
            XMLErrorReporter value =
                (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);
            if (value != null) {
                setErrorReporter(value);
                if (fChildConfig != null) {
                    fChildConfig.setProperty(ERROR_REPORTER, value);
                }
            }
        }
        catch (XMLConfigurationException e) {
            fErrorReporter = null;
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="519" startcolumn="9" endline="533" endcolumn="9">
try {
            XMLSecurityManager value =
                (XMLSecurityManager)componentManager.getProperty(
                    SECURITY_MANAGER);

            if (value != null) {
                fSecurityManager = value;
                if (fChildConfig != null) {
                    fChildConfig.setProperty(SECURITY_MANAGER, value);
                }
            }
        }
        catch (XMLConfigurationException e) {
            fSecurityManager = null;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="487" startcolumn="9" endline="499" endcolumn="9">
try {
            XMLErrorReporter value =
                (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);
            if (value != null) {
                setErrorReporter(value);
                if (fChildConfig != null) {
                    fChildConfig.setProperty(ERROR_REPORTER, value);
                }
            }
        }
        catch (XMLConfigurationException e) {
            fErrorReporter = null;
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="1053" startcolumn="9" endline="1073" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/BasicParserConfiguration.java" startline="524" startcolumn="9" endline="544" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/BasicParserConfiguration.java" startline="570" startcolumn="9" endline="580" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // special performance feature: no one by component manager is allowed to set it
            //
            if (suffixLength == Constants.PARSER_SETTINGS.length() &amp;&amp;
                featureId.endsWith(Constants.PARSER_SETTINGS)) {
                return FeatureState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="1396" startcolumn="9" endline="1416" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="1172" startcolumn="9" endline="1192" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="536" startcolumn="9" endline="548" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
                final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                return fContinueAfterFatalError ;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="1071" startcolumn="9" endline="1091" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="296" startcolumn="5" endline="309" endcolumn="5">
if (p_host == null)
    {
      if (p_userinfo != null)
      {
        throw new MalformedURIException(
          XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_USERINFO_IF_NO_HOST, null)); //"Userinfo may not be specified if host is not specified!");
      }

      if (p_port != -1)
      {
        throw new MalformedURIException(
          XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_PORT_IF_NO_HOST, null)); //"Port may not be specified if host is not specified!");
      }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="298" startcolumn="5" endline="311" endcolumn="5">
if (p_host == null)
    {
      if (p_userinfo != null)
      {
        throw new MalformedURIException(
          Utils.messages.createMessage(MsgKey.ER_NO_USERINFO_IF_NO_HOST, null)); //"Userinfo may not be specified if host is not specified!");
      }

      if (p_port != -1)
      {
        throw new MalformedURIException(
          Utils.messages.createMessage(MsgKey.ER_NO_PORT_IF_NO_HOST, null)); //"Port may not be specified if host is not specified!");
      }
    }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="565" startcolumn="9" endline="578" endcolumn="9">
if (index &gt; -1) {
            /**
             * this is a direct call to this parser, not a subclass since
             * internally the support of this property is done through
             * XMLSecurityPropertyManager
             */
            securityPropertyManager.setValue(index, XMLSecurityPropertyManager.State.APIPROPERTY, (String)value);
        } else {
            //check if the property is managed by security manager
            if (!securityManager.setLimit(propertyId, XMLSecurityManager.State.APIPROPERTY, value)) {
                //fall back to the default configuration to handle the property
                setProperty0(propertyId, value);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/SAXParser.java" startline="164" startcolumn="9" endline="177" endcolumn="9">
if (index &gt; -1) {
            /**
             * this is a direct call to this parser, not a subclass since
             * internally the support of this property is done through
             * XMLSecurityPropertyManager
             */
            securityPropertyManager.setValue(index, XMLSecurityPropertyManager.State.APIPROPERTY, (String)value);
        } else {
            //check if the property is managed by security manager
            if (!securityManager.setLimit(name, XMLSecurityManager.State.APIPROPERTY, value)) {
                //fall back to the default configuration to handle the property
                super.setProperty(name, value);
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="386" startcolumn="13" endline="397" endcolumn="13">
if (augs != null &amp;&amp; Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // report skipped entity to content handler
                if (fContentHandler != null) {
                    fContentHandler.skippedEntity(name);
                }
            }
            else {
                // SAX2 extension
                if (fLexicalHandler != null) {
                    fLexicalHandler.startEntity(name);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="815" startcolumn="13" endline="826" endcolumn="13">
if (augs != null &amp;&amp; Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // report skipped entity to content handler
                if (fContentHandler != null) {
                    fContentHandler.skippedEntity(name);
                }
            }
            else {
                // SAX2 extension
                if (fLexicalHandler != null &amp;&amp; fLexicalHandlerParameterEntities) {
                    fLexicalHandler.startEntity(name);
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="321" startcolumn="13" endline="330" endcolumn="13">
if (++fCurrentEntity.position == fCurrentEntity.count) {
                invokeListeners(1);
                fCurrentEntity.ch[0] = ch;
                offset = 0;
                if (load(1, false, false)) {
                    --fCurrentEntity.position;
                    --fCurrentEntity.startPosition;
                    return null;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="650" startcolumn="13" endline="659" endcolumn="13">
if (++fCurrentEntity.position == fCurrentEntity.count) {
                invokeListeners(1);
                fCurrentEntity.ch[0] = ch;
                offset = 0;
                if (load(1, false, false)) {
                    --fCurrentEntity.startPosition;
                    --fCurrentEntity.position;
                    return false;
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="482" startcolumn="13" endline="491" endcolumn="13">
if (++fCurrentEntity.position == fCurrentEntity.count) {
                invokeListeners(1);
                fCurrentEntity.ch[0] = ch;
                offset = 0;
                if (load(1, false, false)) {
                    --fCurrentEntity.position;
                    --fCurrentEntity.startPosition;
                    return null;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="650" startcolumn="13" endline="659" endcolumn="13">
if (++fCurrentEntity.position == fCurrentEntity.count) {
                invokeListeners(1);
                fCurrentEntity.ch[0] = ch;
                offset = 0;
                if (load(1, false, false)) {
                    --fCurrentEntity.startPosition;
                    --fCurrentEntity.position;
                    return false;
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1119" startcolumn="23" endline="1135" endcolumn="23">
switch (code) {
                        case NodeFilter.FILTER_REJECT:{
                            return; // remove the node
                          }
                          case NodeFilter.FILTER_SKIP: {
                              child = node.getFirstChild();
                              while ( child != null ) {
                                  serializeNode( child );
                                  child = child.getNextSibling();
                              }
                              return;
                          }

                          default: {
                               // fall through
                          }
                      }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1176" startcolumn="19" endline="1191" endcolumn="19">
switch (code) {
                    case NodeFilter.FILTER_REJECT: {
                        return;
                    }
                    case NodeFilter.FILTER_SKIP: {
                        Node child = node.getFirstChild();
                        while ( child != null ) {
                            serializeNode( child );
                            child = child.getNextSibling();
                        }
                        return;  // skip this node
                    }

                    default: { // fall through
                    }
                  }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="javax/xml/datatype/FactoryFinder.java" startline="229" startcolumn="9" endline="238" endcolumn="9">
try {
            String systemProp = ss.getSystemProperty(factoryId);
            if (systemProp != null) {
                dPrint("found system property, value=" + systemProp);
                return newInstance(type, systemProp, null, true);
            }
        }
        catch (SecurityException se) {
            if (debug) se.printStackTrace();
        }
</source>
        <source file="javax/xml/transform/FactoryFinder.java" startline="260" startcolumn="9" endline="269" endcolumn="9">
try {
            String systemProp = ss.getSystemProperty(factoryId);
            if (systemProp != null) {
                dPrint("found system property, value=" + systemProp);
                return newInstance(type, systemProp, null, true, true);
            }
        }
        catch (SecurityException se) {
            if (debug) se.printStackTrace();
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="javax/xml/parsers/FactoryFinder.java" startline="228" startcolumn="9" endline="237" endcolumn="9">
try {
            String systemProp = ss.getSystemProperty(factoryId);
            if (systemProp != null) {
                dPrint("found system property, value=" + systemProp);
                return newInstance(type, systemProp, null, true);
            }
        }
        catch (SecurityException se) {
            if (debug) se.printStackTrace();
        }
</source>
        <source file="javax/xml/transform/FactoryFinder.java" startline="260" startcolumn="9" endline="269" endcolumn="9">
try {
            String systemProp = ss.getSystemProperty(factoryId);
            if (systemProp != null) {
                dPrint("found system property, value=" + systemProp);
                return newInstance(type, systemProp, null, true, true);
            }
        }
        catch (SecurityException se) {
            if (debug) se.printStackTrace();
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="426" startcolumn="9" endline="437" endcolumn="9">
try {
            // Only report endEntity if this entity was actually read.
            if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // SAX2 extension
                if (fLexicalHandler != null) {
                    fLexicalHandler.endEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="856" startcolumn="9" endline="867" endcolumn="9">
try {
            // Only report endEntity if this entity was actually read.
            if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // SAX2 extension
                if (fLexicalHandler != null &amp;&amp; fLexicalHandlerParameterEntities) {
                    fLexicalHandler.endEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/SecuritySupport.java" startline="119" startcolumn="9" endline="130" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = ClassLoader.getSystemResourceAsStream(name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/w3c/dom/bootstrap/DOMImplementationRegistry.java" startline="414" startcolumn="13" endline="426" endcolumn="23">
return (InputStream)
                AccessController.doPrivileged(new PrivilegedAction() {
                        public Object run() {
                            InputStream ris;
                            if (classLoader == null) {
                                ris =
                                    ClassLoader.getSystemResourceAsStream(name);
                            } else {
                                ris = classLoader.getResourceAsStream(name);
                            }
                            return ris;
                        }
                    });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="1053" startcolumn="9" endline="1073" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/BasicParserConfiguration.java" startline="524" startcolumn="9" endline="544" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/BasicParserConfiguration.java" startline="570" startcolumn="9" endline="580" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // special performance feature: no one by component manager is allowed to set it
            //
            if (suffixLength == Constants.PARSER_SETTINGS.length() &amp;&amp;
                featureId.endsWith(Constants.PARSER_SETTINGS)) {
                return FeatureState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="1396" startcolumn="9" endline="1416" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="1172" startcolumn="9" endline="1192" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLErrorReporter.java" startline="512" startcolumn="9" endline="524" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // http://apache.org/xml/features/continue-after-fatal-error
            //   Allows the parser to continue after a fatal error.
            //   Normally, a fatal error would stop the parse.
            //
            if (suffixLength == Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.CONTINUE_AFTER_FATAL_ERROR_FEATURE)) {
                fContinueAfterFatalError = state;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="1071" startcolumn="9" endline="1091" endcolumn="9">
if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();

            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() &amp;&amp;
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                return PropertyState.NOT_SUPPORTED;
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/DescendantIterator.java" startline="118" startcolumn="5" endline="127" endcolumn="5">
if ((0 == (whatToShow
               &amp; (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_ELEMENT
                  | DTMFilter.SHOW_PROCESSING_INSTRUCTION))) ||
                   (whatToShow == DTMFilter.SHOW_ALL))
      initNodeTest(whatToShow);
    else
    {
      initNodeTest(whatToShow, compiler.getStepNS(firstStepPos),
                              compiler.getStepLocalName(firstStepPos));
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/BasicTestIterator.java" startline="83" startcolumn="5" endline="94" endcolumn="5">
if ((0 == (whatToShow
               &amp; (DTMFilter.SHOW_ATTRIBUTE
               | DTMFilter.SHOW_NAMESPACE
               | DTMFilter.SHOW_ELEMENT
               | DTMFilter.SHOW_PROCESSING_INSTRUCTION)))
               || (whatToShow == DTMFilter.SHOW_ALL))
      initNodeTest(whatToShow);
    else
    {
      initNodeTest(whatToShow, compiler.getStepNS(firstStepPos),
                              compiler.getStepLocalName(firstStepPos));
    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XPointerElementHandler.java" startline="252" startcolumn="9" endline="264" endcolumn="9">
while (xercesFeatures.hasMoreElements()) {
            String featureId = (String)xercesFeatures.nextElement();
            fSettings.addRecognizedFeatures(new String[] { featureId });
            try {
                fSettings.setFeature(
                featureId,
                componentManager.getFeature(featureId));
            }
            catch (XMLConfigurationException e) {
                // componentManager doesn't support this feature,
                // so we won't worry about it
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="2650" startcolumn="9" endline="2662" endcolumn="9">
while (features.hasMoreElements()) {
            String featureId = featurePrefix + (String)features.nextElement();

            to.addRecognizedFeatures(new String[] { featureId });

            try {
                to.setFeature(featureId, from.getFeature(featureId));
            }
            catch (XMLConfigurationException e) {
                // componentManager doesn't support this feature,
                // so we won't worry about it
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/validation/SecuritySupport.java" startline="120" startcolumn="9" endline="131" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="javax/xml/xpath/SecuritySupport.java" startline="117" startcolumn="9" endline="128" endcolumn="15">
return (Enumeration)
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws IOException{
                    Enumeration enumeration;
                    if (cl == null) {
                        enumeration = ClassLoader.getSystemResources(name);
                    } else {
                        enumeration = cl.getResources(name);
                    }
                    return enumeration;
                }
            });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/datatype/SecuritySupport.java" startline="83" startcolumn="9" endline="94" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/parsers/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/stream/SecuritySupport.java" startline="87" startcolumn="9" endline="98" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/transform/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="102" startcolumn="9" endline="113" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/validation/SecuritySupport.java" startline="140" startcolumn="9" endline="151" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="99" startcolumn="9" endline="110" endcolumn="15">
return (URL)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    URL url;
                    if (cl == null) {
                        url = Object.class.getResource(name);
                    } else {
                        url = cl.getResource(name);
                    }
                    return url;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="javax/xml/xpath/SecuritySupport.java" startline="137" startcolumn="9" endline="148" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/bcel/internal/util/SecuritySupport.java" startline="132" startcolumn="9" endline="142" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/" + name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xalan/internal/utils/SecuritySupport.java" startline="145" startcolumn="9" endline="155" endcolumn="11">
return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="org/xml/sax/helpers/SecuritySupport.java" startline="85" startcolumn="9" endline="96" endcolumn="15">
return (InputStream)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    InputStream ris;
                    if (cl == null) {
                        ris = Object.class.getResourceAsStream(name);
                    } else {
                        ris = cl.getResourceAsStream(name);
                    }
                    return ris;
                }
            });
</source>
        <source file="com/sun/org/apache/xerces/internal/utils/SecuritySupport.java" startline="136" startcolumn="9" endline="147" endcolumn="11">
return (InputStream)
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                InputStream ris;
                if (cl == null) {
                    ris = Object.class.getResourceAsStream("/"+name);
                } else {
                    ris = cl.getResourceAsStream(name);
                }
                return ris;
            }
        });
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1125" startcolumn="5" endline="1134" endcolumn="5">
if (p_host == null || p_host.trim().length() == 0)
    {
      m_host = p_host;
      m_userinfo = null;
      m_port = -1;
    }
    else if (!isWellFormedAddress(p_host))
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_HOST_ADDRESS_NOT_WELLFORMED, null)); //"Host is not a well formed address!");
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1104" startcolumn="5" endline="1113" endcolumn="5">
if (p_host == null || p_host.trim().length() == 0)
    {
      m_host = p_host;
      m_userinfo = null;
      m_port = -1;
    }
    else if (!isWellFormedAddress(p_host))
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_HOST_ADDRESS_NOT_WELLFORMED, null)); //"Host is not a well formed address!");
    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1322" startcolumn="10" endline="1334" endcolumn="5">
if (getPath() == null)
    {
      throw new MalformedURIException(
        XMLMessages.createXMLMessage(XMLErrorResources.ER_FRAG_WHEN_PATH_NULL, null)); //"Fragment cannot be set when path is null!");
    }
    else if (!isURIString(p_fragment))
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_FRAG_INVALID_CHAR, null)); //"Fragment contains invalid character!");
    }
    else
    {
      m_fragment = p_fragment;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1301" startcolumn="10" endline="1313" endcolumn="5">
if (getPath() == null)
    {
      throw new MalformedURIException(
        Utils.messages.createMessage(MsgKey.ER_FRAG_WHEN_PATH_NULL, null)); //"Fragment cannot be set when path is null!");
    }
    else if (!isURIString(p_fragment))
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_FRAG_INVALID_CHAR, null)); //"Fragment contains invalid character!");
    }
    else
    {
      m_fragment = p_fragment;
    }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDOMImplementationImpl.java" startline="202" startcolumn="13" endline="213" endcolumn="13">
for (int i = 1; i &lt; index; i++) {
                if (!XMLChar.isNCName(qname.charAt(i))) {
                    String msg =
                        DOMMessageFormatter.formatMessage(
                            DOMMessageFormatter.DOM_DOMAIN,
                            "INVALID_CHARACTER_ERR",
                            null);
                    throw new DOMException(
                        DOMException.INVALID_CHARACTER_ERR,
                        msg);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/CoreDOMImplementationImpl.java" startline="227" startcolumn="9" endline="236" endcolumn="9">
for (int i = start + 1; i &lt; length; i++) {
            if (!XMLChar.isNCName(qname.charAt(i))) {
                String msg =
                    DOMMessageFormatter.formatMessage(
                        DOMMessageFormatter.DOM_DOMAIN,
                        "INVALID_CHARACTER_ERR",
                        null);
                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/NthIterator.java" startline="51" startcolumn="9" endline="61" endcolumn="9">
try {
            final NthIterator clone = (NthIterator) super.clone();
            clone._source = _source.cloneIterator();    // resets source
            clone._isRestartable = false;
            return clone;
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/FilterIterator.java" startline="76" startcolumn="9" endline="86" endcolumn="9">
try {
            final FilterIterator clone = (FilterIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/NthIterator.java" startline="51" startcolumn="9" endline="61" endcolumn="9">
try {
            final NthIterator clone = (NthIterator) super.clone();
            clone._source = _source.cloneIterator();    // resets source
            clone._isRestartable = false;
            return clone;
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/ForwardPositionIterator.java" startline="74" startcolumn="9" endline="85" endcolumn="9">
try {
            final ForwardPositionIterator clone =
                (ForwardPositionIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/NthIterator.java" startline="51" startcolumn="9" endline="61" endcolumn="9">
try {
            final NthIterator clone = (NthIterator) super.clone();
            clone._source = _source.cloneIterator();    // resets source
            clone._isRestartable = false;
            return clone;
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MatchingIterator.java" startline="75" startcolumn="9" endline="85" endcolumn="9">
try {
            final MatchingIterator clone = (MatchingIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDLoader.java" startline="309" startcolumn="14" endline="320" endcolumn="9">
if (propertyId.equals(ENTITY_RESOLVER)) {
            return fEntityResolver;
        }
        else if (propertyId.equals(LOCALE)) {
            return getLocale();
        }
        else if (propertyId.equals(GRAMMAR_POOL)) {
            return fGrammarPool;
        }
        else if (propertyId.equals(DTD_VALIDATOR)) {
            return fValidator;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDLoader.java" startline="390" startcolumn="14" endline="401" endcolumn="9">
if (featureId.equals(WARN_ON_UNDECLARED_ELEMDEF)) {
            return fWarnOnUndeclaredElemdef;
        }
        else if (featureId.equals(NOTIFY_CHAR_REFS)) {
            return fDTDScanner.getFeature(featureId);
        }
        else if (featureId.equals(STANDARD_URI_CONFORMANT_FEATURE)) {
            return fStrictURI;
        }
        else if (featureId.equals(BALANCE_SYNTAX_TREES)) {
            return fBalanceSyntaxTrees;
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="2429" startcolumn="14" endline="2438" endcolumn="9">
if(fVariety == VARIETY_UNION){
            XSSimpleType[] memberTypes = fMemberTypes;
            for(int i = 0 ; i &lt; memberTypes.length ; i++){
                if(!memberTypes[i].getNumeric() ){
                    this.fNumeric = false;
                    return;
                }
            }
            this.fNumeric = true;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="2526" startcolumn="14" endline="2535" endcolumn="9">
if(fVariety == VARIETY_UNION){
            XSSimpleType [] memberTypes = fMemberTypes;
            for(int i = 0 ; i &lt; memberTypes.length ; i++){
                if(!(memberTypes[i].getFinite()) ){
                    this.fFinite = false;
                    return;
                }
            }
            this.fFinite = true;
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/xml/internal/stream/writers/WriterUtility.java" startline="146" startcolumn="13" endline="158" endcolumn="13">
if(fEncoder != null &amp;&amp; !fEncoder.canEncode(ch)){
                //- write the data to the point we get this character
                fWriter.write(content, startWritePos, index - startWritePos );

                //escape this character
                fWriter.write( "&amp;#x" );
                fWriter.write(Integer.toHexString(ch));
                fWriter.write( ';' );
                //increase the startWritePos by 1 indicating that next write should start from
                //one position ahead
                startWritePos = index + 1;

            }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="1368" startcolumn="13" endline="1377" endcolumn="13">
if (fEncoder != null &amp;&amp; !fEncoder.canEncode(ch)){
                fWriter.write(content, startWritePos, index - startWritePos );

                // Escape this char as underlying encoder cannot handle it
                fWriter.write( "&amp;#x" );
                fWriter.write(Integer.toHexString(ch));
                fWriter.write( ';' );
                startWritePos = index + 1;
                continue;
            }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/xml/internal/stream/writers/WriterUtility.java" startline="146" startcolumn="13" endline="158" endcolumn="13">
if(fEncoder != null &amp;&amp; !fEncoder.canEncode(ch)){
                //- write the data to the point we get this character
                fWriter.write(content, startWritePos, index - startWritePos );

                //escape this character
                fWriter.write( "&amp;#x" );
                fWriter.write(Integer.toHexString(ch));
                fWriter.write( ';' );
                //increase the startWritePos by 1 indicating that next write should start from
                //one position ahead
                startWritePos = index + 1;

            }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLStreamWriterImpl.java" startline="1439" startcolumn="13" endline="1448" endcolumn="13">
if (fEncoder != null &amp;&amp; !fEncoder.canEncode(ch)){
                fWriter.write(content, startWritePos, index - startWritePos );

                // Escape this char as underlying encoder cannot handle it
                fWriter.write( "&amp;#x" );
                fWriter.write(Integer.toHexString(ch));
                fWriter.write( ';' );
                startWritePos = index + 1;
                continue;
            }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="848" startcolumn="9" endline="859" endcolumn="9">
if (!fInDTD) {
            if (fDocumentHandler != null
                &amp;&amp; getState() == STATE_NORMAL_PROCESSING) {
                fDepth++;
                augs = modifyAugmentations(augs);
                fDocumentHandler.comment(text, augs);
                fDepth--;
            }
        }
        else if (fDTDHandler != null) {
            fDTDHandler.comment(text, augs);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="868" startcolumn="9" endline="880" endcolumn="9">
if (!fInDTD) {
            if (fDocumentHandler != null
                &amp;&amp; getState() == STATE_NORMAL_PROCESSING) {
                // we need to change the depth like this so that modifyAugmentations() works
                fDepth++;
                augs = modifyAugmentations(augs);
                fDocumentHandler.processingInstruction(target, data, augs);
                fDepth--;
            }
        }
        else if (fDTDHandler != null) {
            fDTDHandler.processingInstruction(target, data, augs);
        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="430" startcolumn="13" endline="439" endcolumn="13">
if (fSecurityPropertyMgr == null) {
                fSecurityPropertyMgr = new XMLSecurityPropertyManager();
                try {
                    super.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);
                } catch (SAXException e) {
                    throw new UnsupportedOperationException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {SECURITY_MANAGER}), e);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="420" startcolumn="13" endline="429" endcolumn="13">
if (fSecurityManager == null) {
                fSecurityManager = new XMLSecurityManager(true);
                try {
                    super.setProperty(SECURITY_MANAGER, fSecurityManager);
                } catch (SAXException e) {
                    throw new UnsupportedOperationException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {SECURITY_MANAGER}), e);
                }
            }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="1153" startcolumn="5" endline="1164" endcolumn="5">
if (p_port &gt;= 0 &amp;&amp; p_port &lt;= 65535)
    {
      if (m_host == null)
      {
        throw new MalformedURIException(
          XMLMessages.createXMLMessage(XMLErrorResources.ER_PORT_WHEN_HOST_NULL, null)); //"Port cannot be set when host is null!");
      }
    }
    else if (p_port != -1)
    {
      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INVALID_PORT, null)); //"Invalid port number!");
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="1132" startcolumn="5" endline="1143" endcolumn="5">
if (p_port &gt;= 0 &amp;&amp; p_port &lt;= 65535)
    {
      if (m_host == null)
      {
        throw new MalformedURIException(
          Utils.messages.createMessage(MsgKey.ER_PORT_WHEN_HOST_NULL, null)); //"Port cannot be set when host is null!");
      }
    }
    else if (p_port != -1)
    {
      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_INVALID_PORT, null)); //"Invalid port number!");
    }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="441" startcolumn="13" endline="451" endcolumn="13">
try {
                fTypeInfoProvider.beginEndElement(augs);
                fContentHandler.endElement((element.uri != null) ? element.uri : XMLSymbols.EMPTY_STRING,
                        element.localpart, element.rawname);
            }
            catch (SAXException e) {
                throw new XNIException(e);
            }
            finally {
                fTypeInfoProvider.finishEndElement();
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="378" startcolumn="13" endline="388" endcolumn="13">
try {
                fTypeInfoProvider.beginStartElement(augs, attributes);
                fContentHandler.startElement((element.uri != null) ? element.uri : XMLSymbols.EMPTY_STRING,
                        element.localpart, element.rawname, fAttrAdapter);
            }
            catch (SAXException e) {
                throw new XNIException(e);
            }
            finally {
                fTypeInfoProvider.finishStartElement();
            }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1017" startcolumn="9" endline="1028" endcolumn="9">
try {
            // SAX2 extension
            if (fDeclHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDeclHandler.externalEntityDecl(name, publicId, systemId);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1048" startcolumn="9" endline="1059" endcolumn="9">
try {
            // SAX2 extension
            if (fDTDHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDTDHandler.unparsedEntityDecl(name, publicId, systemId, notation);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1076" startcolumn="9" endline="1087" endcolumn="9">
try {
            // SAX1 and SAX2
            if (fDTDHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDTDHandler.notationDecl(name, publicId, systemId);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="1048" startcolumn="9" endline="1059" endcolumn="9">
try {
            // SAX2 extension
            if (fDTDHandler != null) {
                String publicId = identifier.getPublicId();
                String systemId = fResolveDTDURIs ?
                    identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
                fDTDHandler.unparsedEntityDecl(name, publicId, systemId, notation);
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="738" startcolumn="9" endline="747" endcolumn="9">
if (months != null &amp;&amp; months.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MONTHS.toString(), months.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " months too large to be supported by this implementation "
                                                //+ months.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="748" startcolumn="9" endline="757" endcolumn="9">
if (days != null &amp;&amp; days.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.DAYS.toString(), days.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " days too large to be supported by this implementation "
                                                //+ days.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="758" startcolumn="9" endline="767" endcolumn="9">
if (hours != null &amp;&amp; hours.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.HOURS.toString(), hours.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " hours too large to be supported by this implementation "
                                                //+ hours.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="768" startcolumn="9" endline="777" endcolumn="9">
if (minutes != null &amp;&amp; minutes.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MINUTES.toString(), minutes.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " minutes too large to be supported by this implementation "
                                                //+ minutes.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="791" startcolumn="9" endline="800" endcolumn="9">
if (rhsYears != null &amp;&amp; rhsYears.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.YEARS.toString(), rhsYears.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " years too large to be supported by this implementation "
                                                //+ rhsYears.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="802" startcolumn="9" endline="811" endcolumn="9">
if (rhsMonths != null &amp;&amp; rhsMonths.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MONTHS.toString(), rhsMonths.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " months too large to be supported by this implementation "
                                                //+ rhsMonths.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="813" startcolumn="9" endline="822" endcolumn="9">
if (rhsDays != null &amp;&amp; rhsDays.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.DAYS.toString(), rhsDays.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " days too large to be supported by this implementation "
                                                //+ rhsDays.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="824" startcolumn="9" endline="833" endcolumn="9">
if (rhsHours != null &amp;&amp; rhsHours.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.HOURS.toString(), rhsHours.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " hours too large to be supported by this implementation "
                                                //+ rhsHours.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="835" startcolumn="9" endline="844" endcolumn="9">
if (rhsMinutes != null &amp;&amp; rhsMinutes.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MINUTES.toString(), rhsMinutes.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " minutes too large to be supported by this implementation "
                                                //+ rhsMinutes.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="850" startcolumn="9" endline="859" endcolumn="9">
if (rhsSeconds != null &amp;&amp; rhsSeconds.compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), rhsSeconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ rhsSeconds.toString()
                                        );
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/datatype/DurationImpl.java" startline="778" startcolumn="9" endline="787" endcolumn="9">
if (seconds != null &amp;&amp; seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
                throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge",
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})

                                        //this.getClass().getName() + "#compare(Duration duration)"
                                                //+ " seconds too large to be supported by this implementation "
                                                //+ seconds.toString()
                                        );
        }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="320" startcolumn="33" endline="334" endcolumn="33">
if (!fEntityManager.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                                       "EntityNotDeclared",
                                                                       new Object[]{entityName},
                                                                       XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    }
                                    else {
                                        reportFatalError("EntityNotDeclared",
                                                         new Object[]{entityName});
                                    }
                                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="936" startcolumn="33" endline="949" endcolumn="33">
if (!fEntityStore.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(fEntityScanner,XMLMessageFormatter.XML_DOMAIN,
                                                    "EntityNotDeclared",
                                                    new Object[]{entityName},
                                                    XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    } else {
                                        reportFatalError("EntityNotDeclared",
                                                new Object[]{entityName});
                                    }
                                }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="543" startcolumn="9" endline="552" endcolumn="9">
for ( Node c = endPointB, p = c.getParentNode();
             p != null;
             c = p, p = p.getParentNode())
        {
            if (p == endPointA) {
                int index = indexOf(c, endPointA);
                if (offsetA &lt;= index) return 1;
                return -1;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="556" startcolumn="9" endline="565" endcolumn="9">
for ( Node c = endPointA, p = c.getParentNode();
             p != null;
             c = p, p = p.getParentNode())
        {
            if (p == endPointB) {
                int index = indexOf(c, endPointB);
                if (index &lt; offsetB) return 1;
                return -1;
            }
        }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="989" startcolumn="9" endline="1005" endcolumn="9">
while (true) {
          node++;

          if (_sp &lt; 0) {
            node = NULL;
            break;
          }
          else if (node &gt;= _stack[_sp]) {
            if (--_sp &lt; 0) {
              node = NULL;
              break;
            }
          }
          else if (_exptype2(node) == nodeType) {
            break;
          }
        }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1434" startcolumn="9" endline="1448" endcolumn="9">
while (true) {
          node = node + 1;

          if (_sp &lt; 0) {
            node = NULL;
            break;
          } else if (node &gt;= _stack[_sp]) {
            if (--_sp &lt; 0) {
              node = NULL;
              break;
            }
          } else if (_exptype(node) == nodeType) {
            break;
          }
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="189" startcolumn="13" endline="199" endcolumn="13">
try {
                NodeValueIterator clone = (NodeValueIterator)super.clone();
                clone._source = _source.cloneIterator();
                clone.setRestartable(false);
                return clone.reset();
            }
            catch (CloneNotSupportedException e) {
                BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                          e.toString());
                return null;
            }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/FilterIterator.java" startline="76" startcolumn="9" endline="86" endcolumn="9">
try {
            final FilterIterator clone = (FilterIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="189" startcolumn="13" endline="199" endcolumn="13">
try {
                NodeValueIterator clone = (NodeValueIterator)super.clone();
                clone._source = _source.cloneIterator();
                clone.setRestartable(false);
                return clone.reset();
            }
            catch (CloneNotSupportedException e) {
                BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                          e.toString());
                return null;
            }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/ForwardPositionIterator.java" startline="74" startcolumn="9" endline="85" endcolumn="9">
try {
            final ForwardPositionIterator clone =
                (ForwardPositionIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MultiDOM.java" startline="189" startcolumn="13" endline="199" endcolumn="13">
try {
                NodeValueIterator clone = (NodeValueIterator)super.clone();
                clone._source = _source.cloneIterator();
                clone.setRestartable(false);
                return clone.reset();
            }
            catch (CloneNotSupportedException e) {
                BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                          e.toString());
                return null;
            }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/dom/MatchingIterator.java" startline="75" startcolumn="9" endline="85" endcolumn="9">
try {
            final MatchingIterator clone = (MatchingIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="1042" startcolumn="9" endline="1053" endcolumn="9">
try
        {
            SimpleDateFormat inFormat = new SimpleDateFormat(gmd);
            inFormat.setLenient(false);
            Date d = inFormat.parse(dateTime);
            SimpleDateFormat outFormat = new SimpleDateFormat(strip(yearSymbols, pattern));
            outFormat.setTimeZone(timeZone);
            return outFormat.format(d);
        }
        catch (ParseException pe)
        {
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="1066" startcolumn="9" endline="1077" endcolumn="9">
try
        {
            SimpleDateFormat inFormat = new SimpleDateFormat(gd);
            inFormat.setLenient(false);
            Date d = inFormat.parse(dateTime);
            SimpleDateFormat outFormat = new SimpleDateFormat(strip(yearSymbols + monthSymbols, pattern));
            outFormat.setTimeZone(timeZone);
            return outFormat.format(d);
        }
        catch (ParseException pe)
        {
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="1054" startcolumn="9" endline="1065" endcolumn="9">
try
        {
            SimpleDateFormat inFormat = new SimpleDateFormat(gm);
            inFormat.setLenient(false);
            Date d = inFormat.parse(dateTime);
            SimpleDateFormat outFormat = new SimpleDateFormat(strip(yearSymbols, pattern));
            outFormat.setTimeZone(timeZone);
            return outFormat.format(d);
        }
        catch (ParseException pe)
        {
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="1066" startcolumn="9" endline="1077" endcolumn="9">
try
        {
            SimpleDateFormat inFormat = new SimpleDateFormat(gd);
            inFormat.setLenient(false);
            Date d = inFormat.parse(dateTime);
            SimpleDateFormat outFormat = new SimpleDateFormat(strip(yearSymbols + monthSymbols, pattern));
            outFormat.setTimeZone(timeZone);
            return outFormat.format(d);
        }
        catch (ParseException pe)
        {
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.java" startline="1318" startcolumn="13" endline="1328" endcolumn="45">
do {
                scanAttribute(fAttributes);
                if (fSecurityManager != null &amp;&amp; !fSecurityManager.isNoLimit(fElementAttributeLimit) &amp;&amp;
                        fAttributes.getLength() &gt; fElementAttributeLimit){
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                 "ElementAttributeLimit",
                                                 new Object[]{rawname, fElementAttributeLimit },
                                                 XMLErrorReporter.SEVERITY_FATAL_ERROR );
                }

            } while (!seekCloseOfStartTag());
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNSDocumentScannerImpl.java" startline="254" startcolumn="13" endline="264" endcolumn="45">
do {
                scanAttribute(fAttributes);
                if (fSecurityManager != null &amp;&amp; (!fSecurityManager.isNoLimit(fElementAttributeLimit)) &amp;&amp;
                        fAttributes.getLength() &gt; fElementAttributeLimit){
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                 "ElementAttributeLimit",
                                                 new Object[]{rawname, fElementAttributeLimit },
                                                 XMLErrorReporter.SEVERITY_FATAL_ERROR );
                }

            } while (!seekCloseOfStartTag());
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="com/sun/org/apache/xpath/internal/NodeSetDTM.java" startline="810" startcolumn="7" endline="826" endcolumn="7">
for (i = size - 1; i &gt;= 0; i--)
      {
        int child = elementAt(i);

        if (child == node)
        {
          i = -2;  // Duplicate, suppress insert

          break;
        }

        DTM dtm = support.getDTM(node);
        if (!dtm.isNodeAfter(node, child))
        {
          break;
        }
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/NodeSequence.java" startline="743" startcolumn="7" endline="759" endcolumn="7">
for (i = size - 1; i &gt;= 0; i--)
      {
        int child = vec.elementAt(i);

        if (child == node)
        {
          i = -2; // Duplicate, suppress insert

          break;
        }

        DTM dtm = m_dtmMgr.getDTM(node);
        if (!dtm.isNodeAfter(node, child))
        {
          break;
        }
      }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1324" startcolumn="17" endline="1333" endcolumn="9">
while ((parent = _parent(parent)) != NULL)
                {
                        if (++index == _stack.length)
                        {
                                final int[] stack = new int[index + 4];
                                System.arraycopy(_stack, 0, stack, 0, index);
                                _stack = stack;
                        }
                        _stack[index] = parent;
        }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="880" startcolumn="9" endline="889" endcolumn="9">
while ((parent = _parent2(parent)) != NULL)
        {
          if (++index == _stack.length)
          {
            final int[] stack = new int[index*2];
            System.arraycopy(_stack, 0, stack, 0, index);
            _stack = stack;
          }
          _stack[index] = parent;
        }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="911" startcolumn="9" endline="922" endcolumn="9">
try {
        _printer.enterDTD();
        _printer.printText( "&lt;!ENTITY " );
        _printer.printText( name );
        _printer.printText( " \"" );
        printEscaped( value );
        _printer.printText( "\"&gt;" );
        if ( _indenting )
            _printer.breakLine();
        } catch ( IOException except ) {
            throw new SAXException( except );
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="863" startcolumn="9" endline="874" endcolumn="9">
try {
        _printer.enterDTD();
        _printer.printText( "&lt;!ELEMENT " );
        _printer.printText( name );
        _printer.printText( ' ' );
        _printer.printText( model );
        _printer.printText( '&gt;' );
        if ( _indenting )
            _printer.breakLine();
        } catch ( IOException except ) {
            throw new SAXException( except );
        }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/EntityResolver2Wrapper.java" startline="116" startcolumn="13" endline="127" endcolumn="13">
try {
                InputSource inputSource = fEntityResolver.getExternalSubset(name, baseURI);
                return (inputSource != null) ? createXMLInputSource(inputSource, baseURI) : null;
            }
            // error resolving external subset
            catch (SAXException e) {
                Exception ex = e.getException();
                if (ex == null) {
                    ex = e;
                }
                throw new XNIException(ex);
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/EntityResolver2Wrapper.java" startline="175" startcolumn="13" endline="187" endcolumn="13">
try {
                InputSource inputSource =
                    fEntityResolver.resolveEntity(name, pubId, baseURI, sysId);
                return (inputSource != null) ? createXMLInputSource(inputSource, baseURI) : null;
            }
            // error resolving entity
            catch (SAXException e) {
                Exception ex = e.getException();
                if (ex == null) {
                    ex = e;
                }
                throw new XNIException(ex);
            }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="1066" startcolumn="9" endline="1077" endcolumn="9">
try
        {
            SimpleDateFormat inFormat = new SimpleDateFormat(gd);
            inFormat.setLenient(false);
            Date d = inFormat.parse(dateTime);
            SimpleDateFormat outFormat = new SimpleDateFormat(strip(yearSymbols + monthSymbols, pattern));
            outFormat.setTimeZone(timeZone);
            return outFormat.format(d);
        }
        catch (ParseException pe)
        {
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDatetime.java" startline="1007" startcolumn="9" endline="1019" endcolumn="9">
try
        {
            SimpleDateFormat inFormat = new SimpleDateFormat(t + zone);
            inFormat.setLenient(false);
            Date d= inFormat.parse(dateTime);
            SimpleDateFormat outFormat = new SimpleDateFormat(strip
                (yearSymbols + monthSymbols + daySymbols, pattern));
            outFormat.setTimeZone(timeZone);
            return outFormat.format(d);
        }
        catch (ParseException pe)
        {
        }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="213" startcolumn="16" endline="230" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return true;
                }
                else {
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                 return true;
                 */
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="100" startcolumn="16" endline="118" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return entry.symbol;
                }
                else{
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                symbolAsArray = entry.characters;
                return entry.symbol;
                 */
            }
        }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="213" startcolumn="16" endline="230" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return true;
                }
                else {
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                 return true;
                 */
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="213" startcolumn="9" endline="230" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return true;
                }
                else {
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                 return true;
                 */
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedByteVector.java" startline="486" startcolumn="5" endline="496" endcolumn="5">
for(int index=m_firstFree/m_blocksize;
        index&gt;=0;
        --index)
    {
      byte[] block=m_map[index];
      if(block!=null)
        for(int offset=boffset; offset&gt;=0; --offset)
          if(block[offset]==elem)
            return offset+index*m_blocksize;
      boffset=0; // after first
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedIntVector.java" startline="527" startcolumn="5" endline="537" endcolumn="5">
for(int index=m_firstFree&gt;&gt;&gt;m_SHIFT;
        index&gt;=0;
        --index)
    {
      int[] block=m_map[index];
      if(block!=null)
        for(int offset=boffset; offset&gt;=0; --offset)
          if(block[offset]==elem)
            return offset+index*m_blocksize;
      boffset=0; // after first
    }
</source>
    </clone>
    <clone nlines="26" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="202" startcolumn="9" endline="227" endcolumn="9">
while (!accepted) {

            if (fForward &amp;&amp; previousNode != null) {
                //repeat last node.
                previousNode = fCurrentNode;
            } else {
                // get previous node in backwards depth first order.
                previousNode = previousNode(previousNode);
            }

            // we are going backwards
            fForward = false;

            // if the new previous node is null, we're at head or past the root,
            // so return null.
            if (previousNode == null) return null;

            // check if node passes filters and whatToShow.
            accepted = acceptNode(previousNode);
            if (accepted) {
                // if accepted, update the current node, and return it.
                fCurrentNode = previousNode;
                return fCurrentNode;
            } else
                continue accepted_loop;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="201" startcolumn="9" endline="227" endcolumn="9">
accepted_loop:
        while (!accepted) {

            if (fForward &amp;&amp; previousNode != null) {
                //repeat last node.
                previousNode = fCurrentNode;
            } else {
                // get previous node in backwards depth first order.
                previousNode = previousNode(previousNode);
            }

            // we are going backwards
            fForward = false;

            // if the new previous node is null, we're at head or past the root,
            // so return null.
            if (previousNode == null) return null;

            // check if node passes filters and whatToShow.
            accepted = acceptNode(previousNode);
            if (accepted) {
                // if accepted, update the current node, and return it.
                fCurrentNode = previousNode;
                return fCurrentNode;
            } else
                continue accepted_loop;
        }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3086" startcolumn="26" endline="3096" endcolumn="21">
if (ctype.fContentType == XSComplexTypeDecl.CONTENTTYPE_SIMPLE) {
                        if (actualValue != null &amp;&amp; (!isComparable(fValidatedInfo, fCurrentElemDecl.fDefault)
                                || !actualValue.equals(fCurrentElemDecl.fDefault.actualValue))) {
                            reportSchemaError(
                                "cvc-elt.5.2.2.2.2",
                                new Object[] {
                                    element.rawname,
                                    content,
                                    fCurrentElemDecl.fDefault.stringValue()});
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3097" startcolumn="24" endline="3109" endcolumn="17">
if (fCurrentType.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {
                    if (actualValue != null &amp;&amp; (!isComparable(fValidatedInfo, fCurrentElemDecl.fDefault)
                            || !actualValue.equals(fCurrentElemDecl.fDefault.actualValue))) {
                        // REVISIT: the spec didn't mention this case: fixed
                        //          value with simple type
                        reportSchemaError(
                            "cvc-elt.5.2.2.2.2",
                            new Object[] {
                                element.rawname,
                                content,
                                fCurrentElemDecl.fDefault.stringValue()});
                    }
                }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="249" startcolumn="5" endline="266" endcolumn="5">
if (null == m_map)
    {
      m_map = new int[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else
    {
      if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="367" startcolumn="5" endline="381" endcolumn="5">
if (null == m_map)
    {
      m_map = new int[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="249" startcolumn="5" endline="266" endcolumn="5">
if (null == m_map)
    {
      m_map = new int[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else
    {
      if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        int newMap[] = new int[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1109" startcolumn="5" endline="1123" endcolumn="5">
if (null == m_map)
    {
      m_map = new Node[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1010" startcolumn="5" endline="1027" endcolumn="5">
if (null == m_map)
    {
      m_map = new Node[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else
    {
      if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/NodeVector.java" startline="367" startcolumn="5" endline="381" endcolumn="5">
if (null == m_map)
    {
      m_map = new int[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      int newMap[] = new int[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1010" startcolumn="5" endline="1027" endcolumn="5">
if (null == m_map)
    {
      m_map = new Node[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else
    {
      if ((m_firstFree + 2) &gt;= m_mapSize)
      {
        m_mapSize += m_blocksize;

        Node newMap[] = new Node[m_mapSize];

        System.arraycopy(m_map, 0, newMap, 0, m_firstFree);

        m_map = newMap;
      }
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/NodeSet.java" startline="1109" startcolumn="5" endline="1123" endcolumn="5">
if (null == m_map)
    {
      m_map = new Node[m_blocksize];
      m_mapSize = m_blocksize;
    }
    else if ((m_firstFree + 1) &gt;= m_mapSize)
    {
      m_mapSize += m_blocksize;

      Node newMap[] = new Node[m_mapSize];

      System.arraycopy(m_map, 0, newMap, 0, m_firstFree + 1);

      m_map = newMap;
    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1238" startcolumn="25" endline="1248" endcolumn="26">
for (int i = 1; i &lt; delimLen; i++) {
                            if (fCurrentEntity.position == fCurrentEntity.count) {
                                fCurrentEntity.position -= i;
                                break OUTER;
                            }
                            c = fCurrentEntity.ch[fCurrentEntity.position++];
                            if (delimiter.charAt(i) != c) {
                                fCurrentEntity.position--;
                                break;
                            }
                         }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1347" startcolumn="21" endline="1357" endcolumn="21">
for (int i = 1; i &lt; delimLen; i++) {
                        if (fCurrentEntity.position == fCurrentEntity.count) {
                            fCurrentEntity.position -= i;
                            break OUTER;
                        }
                        c = fCurrentEntity.ch[fCurrentEntity.position++];
                        if (delimiter.charAt(i) != c) {
                            fCurrentEntity.position -= i;
                            break;
                        }
                    }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1275" startcolumn="25" endline="1285" endcolumn="25">
for (int i = 1; i &lt; delimLen; i++) {
                            if (fCurrentEntity.position == fCurrentEntity.count) {
                                fCurrentEntity.position -= i;
                                break OUTER;
                            }
                            c = fCurrentEntity.ch[fCurrentEntity.position++];
                            if (delimiter.charAt(i) != c) {
                                fCurrentEntity.position--;
                                break;
                            }
                        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1347" startcolumn="21" endline="1357" endcolumn="21">
for (int i = 1; i &lt; delimLen; i++) {
                        if (fCurrentEntity.position == fCurrentEntity.count) {
                            fCurrentEntity.position -= i;
                            break OUTER;
                        }
                        c = fCurrentEntity.ch[fCurrentEntity.position++];
                        if (delimiter.charAt(i) != c) {
                            fCurrentEntity.position -= i;
                            break;
                        }
                    }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="213" startcolumn="9" endline="230" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return true;
                }
                else {
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                 return true;
                 */
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="100" startcolumn="9" endline="118" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return entry.symbol;
                }
                else{
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                symbolAsArray = entry.characters;
                return entry.symbol;
                 */
            }
        }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java" startline="680" startcolumn="17" endline="694" endcolumn="17">
if (value instanceof LSResourceResolver || value == null) {
                    try {
                        setEntityResolver(new DOMEntityResolverWrapper((LSResourceResolver) value));
                    }
                    catch (XMLConfigurationException e) {}
                }
                else {
                    // REVISIT: type mismatch
                    String msg =
                        DOMMessageFormatter.formatMessage(
                            DOMMessageFormatter.DOM_DOMAIN,
                            "TYPE_MISMATCH_ERR",
                            new Object[] { name });
                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParserImpl.java" startline="494" startcolumn="17" endline="508" endcolumn="17">
if (value instanceof LSResourceResolver || value == null) {
                    try {
                        fConfiguration.setProperty (ENTITY_RESOLVER, new DOMEntityResolverWrapper ((LSResourceResolver) value));
                    }
                    catch (XMLConfigurationException e) {}
                }
                else {
                    // REVISIT: type mismatch
                    String msg =
                    DOMMessageFormatter.formatMessage (
                    DOMMessageFormatter.DOM_DOMAIN,
                    "TYPE_MISMATCH_ERR",
                    new Object[] { name });
                    throw new DOMException (DOMException.TYPE_MISMATCH_ERR, msg);
                }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDSimpleTypeTraverser.java" startline="302" startcolumn="17" endline="311" endcolumn="17">
if (dv != null) {
                    // if it's a union, expand it
                    if (dv.getVariety() == XSSimpleType.VARIETY_UNION) {
                        dvs = dv.getMemberTypes();
                        for (int j = 0; j &lt; dvs.getLength(); j++)
                            dTValidators.add(dvs.item(j));
                    } else {
                        dTValidators.add(dv);
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDSimpleTypeTraverser.java" startline="336" startcolumn="21" endline="347" endcolumn="21">
if (dv != null) {
                        // if it's a union, expand it
                        if (dv.getVariety() == XSSimpleType.VARIETY_UNION) {
                            dvs = dv.getMemberTypes();
                            for (int j = 0; j &lt; dvs.getLength(); j++) {
                                dTValidators.add(dvs.item(j));
                            }
                        }
                        else {
                            dTValidators.add(dv);
                        }
                    }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="440" startcolumn="9" endline="452" endcolumn="9">
if (fContentHandler != null) {
            try {
                fTypeInfoProvider.beginEndElement(augs);
                fContentHandler.endElement((element.uri != null) ? element.uri : XMLSymbols.EMPTY_STRING,
                        element.localpart, element.rawname);
            }
            catch (SAXException e) {
                throw new XNIException(e);
            }
            finally {
                fTypeInfoProvider.finishEndElement();
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="377" startcolumn="9" endline="389" endcolumn="9">
if (fContentHandler != null) {
            try {
                fTypeInfoProvider.beginStartElement(augs, attributes);
                fContentHandler.startElement((element.uri != null) ? element.uri : XMLSymbols.EMPTY_STRING,
                        element.localpart, element.rawname, fAttrAdapter);
            }
            catch (SAXException e) {
                throw new XNIException(e);
            }
            finally {
                fTypeInfoProvider.finishStartElement();
            }
        }
</source>
    </clone>
    <clone nlines="19" distance="2">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="100" startcolumn="16" endline="118" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return entry.symbol;
                }
                else{
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                symbolAsArray = entry.characters;
                return entry.symbol;
                 */
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="100" startcolumn="9" endline="118" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                if(symbol.regionMatches(0,entry.symbol,0,length)){
                    return entry.symbol;
                }
                else{
                    continue OUTER;
                }
                /**
                for (int i = 0; i &lt; length; i++) {
                    if (symbol.charAt(i) != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                symbolAsArray = entry.characters;
                return entry.symbol;
                 */
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1442" startcolumn="9" endline="1453" endcolumn="9">
if (testChar == '%') {
          if (index+2 &gt;= end ||
              !isHex(p_userinfo.charAt(index+1)) ||
              !isHex(p_userinfo.charAt(index+2))) {
            throw new MalformedURIException(
                  "Userinfo contains invalid escape sequence!");
          }
        }
        else if (!isUserinfoCharacter(testChar)) {
          throw new MalformedURIException(
                  "Userinfo contains invalid character:"+testChar);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1127" startcolumn="17" endline="1144" endcolumn="17">
if (testChar == '%') {
                    if (index+2 &gt;= end ||
                    !isHex(p_uriSpec.charAt(index+1)) ||
                    !isHex(p_uriSpec.charAt(index+2))) {
                        throw new MalformedURIException(
                            "Opaque part contains invalid escape sequence!");
                    }
                    index += 2;
                }
                // If the scheme specific part is opaque, it can contain '['
                // and ']'. uric_no_slash wasn't modified by RFC 2732, which
                // I've interpreted as an error in the spec, since the
                // production should be equivalent to (uric - '/'), and uric
                // contains '[' and ']'. - mrglavas
                else if (!isURICharacter(testChar)) {
                    throw new MalformedURIException(
                        "Opaque part contains invalid character: " + testChar);
                }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1442" startcolumn="9" endline="1453" endcolumn="9">
if (testChar == '%') {
          if (index+2 &gt;= end ||
              !isHex(p_userinfo.charAt(index+1)) ||
              !isHex(p_userinfo.charAt(index+2))) {
            throw new MalformedURIException(
                  "Userinfo contains invalid escape sequence!");
          }
        }
        else if (!isUserinfoCharacter(testChar)) {
          throw new MalformedURIException(
                  "Userinfo contains invalid character:"+testChar);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1160" startcolumn="9" endline="1172" endcolumn="9">
if (testChar == '%') {
           if (index+2 &gt;= end ||
              !isHex(p_uriSpec.charAt(index+1)) ||
              !isHex(p_uriSpec.charAt(index+2))) {
            throw new MalformedURIException(
                    "Query string contains invalid escape sequence!");
           }
           index += 2;
        }
        else if (!isURICharacter(testChar)) {
          throw new MalformedURIException(
                "Query string contains invalid character: " + testChar);
        }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1442" startcolumn="9" endline="1453" endcolumn="9">
if (testChar == '%') {
          if (index+2 &gt;= end ||
              !isHex(p_userinfo.charAt(index+1)) ||
              !isHex(p_userinfo.charAt(index+2))) {
            throw new MalformedURIException(
                  "Userinfo contains invalid escape sequence!");
          }
        }
        else if (!isUserinfoCharacter(testChar)) {
          throw new MalformedURIException(
                  "Userinfo contains invalid character:"+testChar);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1185" startcolumn="9" endline="1197" endcolumn="9">
if (testChar == '%') {
           if (index+2 &gt;= end ||
              !isHex(p_uriSpec.charAt(index+1)) ||
              !isHex(p_uriSpec.charAt(index+2))) {
            throw new MalformedURIException(
                    "Fragment contains invalid escape sequence!");
           }
           index += 2;
        }
        else if (!isURICharacter(testChar)) {
          throw new MalformedURIException(
                "Fragment contains invalid character: "+testChar);
        }
</source>
    </clone>
    <clone nlines="20" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="915" startcolumn="17" endline="938" endcolumn="17">
if (!fTableOfIDAttributeNames.containsKey(elementName)) {
                    fTableOfIDAttributeNames.put(elementName, attributeName);
                }
                else {
                        //we should not report an error, when there is duplicate attribute definition for given element type
                        //according to XML 1.0 spec, When more than one definition is provided for the same attribute of a given
                        //element type, the first declaration is binding and later declaration are *ignored*. So processor should
                        //ignore the second declarations, however an application would be warned of the duplicate attribute defintion
                        // if http://apache.org/xml/features/validation/warn-on-duplicate-attdef feature is set to true,
                        // one typical case where this could be a  problem, when any XML file
                        // provide the ID type information through internal subset so that it is available to the parser which read
                        //only internal subset. Now that attribute declaration(ID Type) can again be part of external parsed entity
                        //referenced. At that time if parser doesn't make this distinction it will throw an error for VC One ID per
                        //Element Type, which (second defintion) actually should be ignored. Application behavior may differ on the
                        //basis of error or warning thrown. - nb.

                        if(!duplicateAttributeDef){
                                String previousIDAttributeName = (String)fTableOfIDAttributeNames.get( elementName );//rule a)
                                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_MORE_THAN_ONE_ID_ATTRIBUTE",
                                               new Object[]{ elementName, previousIDAttributeName, attributeName},
                                               XMLErrorReporter.SEVERITY_ERROR);
                        }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="952" startcolumn="17" endline="971" endcolumn="17">
if (fTableOfNOTATIONAttributeNames.containsKey( elementName ) == false) {
                    fTableOfNOTATIONAttributeNames.put( elementName, attributeName);
                }
                else {
                        //we should not report an error, when there is duplicate attribute definition for given element type
                        //according to XML 1.0 spec, When more than one definition is provided for the same attribute of a given
                        //element type, the first declaration is binding and later declaration are *ignored*. So processor should
                        //ignore the second declarations, however an application would be warned of the duplicate attribute definition
                        // if http://apache.org/xml/features/validation/warn-on-duplicate-attdef feature is set to true, Application behavior may differ on the basis of error or
                        //warning thrown. - nb.

                        if(!duplicateAttributeDef){

                                String previousNOTATIONAttributeName = (String) fTableOfNOTATIONAttributeNames.get( elementName );
                                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_MORE_THAN_ONE_NOTATION_ATTRIBUTE",
                                               new Object[]{ elementName, previousNOTATIONAttributeName, attributeName},
                                               XMLErrorReporter.SEVERITY_ERROR);
                         }
                }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="1618" startcolumn="17" endline="1629" endcolumn="17">
while (node != -1) {
                    short nodeType = fDeferredDocumentImpl.getNodeType (node, false);
                    if (nodeType == Node.ENTITY_NODE) {
                        String nodeName =
                        fDeferredDocumentImpl.getNodeName (node, false);
                        if (nodeName.equals (name)) {
                            fDeferredEntityDecl = node;
                            break;
                        }
                    }
                    node = fDeferredDocumentImpl.getRealPrevSibling (node, false);
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="1974" startcolumn="13" endline="1984" endcolumn="13">
while (node != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (node, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (node, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                node = fDeferredDocumentImpl.getRealPrevSibling (node, false);
            }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="1618" startcolumn="17" endline="1629" endcolumn="17">
while (node != -1) {
                    short nodeType = fDeferredDocumentImpl.getNodeType (node, false);
                    if (nodeType == Node.ENTITY_NODE) {
                        String nodeName =
                        fDeferredDocumentImpl.getNodeName (node, false);
                        if (nodeName.equals (name)) {
                            fDeferredEntityDecl = node;
                            break;
                        }
                    }
                    node = fDeferredDocumentImpl.getRealPrevSibling (node, false);
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2067" startcolumn="13" endline="2077" endcolumn="13">
while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getRealPrevSibling (nodeIndex, false);
            }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="1618" startcolumn="17" endline="1629" endcolumn="17">
while (node != -1) {
                    short nodeType = fDeferredDocumentImpl.getNodeType (node, false);
                    if (nodeType == Node.ENTITY_NODE) {
                        String nodeName =
                        fDeferredDocumentImpl.getNodeName (node, false);
                        if (nodeName.equals (name)) {
                            fDeferredEntityDecl = node;
                            break;
                        }
                    }
                    node = fDeferredDocumentImpl.getRealPrevSibling (node, false);
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2210" startcolumn="13" endline="2220" endcolumn="13">
while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getRealPrevSibling (nodeIndex, false);
            }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="1618" startcolumn="17" endline="1629" endcolumn="17">
while (node != -1) {
                    short nodeType = fDeferredDocumentImpl.getNodeType (node, false);
                    if (nodeType == Node.ENTITY_NODE) {
                        String nodeName =
                        fDeferredDocumentImpl.getNodeName (node, false);
                        if (nodeName.equals (name)) {
                            fDeferredEntityDecl = node;
                            break;
                        }
                    }
                    node = fDeferredDocumentImpl.getRealPrevSibling (node, false);
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2285" startcolumn="13" endline="2295" endcolumn="13">
while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.NOTATION_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getPrevSibling (nodeIndex, false);
            }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java" startline="850" startcolumn="20" endline="861" endcolumn="13">
if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
            || eventType == XMLStreamConstants.COMMENT) {
                // skipping
            } else if(eventType == XMLStreamConstants.END_DOCUMENT) {
                throw new XMLStreamException("unexpected end of document when reading element text content");
            } else if(eventType == XMLStreamConstants.START_ELEMENT) {
                throw new XMLStreamException(
                "elementGetText() function expects text only elment but START_ELEMENT was encountered.", getLocation());
            } else {
                throw new XMLStreamException(
                "Unexpected event type "+ eventType, getLocation());
            }
</source>
        <source file="com/sun/xml/internal/stream/XMLEventReaderImpl.java" startline="164" startcolumn="22" endline="174" endcolumn="17">
if(type == XMLEvent.COMMENT || type == XMLEvent.PROCESSING_INSTRUCTION){
                    //ignore
                } else if(type == XMLEvent.END_DOCUMENT) {
                    throw new XMLStreamException("unexpected end of document when reading element text content");
                } else if(type == XMLEvent.START_ELEMENT) {
                    throw new XMLStreamException(
                    "elementGetText() function expects text only elment but START_ELEMENT was encountered.", event.getLocation());
                } else {
                    throw new XMLStreamException(
                    "Unexpected event type "+ type, event.getLocation());
                }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDHandler.java" startline="3926" startcolumn="13" endline="3936" endcolumn="127">
if (attGroupRefsCount &gt; 1) {
                reportSchemaError("src-redefine.7.1", new Object []{new Integer(attGroupRefsCount)}, child);
            }
            else if (attGroupRefsCount == 1) {
                //                return true;
            }
            else
                if (currSchema.fTargetNamespace == null)
                    fRedefinedRestrictedAttributeGroupRegistry.put(processedBaseName, ","+newName);
                else
                    fRedefinedRestrictedAttributeGroupRegistry.put(processedBaseName, currSchema.fTargetNamespace+","+newName);
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDHandler.java" startline="3942" startcolumn="13" endline="3953" endcolumn="13">
if (groupRefsCount &gt; 1) {
                reportSchemaError("src-redefine.6.1.1", new Object []{new Integer(groupRefsCount)}, child);
            }
            else if (groupRefsCount == 1) {
                //                return true;
            }
            else {
                if (currSchema.fTargetNamespace == null)
                    fRedefinedRestrictedGroupRegistry.put(processedBaseName, ","+newName);
                else
                    fRedefinedRestrictedGroupRegistry.put(processedBaseName, currSchema.fTargetNamespace+","+newName);
            }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="247" startcolumn="9" endline="257" endcolumn="9">
try {
            return fComponentManager.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "feature-not-recognized" : "feature-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="310" startcolumn="9" endline="320" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="247" startcolumn="9" endline="257" endcolumn="9">
try {
            return fComponentManager.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "feature-not-recognized" : "feature-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="228" startcolumn="9" endline="238" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="292" startcolumn="9" endline="302" endcolumn="9">
try {
            return fComponentManager.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="310" startcolumn="9" endline="320" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="292" startcolumn="9" endline="302" endcolumn="9">
try {
            return fComponentManager.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="228" startcolumn="9" endline="238" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="160" startcolumn="9" endline="170" endcolumn="9">
try {
            return fComponentManager.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "feature-not-recognized" : "feature-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="310" startcolumn="9" endline="320" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="160" startcolumn="9" endline="170" endcolumn="9">
try {
            return fComponentManager.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "feature-not-recognized" : "feature-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="228" startcolumn="9" endline="238" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="210" startcolumn="9" endline="220" endcolumn="9">
try {
            return fComponentManager.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorHandlerImpl.java" startline="310" startcolumn="9" endline="320" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="210" startcolumn="9" endline="220" endcolumn="9">
try {
            return fComponentManager.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/ValidatorImpl.java" startline="228" startcolumn="9" endline="238" endcolumn="9">
try {
            fComponentManager.setProperty(name, object);
        }
        catch (XMLConfigurationException e) {
            final String identifier = e.getIdentifier();
            final String key = e.getType() == Status.NOT_RECOGNIZED ?
                    "property-not-recognized" : "property-not-supported";
            throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fComponentManager.getLocale(),
                    key, new Object [] {identifier}));
        }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="779" startcolumn="7" endline="793" endcolumn="7">
if (nodeType &gt;= DTM.NTYPES) {
        if (nodeType == expType) {
          return returnNode(node);
        }
      } else {
        if (expType &lt; DTM.NTYPES) {
          if (expType == nodeType) {
            return returnNode(node);
          }
        } else {
          if (m_expandedNameTable.getType(expType) == nodeType) {
            return returnNode(node);
          }
        }
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="382" startcolumn="7" endline="398" endcolumn="7">
if (_nodeType &gt;= DTM.NTYPES) {
        if (_nodeType == expType) {
          return returnNode(node);
        }
      }
      else {
        if (expType &lt; DTM.NTYPES) {
          if (expType == _nodeType) {
            return returnNode(node);
          }
        }
        else {
          if (m_extendedTypes[expType].getNodeType() == _nodeType) {
            return returnNode(node);
          }
        }
      }
</source>
    </clone>
    <clone nlines="17" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1458" startcolumn="18" endline="1474" endcolumn="11">
if (node &gt;= _stack[_sp]) {
            if (--_sp &lt; 0) {
              node = NULL;
              break;
            }
          } else {
            expType = _exptype(node);
            if (expType &lt; DTM.NTYPES) {
              if (expType == nodeType) {
                break;
              }
            } else {
              if (m_expandedNameTable.getType(expType) == nodeType) {
                break;
              }
            }
          }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="1017" startcolumn="16" endline="1035" endcolumn="11">
if (node &gt;= _stack[_sp]) {
            if (--_sp &lt; 0) {
              node = NULL;
              break;
            }
          }
          else {
            expType = _exptype2(node);
            if (expType &lt; DTM.NTYPES) {
              if (expType == nodeType) {
                break;
              }
            }
            else {
              if (m_extendedTypes[expType].getNodeType() == nodeType) {
                break;
              }
            }
          }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/KeyCall.java" startline="143" startcolumn="9" endline="154" endcolumn="9">
if (_name != null) {
            final Type nameType = _name.typeCheck(stable);

            if (_name instanceof LiteralExpr) {
                final LiteralExpr literal = (LiteralExpr) _name;
                _resolvedQName =
                    getParser().getQNameIgnoreDefaultNs(literal.getValue());
            }
            else if (nameType instanceof StringType == false) {
                _name = new CastExpr(_name, Type.String);
            }
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/FormatNumberCall.java" startline="71" startcolumn="9" endline="82" endcolumn="9">
if (argumentCount() == 3) {
            final Type tname = _name.typeCheck(stable);

            if (_name instanceof LiteralExpr) {
                final LiteralExpr literal = (LiteralExpr) _name;
                _resolvedQName =
                    getParser().getQNameIgnoreDefaultNs(literal.getValue());
            }
            else if (tname instanceof StringType == false) {
                _name = new CastExpr(_name, Type.String);
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/DocumentImpl.java" startline="720" startcolumn="21" endline="731" endcolumn="21">
for (int i = 0; i &lt; nlsize; i++) {
                        LEntry le = (LEntry) nl.elementAt(i);
                        if (le.useCapture &amp;&amp; le.type.equals(evt.type) &amp;&amp;
                            nodeListeners.contains(le)) {
                            try {
                                le.listener.handleEvent(evt);
                            }
                            catch (Exception e) {
                                // All exceptions are ignored.
                            }
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DocumentImpl.java" startline="749" startcolumn="17" endline="760" endcolumn="17">
for (int i = 0; i &lt; nlsize; i++) {
                    LEntry le = (LEntry) nl.elementAt(i);
                    if (!le.useCapture &amp;&amp; le.type.equals(evt.type) &amp;&amp;
                        nodeListeners.contains(le)) {
                        try {
                            le.listener.handleEvent(evt);
                        }
                        catch (Exception e) {
                            // All exceptions are ignored.
                        }
                    }
                }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/DocumentImpl.java" startline="720" startcolumn="21" endline="731" endcolumn="21">
for (int i = 0; i &lt; nlsize; i++) {
                        LEntry le = (LEntry) nl.elementAt(i);
                        if (le.useCapture &amp;&amp; le.type.equals(evt.type) &amp;&amp;
                            nodeListeners.contains(le)) {
                            try {
                                le.listener.handleEvent(evt);
                            }
                            catch (Exception e) {
                                // All exceptions are ignored.
                            }
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DocumentImpl.java" startline="783" startcolumn="25" endline="794" endcolumn="25">
for (int i = 0; i &lt; nlsize; i++) {
                            LEntry le = (LEntry) nl.elementAt(i);
                            if (!le.useCapture &amp;&amp; le.type.equals(evt.type) &amp;&amp;
                                nodeListeners.contains(le)) {
                                try {
                                    le.listener.handleEvent(evt);
                                }
                                catch (Exception e) {
                                    // All exceptions are ignored.
                                }
                            }
                        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/SoftReferenceGrammarPool.java" startline="192" startcolumn="13" endline="201" endcolumn="13">
for (Entry entry = fGrammars[index]; entry != null; entry = entry.next) {
                Grammar tempGrammar = (Grammar) entry.grammar.get();
                /** If the soft reference has been cleared, remove this entry from the pool. */
                if (tempGrammar == null) {
                    removeEntry(entry);
                }
                else if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                    return tempGrammar;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/SoftReferenceGrammarPool.java" startline="242" startcolumn="13" endline="251" endcolumn="13">
for (Entry entry = fGrammars[index]; entry != null ; entry = entry.next) {
                Grammar tempGrammar = (Grammar) entry.grammar.get();
                /** If the soft reference has been cleared, remove this entry from the pool. */
                if (tempGrammar == null) {
                    removeEntry(entry);
                }
                else if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                    return true;
                }
            }
</source>
    </clone>
    <clone nlines="18" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="384" startcolumn="9" endline="401" endcolumn="9">
try {
            // Only report startEntity if this entity was actually read.
            if (augs != null &amp;&amp; Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // report skipped entity to content handler
                if (fContentHandler != null) {
                    fContentHandler.skippedEntity(name);
                }
            }
            else {
                // SAX2 extension
                if (fLexicalHandler != null) {
                    fLexicalHandler.startEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractSAXParser.java" startline="813" startcolumn="9" endline="830" endcolumn="9">
try {
            // Only report startEntity if this entity was actually read.
            if (augs != null &amp;&amp; Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {
                // report skipped entity to content handler
                if (fContentHandler != null) {
                    fContentHandler.skippedEntity(name);
                }
            }
            else {
                // SAX2 extension
                if (fLexicalHandler != null &amp;&amp; fLexicalHandlerParameterEntities) {
                    fLexicalHandler.startEntity(name);
                }
            }
        }
        catch (SAXException e) {
            throw new XNIException(e);
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/CallTemplate.java" startline="79" startcolumn="9" endline="88" endcolumn="9">
if (name.length() &gt; 0) {
            if (!XML11Char.isXML11ValidQName(name)) {
                ErrorMsg err = new ErrorMsg(ErrorMsg.INVALID_QNAME_ERR, name, this);
                parser.reportError(Constants.ERROR, err);
            }
            _name = parser.getQNameIgnoreDefaultNs(name);
        }
        else {
            reportError(this, parser, ErrorMsg.REQUIRED_ATTR_ERR, "name");
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/WithParam.java" startline="118" startcolumn="9" endline="128" endcolumn="9">
if (name.length() &gt; 0) {
            if (!XML11Char.isXML11ValidQName(name)) {
                ErrorMsg err = new ErrorMsg(ErrorMsg.INVALID_QNAME_ERR, name,
                                            this);
                parser.reportError(Constants.ERROR, err);
            }
            setName(parser.getQNameIgnoreDefaultNs(name));
        }
        else {
            reportError(this, parser, ErrorMsg.REQUIRED_ATTR_ERR, "name");
        }
</source>
    </clone>
    <clone nlines="28" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/ToStream.java" startline="2163" startcolumn="9" endline="2190" endcolumn="9">
if (pushed)
        {
            /* Brian M.: don't know if we really needto do this. The
             * callers of this object should have injected both
             * startPrefixMapping and the attributes.  We are
             * just covering our butt here.
             */
            String name;
            if (EMPTYSTRING.equals(prefix))
            {
                name = "xmlns";
                addAttributeAlways(XMLNS_URI, name, name, "CDATA", uri, false);
            }
            else
            {
                if (!EMPTYSTRING.equals(uri))
                    // hack for XSLTC attribset16 test
                { // that maps ns1 prefix to "" URI
                    name = "xmlns:" + prefix;

                    /* for something like xmlns:abc="w3.pretend.org"
                     *  the      uri is the value, that is why we pass it in the
                     * value, or 5th slot of addAttributeAlways()
                     */
                    addAttributeAlways(XMLNS_URI, prefix, name, "CDATA", uri, false);
                }
            }
        }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/ToXMLSAXHandler.java" startline="368" startcolumn="13" endline="395" endcolumn="13">
if (getShouldOutputNSAttr())
            {

                      /* Brian M.: don't know if we really needto do this. The
                       * callers of this object should have injected both
                       * startPrefixMapping and the attributes.  We are
                       * just covering our butt here.
                       */
                      String name;
                    if (EMPTYSTRING.equals(prefix))
                    {
                        name = "xmlns";
                        addAttributeAlways(XMLNS_URI, name, name,"CDATA",uri, false);
                    }
                    else
                {
                        if (!EMPTYSTRING.equals(uri)) // hack for XSLTC attribset16 test
                        {                             // that maps ns1 prefix to "" URI
                            name = "xmlns:" + prefix;

                            /* for something like xmlns:abc="w3.pretend.org"
                                     *  the uri is the value, that is why we pass it in the
                                     * value, or 5th slot of addAttributeAlways()
                                   */
                            addAttributeAlways(XMLNS_URI, prefix, name,"CDATA",uri, false );
                        }
                    }
            }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11NSDocumentScannerImpl.java" startline="914" startcolumn="18" endline="925" endcolumn="13">
if (!fDTDValidator.hasGrammar()) {
                fBindNamespaces = true;
                fPerformValidation = fDTDValidator.validate();
                // re-configure pipeline
                XMLDocumentSource source = fDTDValidator.getDocumentSource();
                XMLDocumentHandler handler = fDTDValidator.getDocumentHandler();
                source.setDocumentHandler(handler);
                if (handler != null)
                    handler.setDocumentSource(source);
                fDTDValidator.setDocumentSource(null);
                fDTDValidator.setDocumentHandler(null);
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNSDocumentScannerImpl.java" startline="625" startcolumn="18" endline="636" endcolumn="13">
if (fNamespaces &amp;&amp; !fDTDValidator.hasGrammar() ) {
                fBindNamespaces = true;
                fPerformValidation = fDTDValidator.validate();
                // re-configure pipeline by removing DTDValidator
                XMLDocumentSource source = fDTDValidator.getDocumentSource();
                XMLDocumentHandler handler = fDTDValidator.getDocumentHandler();
                source.setDocumentHandler(handler);
                if (handler != null)
                    handler.setDocumentSource(source);
                fDTDValidator.setDocumentSource(null);
                fDTDValidator.setDocumentHandler(null);
            }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractIDConstraintTraverser.java" startline="118" startcolumn="9" endline="129" endcolumn="9">
try {
            sXpath = new Selector.XPath(sText, fSymbolTable,
                    schemaDoc.fNamespaceSupport);
            Selector selector = new Selector(sXpath, ic);
            ic.setSelector(selector);
        }
        catch (XPathException e) {
            reportSchemaError(e.getKey(), new Object[]{sText}, sElem);
            // put back attr values...
            fAttrChecker.returnAttrArray(attrValues, schemaDoc);
            return false;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractIDConstraintTraverser.java" startline="175" startcolumn="13" endline="186" endcolumn="13">
try {
                Field.XPath fXpath = new Field.XPath(fText, fSymbolTable,
                        schemaDoc.fNamespaceSupport);
                Field field = new Field(fXpath, ic);
                ic.addField(field);
            }
            catch (XPathException e) {
                reportSchemaError(e.getKey(), new Object[]{fText}, fElem);
                // put back attr values...
                fAttrChecker.returnAttrArray(attrValues, schemaDoc);
                return false;
            }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/bcel/internal/generic/Type.java" startline="216" startcolumn="5" endline="228" endcolumn="5">
try { // Read all declarations between for `(' and `)'
      if(signature.charAt(0) != '(')
        throw new ClassFormatException("Invalid method signature: " + signature);

      index = 1; // current string position

      while(signature.charAt(index) != ')') {
        vec.add(getType(signature.substring(index)));
        index += consumed_chars; // update position
      }
    } catch(StringIndexOutOfBoundsException e) { // Should never occur
      throw new ClassFormatException("Invalid method signature: " + signature);
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/Utility.java" startline="589" startcolumn="5" endline="601" endcolumn="5">
try { // Read all declarations between for `(' and `)'
      if(signature.charAt(0) != '(')
        throw new ClassFormatException("Invalid method signature: " + signature);

      index = 1; // current string position

      while(signature.charAt(index) != ')') {
        vec.add(signatureToString(signature.substring(index), chopit));
        index += consumed_chars; // update position
      }
    } catch(StringIndexOutOfBoundsException e) { // Should never occur
      throw new ClassFormatException("Invalid method signature: " + signature);
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="263" startcolumn="17" endline="272" endcolumn="17">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    addAnnotation(traverseAnnotationDecl(child, attrValues, false, schemaDoc));
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(complexTypeDecl);
                    if (text != null) {
                        addAnnotation(traverseSyntheticAnnotation(complexTypeDecl, text, attrValues, false, schemaDoc));
                    }
                }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="497" startcolumn="13" endline="506" endcolumn="13">
if (DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
                addAnnotation(traverseAnnotationDecl(simpleContent, derivationTypeAttrValues, false, schemaDoc));
                simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(scElement);
                if (text != null) {
                    addAnnotation(traverseSyntheticAnnotation(scElement, text, derivationTypeAttrValues, false, schemaDoc));
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="807" startcolumn="13" endline="816" endcolumn="13">
if (DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
                addAnnotation(traverseAnnotationDecl(complexContent, derivationTypeAttrValues, false, schemaDoc));
                complexContent = DOMUtil.getNextSiblingElement(complexContent);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(complexContent);
                if (text != null) {
                    addAnnotation(traverseSyntheticAnnotation(complexContent, text, derivationTypeAttrValues, false, schemaDoc));
                }
            }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractParticleTraverser.java" startline="73" startcolumn="9" endline="82" endcolumn="9">
if (child !=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(allDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(allDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractParticleTraverser.java" startline="208" startcolumn="9" endline="217" endcolumn="9">
if (child !=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(decl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(decl, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractTraverser.java" startline="509" startcolumn="17" endline="520" endcolumn="16">
if (child != null &amp;&amp;
                    DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    // traverse annotation if any
                    annotation = traverseAnnotationDecl(child, attrs, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(content);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(content, text, attrs, false, schemaDoc);
                    }
               }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeGroupTraverser.java" startline="131" startcolumn="9" endline="140" endcolumn="9">
if (child!=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="93" startcolumn="17" endline="102" endcolumn="17">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(attrDecl);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(attrDecl, text, attrValues, false, schemaDoc);
                    }
                }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="299" startcolumn="9" endline="308" endcolumn="9">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(attrDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(attrDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="173" startcolumn="17" endline="182" endcolumn="17">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(elmDecl);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(elmDecl, text, attrValues, false, schemaDoc);
                    }
                }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="363" startcolumn="9" endline="372" endcolumn="9">
if(child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDGroupTraverser.java" startline="85" startcolumn="9" endline="94" endcolumn="9">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDWildcardTraverser.java" startline="168" startcolumn="13" endline="177" endcolumn="13">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                child = DOMUtil.getNextSiblingElement(child);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(elmNode);
                if (text != null) {
                    annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDNotationTraverser.java" startline="89" startcolumn="9" endline="98" endcolumn="9">
if (content != null &amp;&amp; DOMUtil.getLocalName(content).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(content, attrValues, false, schemaDoc);
            content = DOMUtil.getNextSiblingElement(content);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="311" startcolumn="5" endline="324" endcolumn="5">
if (p_path != null)
    {
      if (p_path.indexOf('?') != -1 &amp;&amp; p_queryString != null)
      {
        throw new MalformedURIException(
          XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_QUERY_STRING_IN_PATH, null)); //"Query string cannot be specified in path and query string!");
      }

      if (p_path.indexOf('#') != -1 &amp;&amp; p_fragment != null)
      {
        throw new MalformedURIException(
          XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_FRAGMENT_STRING_IN_PATH, null)); //"Fragment cannot be specified in both the path and fragment!");
      }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="313" startcolumn="5" endline="326" endcolumn="5">
if (p_path != null)
    {
      if (p_path.indexOf('?') != -1 &amp;&amp; p_queryString != null)
      {
        throw new MalformedURIException(
          Utils.messages.createMessage(MsgKey.ER_NO_QUERY_STRING_IN_PATH, null)); //"Query string cannot be specified in path and query string!");
      }

      if (p_path.indexOf('#') != -1 &amp;&amp; p_fragment != null)
      {
        throw new MalformedURIException(
          Utils.messages.createMessage(MsgKey.ER_NO_FRAGMENT_STRING_IN_PATH, null)); //"Fragment cannot be specified in both the path and fragment!");
      }
    }
</source>
    </clone>
    <clone nlines="15" distance="3">
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1702" startcolumn="13" endline="1716" endcolumn="13">
for (int index = last; index != -1;
                 index = getPrevSibling(index)) {

                ChildNode node = (ChildNode) getNodeObject(index);
                if (lastNode == null) {
                    lastNode = node;
                }
                else {
                    firstNode.previousSibling = node;
                }
                node.ownerNode = a;
                node.isOwned(true);
                node.nextSibling = firstNode;
                firstNode = node;
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DeferredDocumentImpl.java" startline="1751" startcolumn="9" endline="1766" endcolumn="9">
for (int index = getLastChild(nodeIndex);
             index != -1;
             index = getPrevSibling(index)) {

            ChildNode node = (ChildNode) getNodeObject(index);
            if (lastNode == null) {
                lastNode = node;
            }
            else {
                firstNode.previousSibling = node;
            }
            node.ownerNode = p;
            node.isOwned(true);
            node.nextSibling = firstNode;
            firstNode = node;
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/XMLGrammarPoolImpl.java" startline="250" startcolumn="9" endline="259" endcolumn="5">
synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index] ; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                return true;
            }
        }
        return false;
    }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/XMLGrammarPoolImpl.java" startline="198" startcolumn="9" endline="207" endcolumn="5">
synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index] ; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                return entry.grammar;
            }
        }
        return null;
    }
</source>
    </clone>
    <clone nlines="19" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/NodeImpl.java" startline="913" startcolumn="9" endline="931" endcolumn="9">
if (thisDepth &gt; otherDepth) {
          for (int i=0; i&lt;thisDepth - otherDepth; i++)
            thisNode = thisNode.getParentNode();
          // Check if the node we have reached is in fact "otherNode". This can
          // happen in the case of attributes.  In this case, otherNode
          // "precedes" this.
          if (thisNode == otherNode)
            return TREE_POSITION_PRECEDING;
        }

        else {
          for (int i=0; i&lt;otherDepth - thisDepth; i++)
            otherNode = otherNode.getParentNode();
          // Check if the node we have reached is in fact "thisNode".  This can
          // happen in the case of attributes.  In this case, otherNode
          // "follows" this.
          if (otherNode == thisNode)
            return TREE_POSITION_FOLLOWING;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeImpl.java" startline="1184" startcolumn="9" endline="1204" endcolumn="9">
if (thisDepth &gt; otherDepth) {
          for (int i=0; i&lt;thisDepth - otherDepth; i++)
            thisNode = thisNode.getParentNode();
          // Check if the node we have reached is in fact "otherNode". This can
          // happen in the case of attributes.  In this case, otherNode
          // "precedes" this.
          if (thisNode == otherNode)
{
            return DOCUMENT_POSITION_PRECEDING;
          }
        }

        else {
          for (int i=0; i&lt;otherDepth - thisDepth; i++)
            otherNode = otherNode.getParentNode();
          // Check if the node we have reached is in fact "thisNode".  This can
          // happen in the case of attributes.  In this case, otherNode
          // "follows" this.
          if (otherNode == thisNode)
            return DOCUMENT_POSITION_FOLLOWING;
        }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1145" startcolumn="13" endline="1157" endcolumn="13">
while ((fCurrentEntity.position &gt;= fCurrentEntity.count - delimLen)
                &amp;&amp; (!bNextEntity))
            {
              System.arraycopy(fCurrentEntity.ch,
                               fCurrentEntity.position,
                               fCurrentEntity.ch,
                               0,
                               fCurrentEntity.count - fCurrentEntity.position);

              bNextEntity = load(fCurrentEntity.count - fCurrentEntity.position, false, false);
              fCurrentEntity.position = 0;
              fCurrentEntity.startPosition = 0;
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1247" startcolumn="13" endline="1259" endcolumn="13">
while ((fCurrentEntity.position &gt; fCurrentEntity.count - delimLen)
                &amp;&amp; (!bNextEntity))
            {
              System.arraycopy(fCurrentEntity.ch,
                               fCurrentEntity.position,
                               fCurrentEntity.ch,
                               0,
                               fCurrentEntity.count - fCurrentEntity.position);

              bNextEntity = load(fCurrentEntity.count - fCurrentEntity.position, false, false);
              fCurrentEntity.position = 0;
              fCurrentEntity.startPosition = 0;
            }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="263" startcolumn="17" endline="272" endcolumn="17">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    addAnnotation(traverseAnnotationDecl(child, attrValues, false, schemaDoc));
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(complexTypeDecl);
                    if (text != null) {
                        addAnnotation(traverseSyntheticAnnotation(complexTypeDecl, text, attrValues, false, schemaDoc));
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="263" startcolumn="17" endline="272" endcolumn="17">
if (DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    addAnnotation(traverseAnnotationDecl(child, attrValues, false, schemaDoc));
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(complexTypeDecl);
                    if (text != null) {
                        addAnnotation(traverseSyntheticAnnotation(complexTypeDecl, text, attrValues, false, schemaDoc));
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="497" startcolumn="13" endline="506" endcolumn="13">
if (DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
                addAnnotation(traverseAnnotationDecl(simpleContent, derivationTypeAttrValues, false, schemaDoc));
                simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(scElement);
                if (text != null) {
                    addAnnotation(traverseSyntheticAnnotation(scElement, text, derivationTypeAttrValues, false, schemaDoc));
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="497" startcolumn="13" endline="506" endcolumn="13">
if (DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
                addAnnotation(traverseAnnotationDecl(simpleContent, derivationTypeAttrValues, false, schemaDoc));
                simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(scElement);
                if (text != null) {
                    addAnnotation(traverseSyntheticAnnotation(scElement, text, derivationTypeAttrValues, false, schemaDoc));
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="807" startcolumn="13" endline="816" endcolumn="13">
if (DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
                addAnnotation(traverseAnnotationDecl(complexContent, derivationTypeAttrValues, false, schemaDoc));
                complexContent = DOMUtil.getNextSiblingElement(complexContent);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(complexContent);
                if (text != null) {
                    addAnnotation(traverseSyntheticAnnotation(complexContent, text, derivationTypeAttrValues, false, schemaDoc));
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="807" startcolumn="13" endline="816" endcolumn="13">
if (DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
                addAnnotation(traverseAnnotationDecl(complexContent, derivationTypeAttrValues, false, schemaDoc));
                complexContent = DOMUtil.getNextSiblingElement(complexContent);
            }
            else {
                String text = DOMUtil.getSyntheticAnnotation(complexContent);
                if (text != null) {
                    addAnnotation(traverseSyntheticAnnotation(complexContent, text, derivationTypeAttrValues, false, schemaDoc));
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xml/internal/res/XMLMessages.java" startline="126" startcolumn="7" endline="146" endcolumn="7">
try
      {

        // Do this to keep format from crying.
        // This is better than making a bunch of conditional
        // code all over the place.
        int n = args.length;

        for (int i = 0; i &lt; n; i++)
        {
          if (null == args[i])
            args[i] = "";
        }

        fmsg = java.text.MessageFormat.format(msg, args);
      }
      catch (Exception e)
      {
        fmsg = fResourceBundle.getString(FORMAT_FAILED);
        fmsg += " " + msg;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/res/XPATHMessages.java" startline="121" startcolumn="13" endline="138" endcolumn="13">
try {

                // Do this to keep format from crying.
                // This is better than making a bunch of conditional
                // code all over the place.
                int n = args.length;

                for (int i = 0; i &lt; n; i++) {
                    if (null == args[i]) {
                        args[i] = "";
                    }
                }

                fmsg = java.text.MessageFormat.format(msg, args);
            } catch (Exception e) {
                fmsg = fResourceBundle.getString(XPATHErrorResources.FORMAT_FAILED);
                fmsg += " " + msg;
            }
</source>
    </clone>
    <clone nlines="13" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="509" startcolumn="21" endline="521" endcolumn="21">
if (name.equals(fStandaloneSymbol)) {
                        if (!sawSpace) {
                            reportFatalError("SpaceRequiredBeforeStandalone",
                                    null);
                        }
                        standalone = fString.toString();
                        state = STATE_DONE;
                        if (!standalone.equals("yes") &amp;&amp; !standalone.equals("no")) {
                            reportFatalError("SDDeclInvalid",  new Object[] {standalone});
                        }
                    } else {
                        reportFatalError("SDDeclNameInvalid", null);
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="493" startcolumn="28" endline="505" endcolumn="21">
if (!scanningTextDecl &amp;&amp; name.equals(fStandaloneSymbol)) {
                        if (!sawSpace) {
                            reportFatalError("SpaceRequiredBeforeStandalone",
                                    null);
                        }
                        standalone = fString.toString();
                        state = STATE_DONE;
                        if (!standalone.equals("yes") &amp;&amp; !standalone.equals("no")) {
                            reportFatalError("SDDeclInvalid", new Object[] {standalone});
                        }
                    } else {
                        reportFatalError("EncodingDeclRequired", null);
                    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractParticleTraverser.java" startline="73" startcolumn="9" endline="82" endcolumn="9">
if (child !=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(allDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(allDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractParticleTraverser.java" startline="73" startcolumn="9" endline="82" endcolumn="9">
if (child !=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(allDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(allDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractParticleTraverser.java" startline="208" startcolumn="9" endline="217" endcolumn="9">
if (child !=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(decl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(decl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractParticleTraverser.java" startline="208" startcolumn="9" endline="217" endcolumn="9">
if (child !=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(decl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(decl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractTraverser.java" startline="509" startcolumn="17" endline="520" endcolumn="16">
if (child != null &amp;&amp;
                    DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    // traverse annotation if any
                    annotation = traverseAnnotationDecl(child, attrs, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(content);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(content, text, attrs, false, schemaDoc);
                    }
               }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAbstractTraverser.java" startline="509" startcolumn="17" endline="520" endcolumn="16">
if (child != null &amp;&amp;
                    DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    // traverse annotation if any
                    annotation = traverseAnnotationDecl(child, attrs, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(content);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(content, text, attrs, false, schemaDoc);
                    }
               }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeGroupTraverser.java" startline="131" startcolumn="9" endline="140" endcolumn="9">
if (child!=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeGroupTraverser.java" startline="131" startcolumn="9" endline="140" endcolumn="9">
if (child!=null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="93" startcolumn="17" endline="102" endcolumn="17">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(attrDecl);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(attrDecl, text, attrValues, false, schemaDoc);
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="93" startcolumn="17" endline="102" endcolumn="17">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(attrDecl);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(attrDecl, text, attrValues, false, schemaDoc);
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="299" startcolumn="9" endline="308" endcolumn="9">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(attrDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(attrDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDAttributeTraverser.java" startline="299" startcolumn="9" endline="308" endcolumn="9">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(attrDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(attrDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="173" startcolumn="17" endline="182" endcolumn="17">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(elmDecl);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(elmDecl, text, attrValues, false, schemaDoc);
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="173" startcolumn="17" endline="182" endcolumn="17">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
                    annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
                    child = DOMUtil.getNextSiblingElement(child);
                }
                else {
                    String text = DOMUtil.getSyntheticAnnotation(elmDecl);
                    if (text != null) {
                        annotation = traverseSyntheticAnnotation(elmDecl, text, attrValues, false, schemaDoc);
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="363" startcolumn="9" endline="372" endcolumn="9">
if(child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDElementTraverser.java" startline="363" startcolumn="9" endline="372" endcolumn="9">
if(child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmDecl);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmDecl, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDGroupTraverser.java" startline="85" startcolumn="9" endline="94" endcolumn="9">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDGroupTraverser.java" startline="85" startcolumn="9" endline="94" endcolumn="9">
if (child != null &amp;&amp; DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(child, attrValues, false, schemaDoc);
            child = DOMUtil.getNextSiblingElement(child);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDNotationTraverser.java" startline="89" startcolumn="9" endline="98" endcolumn="9">
if (content != null &amp;&amp; DOMUtil.getLocalName(content).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(content, attrValues, false, schemaDoc);
            content = DOMUtil.getNextSiblingElement(content);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="372" startcolumn="9" endline="381" endcolumn="9">
if (simpleContent != null &amp;&amp; DOMUtil.getLocalName(simpleContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(simpleContent, simpleContentAttrValues, false, schemaDoc));
            simpleContent = DOMUtil.getNextSiblingElement(simpleContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(simpleContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(simpleContentElement, text, simpleContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDNotationTraverser.java" startline="89" startcolumn="9" endline="98" endcolumn="9">
if (content != null &amp;&amp; DOMUtil.getLocalName(content).equals(SchemaSymbols.ELT_ANNOTATION)) {
            annotation = traverseAnnotationDecl(content, attrValues, false, schemaDoc);
            content = DOMUtil.getNextSiblingElement(content);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(elmNode);
            if (text != null) {
                annotation = traverseSyntheticAnnotation(elmNode, text, attrValues, false, schemaDoc);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSDComplexTypeTraverser.java" startline="713" startcolumn="9" endline="722" endcolumn="9">
if (complexContent != null &amp;&amp; DOMUtil.getLocalName(complexContent).equals(SchemaSymbols.ELT_ANNOTATION)) {
            addAnnotation(traverseAnnotationDecl(complexContent, complexContentAttrValues, false, schemaDoc));
            complexContent = DOMUtil.getNextSiblingElement(complexContent);
        }
        else {
            String text = DOMUtil.getSyntheticAnnotation(complexContentElement);
            if (text != null) {
                addAnnotation(traverseSyntheticAnnotation(complexContentElement, text, complexContentAttrValues, false, schemaDoc));
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/xml/internal/stream/XMLEntityStorage.java" startline="311" startcolumn="9" endline="324" endcolumn="9">
if (!fEntities.containsKey(name)) {
            Entity entity = new Entity.ExternalEntity(name, new XMLResourceIdentifierImpl(publicId, systemId, baseSystemId, null), notation, fInExternalSubset);
            //                  (fCurrentEntity == null) ? fasle : fCurrentEntity.isEntityDeclInExternalSubset());
            //                  fCurrentEntity.isEntityDeclInExternalSubset());
            fEntities.put(name, entity);
        }
        else{
            if(fWarnDuplicateEntityDef){
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                "MSG_DUPLICATE_ENTITY_DEFINITION",
                new Object[]{ name },
                XMLErrorReporter.SEVERITY_WARNING );
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java" startline="527" startcolumn="9" endline="539" endcolumn="9">
if (!fEntities.containsKey(name)) {
            Entity.ExternalEntity entity = new Entity.ExternalEntity(name,
                    new XMLEntityDescriptionImpl(name, publicId, systemId, baseSystemId, null),
                    notation, fInExternalSubset);
            fEntities.put(name, entity);
        } else{
            if(fWarnDuplicateEntityDef){
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                        "MSG_DUPLICATE_ENTITY_DEFINITION",
                        new Object[]{ name },
                        XMLErrorReporter.SEVERITY_WARNING );
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="791" startcolumn="17" endline="803" endcolumn="17">
for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target [  matchStart ] ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this. match(con, this.operations,
                                                             matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="982" startcolumn="17" endline="994" endcolumn="17">
for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target .charAt(  matchStart ) ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this.match(con, this.operations,
                                                            matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="791" startcolumn="17" endline="803" endcolumn="17">
for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target [  matchStart ] ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this. match(con, this.operations,
                                                             matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1655" startcolumn="17" endline="1667" endcolumn="17">
for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target .setIndex(  matchStart ) ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this.match(con, this.operations,
                                                            matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="249" startcolumn="16" endline="258" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return true;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="142" startcolumn="16" endline="151" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash ==entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return entry.symbol;
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="249" startcolumn="16" endline="258" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return true;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="249" startcolumn="9" endline="258" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return true;
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMNormalizer.java" startline="357" startcolumn="33" endline="367" endcolumn="33">
if (fDocument.isXMLVersionChanged()){
                                    wellformed=CoreDocumentImpl.isXMLName(node.getNodeName() , fDocument.isXML11Version());
                                    if (!wellformed){
                                                            String msg = DOMMessageFormatter.formatMessage(
                                                              DOMMessageFormatter.DOM_DOMAIN,
                                                              "wf-invalid-character-in-node-name",
                                                               new Object[]{"Attr",node.getNodeName()});
                                                            reportDOMError(fErrorHandler, fError, fLocator, msg, DOMError.SEVERITY_ERROR,
                                                                "wf-invalid-character-in-node-name");
                                    }
                                }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMNormalizer.java" startline="930" startcolumn="29" endline="940" endcolumn="25">
if (fDocument.isXMLVersionChanged()){
                                boolean wellformed=CoreDocumentImpl.isXMLName(attr.getNodeName() , fDocument.isXML11Version());
                                if (!wellformed){
                                                        String msg = DOMMessageFormatter.formatMessage(
                                                            DOMMessageFormatter.DOM_DOMAIN,
                                                            "wf-invalid-character-in-node-name",
                                                            new Object[]{"Attribute", attr.getNodeName()});
                                        reportDOMError(fErrorHandler, fError, fLocator, msg, DOMError.SEVERITY_ERROR,
                                            "wf-invalid-character-in-node-name");
                                }
                        }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="249" startcolumn="9" endline="258" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash == entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return true;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="142" startcolumn="9" endline="151" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash ==entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return entry.symbol;
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="534" startcolumn="9" endline="546" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (newAttr.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="940" startcolumn="9" endline="952" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="534" startcolumn="9" endline="546" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (newAttr.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="978" startcolumn="17" endline="990" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="13" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="534" startcolumn="9" endline="546" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (newAttr.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="1022" startcolumn="17" endline="1034" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="794" startcolumn="9" endline="805" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                    throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }
            if (newAttr.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="940" startcolumn="9" endline="952" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="794" startcolumn="9" endline="805" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                    throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }
            if (newAttr.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="978" startcolumn="17" endline="990" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="794" startcolumn="9" endline="805" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                    throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }
            if (newAttr.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="1022" startcolumn="17" endline="1034" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="182" startcolumn="9" endline="191" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="940" startcolumn="9" endline="952" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="182" startcolumn="9" endline="191" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="978" startcolumn="17" endline="990" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="182" startcolumn="9" endline="191" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="1022" startcolumn="17" endline="1034" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="224" startcolumn="9" endline="234" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }

            if(arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="940" startcolumn="9" endline="952" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="224" startcolumn="9" endline="234" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }

            if(arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="978" startcolumn="17" endline="990" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/NamedNodeMapImpl.java" startline="224" startcolumn="9" endline="234" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }

            if(arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="1022" startcolumn="17" endline="1034" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="940" startcolumn="9" endline="952" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/AttrImpl.java" startline="902" startcolumn="9" endline="911" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (oldChild != null &amp;&amp; oldChild.getParentNode() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="978" startcolumn="17" endline="990" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/AttrImpl.java" startline="902" startcolumn="9" endline="911" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (oldChild != null &amp;&amp; oldChild.getParentNode() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/ElementImpl.java" startline="1022" startcolumn="17" endline="1034" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
                                     msg);
            }

            if (at.getOwnerElement() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/AttrImpl.java" startline="902" startcolumn="9" endline="911" endcolumn="9">
if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (oldChild != null &amp;&amp; oldChild.getParentNode() != this) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            }
        }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/DoubleDV.java" startline="86" startcolumn="13" endline="100" endcolumn="13">
if (isPossibleFP(s)) {
                value = Double.parseDouble(s);
            }
            else if ( s.equals("INF") ) {
                value = Double.POSITIVE_INFINITY;
            }
            else if ( s.equals("-INF") ) {
                value = Double.NEGATIVE_INFINITY;
            }
            else if ( s.equals("NaN" ) ) {
                value = Double.NaN;
            }
            else {
                throw new NumberFormatException(s);
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/FloatDV.java" startline="70" startcolumn="13" endline="84" endcolumn="13">
if (DoubleDV.isPossibleFP(s)) {
                value = Float.parseFloat(s);
            }
            else if ( s.equals("INF") ) {
                value = Float.POSITIVE_INFINITY;
            }
            else if ( s.equals("-INF") ) {
                value = Float.NEGATIVE_INFINITY;
            }
            else if ( s.equals("NaN") ) {
                value = Float.NaN;
            }
            else {
                throw new NumberFormatException(s);
            }
</source>
    </clone>
    <clone nlines="10" distance="2">
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="142" startcolumn="16" endline="151" endcolumn="9">
for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash ==entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return entry.symbol;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/SymbolTable.java" startline="142" startcolumn="9" endline="151" endcolumn="9">
OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
            if (length == entry.characters.length &amp;&amp; hash ==entry.hashCode) {
                for (int i = 0; i &lt; length; i++) {
                    if (buffer[offset + i] != entry.characters[i]) {
                        continue OUTER;
                    }
                }
                return entry.symbol;
            }
        }
</source>
    </clone>
    <clone nlines="11" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1691" startcolumn="29" endline="1701" endcolumn="29">
for (j = 0; j &lt; typeList1Length; ++j) {
                                final short primitiveItem1 = convertToPrimitiveKind(itemType.item(j));
                                final short primitiveItem2 = convertToPrimitiveKind(enumItemType.item(j));
                                if (primitiveItem1 != primitiveItem2) {
                                    if (primitiveItem1 == XSConstants.ANYSIMPLETYPE_DT &amp;&amp; primitiveItem2 == XSConstants.STRING_DT ||
                                            primitiveItem1 == XSConstants.STRING_DT &amp;&amp; primitiveItem2 == XSConstants.ANYSIMPLETYPE_DT) {
                                        continue;
                                    }
                                    break;
                                }
                            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3260" startcolumn="13" endline="3270" endcolumn="13">
for (int i = 0; i &lt; typeList1Length; ++i) {
                final short primitiveItem1 = convertToPrimitiveKind(typeList1.item(i));
                final short primitiveItem2 = convertToPrimitiveKind(typeList2.item(i));
                if (primitiveItem1 != primitiveItem2) {
                    if (primitiveItem1 == XSConstants.ANYSIMPLETYPE_DT &amp;&amp; primitiveItem2 == XSConstants.STRING_DT ||
                        primitiveItem1 == XSConstants.STRING_DT &amp;&amp; primitiveItem2 == XSConstants.ANYSIMPLETYPE_DT) {
                        continue;
                    }
                    return false;
                }
            }
</source>
    </clone>
    <clone nlines="25" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="448" startcolumn="13" endline="472" endcolumn="13">
if (isDocumentState()) {
                // If this is the root element handle it differently.
                // If the first root element in the document, serialize
                // the document's DOCTYPE. Space preserving defaults
                // to that of the output format.
                if (! _started)
                    startDocument( tagName );
            } else {
                // For any other element, if first in parent, then
                // close parent's opening tag and use the parnet's
                // space preserving.
                if (state.empty)
                    _printer.printText( '&gt;' );
                // Must leave CData section first
                if (state.inCData) {
                    _printer.printText( "]]&gt;" );
                    state.inCData = false;
                }
                // Indent this element on a new line if the first
                // content of the parent element or immediately
                // following an element.
                if (_indenting &amp;&amp; ! state.preserveSpace &amp;&amp;
                    ( state.empty || state.afterElement || state.afterComment))
                    _printer.breakLine();
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="662" startcolumn="9" endline="688" endcolumn="9">
if (isDocumentState()) {
            // If this is the root element handle it differently.
            // If the first root element in the document, serialize
            // the document's DOCTYPE. Space preserving defaults
            // to that of the output format.

            if (! _started) {
                startDocument( tagName);
            }
        } else {
            // For any other element, if first in parent, then
            // close parent's opening tag and use the parent's
            // space preserving.
            if (state.empty)
                _printer.printText( '&gt;' );
            // Must leave CData section first
            if (state.inCData) {
                _printer.printText( "]]&gt;" );
                state.inCData = false;
            }
            // Indent this element on a new line if the first
            // content of the parent element or immediately
            // following an element.
            if (_indenting &amp;&amp; ! state.preserveSpace &amp;&amp;
                ( state.empty || state.afterElement || state.afterComment))
                _printer.breakLine();
        }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="com/sun/org/apache/regexp/internal/REProgram.java" startline="139" startcolumn="13" endline="155" endcolumn="13">
for (int i = 0; i &lt; lenInstruction; i += RE.nodeSize)
            {
                switch (instruction[i + RE.offsetOpcode])
                {
                    case RE.OP_ANYOF:
                        i += (instruction[i + RE.offsetOpdata] * 2);
                        break;

                    case RE.OP_ATOM:
                        i += instruction[i + RE.offsetOpdata];
                        break;

                    case RE.OP_BACKREF:
                        flags |= OPT_HASBACKREFS;
                        break BackrefScanLoop;
                }
            }
</source>
        <source file="com/sun/org/apache/regexp/internal/REProgram.java" startline="136" startcolumn="13" endline="155" endcolumn="13">
BackrefScanLoop:

            // Check for backreferences
            for (int i = 0; i &lt; lenInstruction; i += RE.nodeSize)
            {
                switch (instruction[i + RE.offsetOpcode])
                {
                    case RE.OP_ANYOF:
                        i += (instruction[i + RE.offsetOpdata] * 2);
                        break;

                    case RE.OP_ATOM:
                        i += instruction[i + RE.offsetOpdata];
                        break;

                    case RE.OP_BACKREF:
                        flags |= OPT_HASBACKREFS;
                        break BackrefScanLoop;
                }
            }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="186" startcolumn="17" endline="197" endcolumn="17">
if (getResultType() != NUMBER_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER, new Object[] {m_xpath.getPatternString(), getTypeString(m_resultType)});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a number"
                } else {
                        try {
                           return m_resultObj.num();
                        } catch (Exception e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
</source>
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="209" startcolumn="17" endline="220" endcolumn="17">
if (getResultType() != STRING_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_STRING, new Object[] {m_xpath.getPatternString(), m_resultObj.getTypeString()});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a string."
                } else {
                        try {
                           return m_resultObj.str();
                        } catch (Exception e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
</source>
    </clone>
    <clone nlines="12" distance="2">
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="227" startcolumn="17" endline="238" endcolumn="17">
if (getResultType() != BOOLEAN_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_BOOLEAN, new Object[] {m_xpath.getPatternString(), getTypeString(m_resultType)});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a boolean."
                } else {
                        try {
                           return m_resultObj.bool();
                        } catch (TransformerException e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
</source>
        <source file="com/sun/org/apache/xpath/internal/domapi/XPathResultImpl.java" startline="209" startcolumn="17" endline="220" endcolumn="17">
if (getResultType() != STRING_TYPE) {
                        String fmsg = XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_STRING, new Object[] {m_xpath.getPatternString(), m_resultObj.getTypeString()});
                        throw new XPathException(XPathException.TYPE_ERR,fmsg);
//              "The XPathResult of XPath expression {0} has an XPathResultType of {1} which cannot be converted to a string."
                } else {
                        try {
                           return m_resultObj.str();
                        } catch (Exception e) {
                                // Type check above should prevent this exception from occurring.
                                throw new XPathException(XPathException.TYPE_ERR,e.getMessage());
                        }
                }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="628" startcolumn="13" endline="637" endcolumn="13">
if (!fInitProperties.isEmpty()) {
                iter = fInitProperties.entrySet().iterator();
                while (iter.hasNext()) {
                    Map.Entry entry = (Map.Entry) iter.next();
                    String name = (String) entry.getKey();
                    Object value = entry.getValue();
                    super.setProperty(name, value);
                }
                fInitProperties.clear();
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaValidatorComponentManager.java" startline="503" startcolumn="9" endline="512" endcolumn="9">
if (!fInitProperties.isEmpty()) {
            Iterator iter = fInitProperties.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                String name = (String) entry.getKey();
                Object value = entry.getValue();
                super.setProperty(name, value);
            }
            fInitProperties.clear();
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaLoader.java" startline="1186" startcolumn="13" endline="1199" endcolumn="13">
if (name.equals(Constants.DOM_VALIDATE) ||
                name.equals(SCHEMA_FULL_CHECKING) ||
                name.equals(VALIDATE_ANNOTATIONS) ||
                name.equals(CONTINUE_AFTER_FATAL_ERROR) ||
                name.equals(ALLOW_JAVA_ENCODINGS) ||
                name.equals(STANDARD_URI_CONFORMANT_FEATURE) ||
                name.equals(GENERATE_SYNTHETIC_ANNOTATIONS) ||
                name.equals(HONOUR_ALL_SCHEMALOCATIONS) ||
                name.equals(NAMESPACE_GROWTH) ||
                name.equals(TOLERATE_DUPLICATES) ||
                name.equals(USE_SERVICE_MECHANISM)) {
                return true;

            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaLoader.java" startline="1202" startcolumn="9" endline="1214" endcolumn="9">
if (name.equals(Constants.DOM_ERROR_HANDLER) ||
            name.equals(Constants.DOM_RESOURCE_RESOLVER) ||
            name.equals(SYMBOL_TABLE) ||
            name.equals(ERROR_REPORTER) ||
            name.equals(ERROR_HANDLER) ||
            name.equals(ENTITY_RESOLVER) ||
            name.equals(XMLGRAMMAR_POOL) ||
            name.equals(SCHEMA_LOCATION) ||
            name.equals(SCHEMA_NONS_LOCATION) ||
            name.equals(JAXP_SCHEMA_SOURCE) ||
            name.equals(SCHEMA_DV_FACTORY)) {
            return true;
        }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="587" startcolumn="21" endline="600" endcolumn="21">
if (_docTypePublicId != null) {
                        _printer.printText( " PUBLIC " );
                        printDoctypeURL( _docTypePublicId );
                        if (_indenting) {
                            _printer.breakLine();
                            for (i = 0 ; i &lt; 18 + rootTagName.length() ; ++i)
                                _printer.printText( " " );
                        } else
                            _printer.printText( " " );
                        printDoctypeURL( _docTypeSystemId );
                    } else {
                        _printer.printText( " SYSTEM " );
                        printDoctypeURL( _docTypeSystemId );
                    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1331" startcolumn="17" endline="1344" endcolumn="17">
if (_docTypePublicId != null) {
                    _printer.printText( " PUBLIC " );
                    printDoctypeURL( _docTypePublicId );
                    if (_indenting) {
                        _printer.breakLine();
                        for (int i = 0 ; i &lt; 18 + name.length() ; ++i)
                            _printer.printText( " " );
                    } else
                        _printer.printText( " " );
                    printDoctypeURL( _docTypeSystemId );
                } else {
                    _printer.printText( " SYSTEM " );
                    printDoctypeURL( _docTypeSystemId );
                }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java" startline="1613" startcolumn="9" endline="1624" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();
            if (suffixLength == Constants.ALLOW_JAVA_ENCODINGS_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.ALLOW_JAVA_ENCODINGS_FEATURE)) {
                fAllowJavaEncodings = state;
            }
            if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {
                fLoadExternalDTD = state;
                return;
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.java" startline="397" startcolumn="9" endline="410" endcolumn="9">
if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {
                fLoadExternalDTD = state;
                return;
            }
            else if (suffixLength == Constants.DISALLOW_DOCTYPE_DECL_FEATURE.length() &amp;&amp;
                featureId.endsWith(Constants.DISALLOW_DOCTYPE_DECL_FEATURE)) {
                fDisallowDoctype = state;
                return;
            }
        }
</source>
    </clone>
    <clone nlines="14" distance="2">
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="576" startcolumn="7" endline="589" endcolumn="27">
if (null != m_predicates)
      {

        int n = m_predicates.length;
        if ((null == pnt.m_predicates) || (pnt.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(pnt.m_predicates[i]))
                return false;
        }
      }
      else if (null != pnt.m_predicates)
              return false;
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="564" startcolumn="7" endline="580" endcolumn="7">
if (null != m_exprs)
      {
        int n = m_exprs.length;

        if((null == upi.m_exprs) || (upi.m_exprs.length != n))
                return false;

        for (int i = 0; i &lt; n; i++)
        {
          if(!m_exprs[i].deepEquals(upi.m_exprs[i]))
                return false;
        }
      }
      else if (null != upi.m_exprs)
      {
          return false;
      }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xpath/internal/patterns/StepPattern.java" startline="1029" startcolumn="5" endline="1041" endcolumn="21">
if (null != m_predicates)
    {
        int n = m_predicates.length;
        if ((null == sp.m_predicates) || (sp.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(sp.m_predicates[i]))
                return false;
        }
    }
    else if (null != sp.m_predicates)
        return false;
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="564" startcolumn="7" endline="580" endcolumn="7">
if (null != m_exprs)
      {
        int n = m_exprs.length;

        if((null == upi.m_exprs) || (upi.m_exprs.length != n))
                return false;

        for (int i = 0; i &lt; n; i++)
        {
          if(!m_exprs[i].deepEquals(upi.m_exprs[i]))
                return false;
        }
      }
      else if (null != upi.m_exprs)
      {
          return false;
      }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="576" startcolumn="7" endline="589" endcolumn="27">
if (null != m_predicates)
      {

        int n = m_predicates.length;
        if ((null == pnt.m_predicates) || (pnt.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(pnt.m_predicates[i]))
                return false;
        }
      }
      else if (null != pnt.m_predicates)
              return false;
</source>
        <source file="com/sun/org/apache/xpath/internal/patterns/UnionPattern.java" startline="200" startcolumn="9" endline="213" endcolumn="29">
if(null != m_patterns)
        {
                int n = m_patterns.length;
                if((null == up.m_patterns) || (up.m_patterns.length != n))
                        return false;

                for(int i = 0; i &lt; n; i++)
                {
                        if(!m_patterns[i].deepEquals(up.m_patterns[i]))
                                return false;
                }
        }
        else if(up.m_patterns != null)
                return false;
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xpath/internal/patterns/StepPattern.java" startline="1029" startcolumn="5" endline="1041" endcolumn="21">
if (null != m_predicates)
    {
        int n = m_predicates.length;
        if ((null == sp.m_predicates) || (sp.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(sp.m_predicates[i]))
                return false;
        }
    }
    else if (null != sp.m_predicates)
        return false;
</source>
        <source file="com/sun/org/apache/xpath/internal/patterns/UnionPattern.java" startline="200" startcolumn="9" endline="213" endcolumn="29">
if(null != m_patterns)
        {
                int n = m_patterns.length;
                if((null == up.m_patterns) || (up.m_patterns.length != n))
                        return false;

                for(int i = 0; i &lt; n; i++)
                {
                        if(!m_patterns[i].deepEquals(up.m_patterns[i]))
                                return false;
                }
        }
        else if(up.m_patterns != null)
                return false;
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xpath/internal/axes/PredicatedNodeTest.java" startline="576" startcolumn="7" endline="589" endcolumn="27">
if (null != m_predicates)
      {

        int n = m_predicates.length;
        if ((null == pnt.m_predicates) || (pnt.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(pnt.m_predicates[i]))
                return false;
        }
      }
      else if (null != pnt.m_predicates)
              return false;
</source>
        <source file="com/sun/org/apache/xpath/internal/functions/FunctionMultiArgs.java" startline="218" startcolumn="7" endline="234" endcolumn="7">
if (null != m_args)
      {
        int n = m_args.length;
        if ((null == fma) || (fma.m_args.length != n))
              return false;

        for (int i = 0; i &lt; n; i++)
        {
          if (!m_args[i].deepEquals(fma.m_args[i]))
                return false;
        }

      }
      else if (null != fma.m_args)
      {
          return false;
      }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xpath/internal/patterns/StepPattern.java" startline="1029" startcolumn="5" endline="1041" endcolumn="21">
if (null != m_predicates)
    {
        int n = m_predicates.length;
        if ((null == sp.m_predicates) || (sp.m_predicates.length != n))
              return false;
        for (int i = 0; i &lt; n; i++)
        {
          if (!m_predicates[i].deepEquals(sp.m_predicates[i]))
                return false;
        }
    }
    else if (null != sp.m_predicates)
        return false;
</source>
        <source file="com/sun/org/apache/xpath/internal/functions/FunctionMultiArgs.java" startline="218" startcolumn="7" endline="234" endcolumn="7">
if (null != m_args)
      {
        int n = m_args.length;
        if ((null == fma) || (fma.m_args.length != n))
              return false;

        for (int i = 0; i &lt; n; i++)
        {
          if (!m_args[i].deepEquals(fma.m_args[i]))
                return false;
        }

      }
      else if (null != fma.m_args)
      {
          return false;
      }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="com/sun/org/apache/xpath/internal/functions/FunctionMultiArgs.java" startline="218" startcolumn="7" endline="234" endcolumn="7">
if (null != m_args)
      {
        int n = m_args.length;
        if ((null == fma) || (fma.m_args.length != n))
              return false;

        for (int i = 0; i &lt; n; i++)
        {
          if (!m_args[i].deepEquals(fma.m_args[i]))
                return false;
        }

      }
      else if (null != fma.m_args)
      {
          return false;
      }
</source>
        <source file="com/sun/org/apache/xpath/internal/axes/UnionPathIterator.java" startline="564" startcolumn="7" endline="580" endcolumn="7">
if (null != m_exprs)
      {
        int n = m_exprs.length;

        if((null == upi.m_exprs) || (upi.m_exprs.length != n))
                return false;

        for (int i = 0; i &lt; n; i++)
        {
          if(!m_exprs[i].deepEquals(upi.m_exprs[i]))
                return false;
        }
      }
      else if (null != upi.m_exprs)
      {
          return false;
      }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11NSDocumentScannerImpl.java" startline="911" startcolumn="13" endline="925" endcolumn="13">
if (fDTDValidator == null) {
                fBindNamespaces = true;
            }
            else if (!fDTDValidator.hasGrammar()) {
                fBindNamespaces = true;
                fPerformValidation = fDTDValidator.validate();
                // re-configure pipeline
                XMLDocumentSource source = fDTDValidator.getDocumentSource();
                XMLDocumentHandler handler = fDTDValidator.getDocumentHandler();
                source.setDocumentHandler(handler);
                if (handler != null)
                    handler.setDocumentSource(source);
                fDTDValidator.setDocumentSource(null);
                fDTDValidator.setDocumentHandler(null);
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLNSDocumentScannerImpl.java" startline="622" startcolumn="13" endline="636" endcolumn="13">
if (fNamespaces &amp;&amp; fDTDValidator == null) {
                fBindNamespaces = true;
            }
            else if (fNamespaces &amp;&amp; !fDTDValidator.hasGrammar() ) {
                fBindNamespaces = true;
                fPerformValidation = fDTDValidator.validate();
                // re-configure pipeline by removing DTDValidator
                XMLDocumentSource source = fDTDValidator.getDocumentSource();
                XMLDocumentHandler handler = fDTDValidator.getDocumentHandler();
                source.setDocumentHandler(handler);
                if (handler != null)
                    handler.setDocumentSource(source);
                fDTDValidator.setDocumentSource(null);
                fDTDValidator.setDocumentHandler(null);
            }
</source>
    </clone>
    <clone nlines="20" distance="4">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1455" startcolumn="11" endline="1474" endcolumn="11">
if (_sp &lt; 0) {
            node = NULL;
            break;
          } else if (node &gt;= _stack[_sp]) {
            if (--_sp &lt; 0) {
              node = NULL;
              break;
            }
          } else {
            expType = _exptype(node);
            if (expType &lt; DTM.NTYPES) {
              if (expType == nodeType) {
                break;
              }
            } else {
              if (m_expandedNameTable.getType(expType) == nodeType) {
                break;
              }
            }
          }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="1013" startcolumn="11" endline="1035" endcolumn="11">
if (_sp &lt; 0) {
            node = NULL;
            break;
          }
          else if (node &gt;= _stack[_sp]) {
            if (--_sp &lt; 0) {
              node = NULL;
              break;
            }
          }
          else {
            expType = _exptype2(node);
            if (expType &lt; DTM.NTYPES) {
              if (expType == nodeType) {
                break;
              }
            }
            else {
              if (m_extendedTypes[expType].getNodeType() == nodeType) {
                break;
              }
            }
          }
</source>
    </clone>
    <clone nlines="20" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1116" startcolumn="17" endline="1136" endcolumn="19">
if (fDOMFilter !=null &amp;&amp;
                      (fDOMFilter.getWhatToShow() &amp; NodeFilter.SHOW_ENTITY_REFERENCE)!= 0) {
                      short code = fDOMFilter.acceptNode(node);
                      switch (code) {
                        case NodeFilter.FILTER_REJECT:{
                            return; // remove the node
                          }
                          case NodeFilter.FILTER_SKIP: {
                              child = node.getFirstChild();
                              while ( child != null ) {
                                  serializeNode( child );
                                  child = child.getNextSibling();
                              }
                              return;
                          }

                          default: {
                               // fall through
                          }
                      }
                  }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1173" startcolumn="13" endline="1192" endcolumn="13">
if (fDOMFilter !=null &amp;&amp;
                  (fDOMFilter.getWhatToShow() &amp; NodeFilter.SHOW_ELEMENT)!= 0) {
                  short code = fDOMFilter.acceptNode(node);
                  switch (code) {
                    case NodeFilter.FILTER_REJECT: {
                        return;
                    }
                    case NodeFilter.FILTER_SKIP: {
                        Node child = node.getFirstChild();
                        while ( child != null ) {
                            serializeNode( child );
                            child = child.getNextSibling();
                        }
                        return;  // skip this node
                    }

                    default: { // fall through
                    }
                  }
            }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="462" startcolumn="9" endline="471" endcolumn="9">
for (int i = 0;  i &lt; uppers.ranges.length;  i += 2) {
            for (int ch = uppers.ranges[i];  ch &lt;= uppers.ranges[i+1];  ch ++) {
                if (ch &gt; 0xffff)
                    lowers.addRange(ch, ch);
                else {
                    char uch = Character.toUpperCase((char)ch);
                    lowers.addRange(uch, uch);
                }
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="451" startcolumn="9" endline="460" endcolumn="9">
for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
            for (int ch = this.ranges[i];  ch &lt;= this.ranges[i+1];  ch ++) {
                if (ch &gt; 0xffff)
                    uppers.addRange(ch, ch);
                else {
                    char uch = Character.toUpperCase((char)ch);
                    uppers.addRange(uch, uch);
                }
            }
        }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="203" startcolumn="13" endline="214" endcolumn="33">
do {
                char ch1 = ch = chars[--index];
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="152" startcolumn="13" endline="163" endcolumn="33">
do {
                char ch1 = ch = iterator.setIndex(--index);
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="203" startcolumn="13" endline="214" endcolumn="33">
do {
                char ch1 = ch = chars[--index];
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="178" startcolumn="13" endline="189" endcolumn="33">
do {
                char ch1 = ch = text.charAt(--index);
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
</source>
    </clone>
    <clone nlines="11" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1261" startcolumn="13" endline="1271" endcolumn="13">
if (fCurrentEntity.position &gt; fCurrentEntity.count - delimLen) {
                // something must be wrong with the input:  e.g., file ends in an unterminated comment
                int length = fCurrentEntity.count - fCurrentEntity.position;
                buffer.append (fCurrentEntity.ch, fCurrentEntity.position, length);
                fCurrentEntity.columnNumber += fCurrentEntity.count;
                fCurrentEntity.baseCharOffset += (fCurrentEntity.position - fCurrentEntity.startPosition);
                fCurrentEntity.position = fCurrentEntity.count;
                fCurrentEntity.startPosition = fCurrentEntity.count;
                load(0, true, false);
                return false;
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1159" startcolumn="13" endline="1169" endcolumn="13">
if (fCurrentEntity.position &gt;= fCurrentEntity.count - delimLen) {
                // something must be wrong with the input:  e.g., file ends  an unterminated comment
                int length = fCurrentEntity.count - fCurrentEntity.position;
                buffer.append (fCurrentEntity.ch, fCurrentEntity.position, length);
                fCurrentEntity.columnNumber += fCurrentEntity.count;
                fCurrentEntity.baseCharOffset += (fCurrentEntity.position - fCurrentEntity.startPosition);
                fCurrentEntity.position = fCurrentEntity.count;
                fCurrentEntity.startPosition = fCurrentEntity.count;
                load(0,true, false);
                return false;
            }
</source>
    </clone>
    <clone nlines="28" distance="4">
        <source file="com/sun/org/apache/xml/internal/serializer/EncodingInfo.java" startline="182" startcolumn="20" endline="209" endcolumn="13">
if (m_explLast &lt; codePoint) {
                // The unicode value is after the range
                // that we explictly manage, so we delegate the answer.

                // If we don't have an m_after object to delegate to, make one.
                if (m_after == null)
                    m_after =
                        new EncodingImpl(
                            m_encoding,
                            m_explLast + 1,
                            m_last,
                            codePoint);
                ret = m_after.isInEncoding(ch1);
            } else {
                // The unicode value is in the range we explitly handle
                final int idx = codePoint - m_explFirst;

                // If we already know the answer, just return it.
                if (m_alreadyKnown[idx])
                    ret = m_isInEncoding[idx];
                else {
                    // We don't know the answer, so find out,
                    // which may be expensive, then cache the answer
                    ret = inEncoding(ch1, m_encoding);
                    m_alreadyKnown[idx] = true;
                    m_isInEncoding[idx] = ret;
                }
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/EncodingInfo.java" startline="229" startcolumn="20" endline="256" endcolumn="13">
if (m_explLast &lt; codePoint) {
                // The unicode value is after the range
                // that we explictly manage, so we delegate the answer.

                // If we don't have an m_after object to delegate to, make one.
                if (m_after == null)
                    m_after =
                        new EncodingImpl(
                            m_encoding,
                            m_explLast + 1,
                            m_last,
                            codePoint);
                ret = m_after.isInEncoding(high,low);
            } else {
                // The unicode value is in the range we explitly handle
                final int idx = codePoint - m_explFirst;

                // If we already know the answer, just return it.
                if (m_alreadyKnown[idx])
                    ret = m_isInEncoding[idx];
                else {
                    // We don't know the answer, so find out,
                    // which may be expensive, then cache the answer
                    ret = inEncoding(high, low, m_encoding);
                    m_alreadyKnown[idx] = true;
                    m_isInEncoding[idx] = ret;
                }
            }
</source>
    </clone>
    <clone nlines="12" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/ReferenceType.java" startline="90" startcolumn="14" endline="101" endcolumn="9">
if (type == Type.ResultTree) {
            translateTo(classGen, methodGen, (ResultTreeType) type);
        }
        else if (type == Type.Object) {
            translateTo(classGen, methodGen, (ObjectType) type);
        }
        else if (type == Type.Reference ) {
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.INTERNAL_ERR, type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/StringType.java" startline="80" startcolumn="14" endline="93" endcolumn="9">
if (type == Type.Real) {
            translateTo(classGen, methodGen, (RealType) type);
        }
        else if (type == Type.Reference) {
            translateTo(classGen, methodGen, (ReferenceType) type);
        }
        else if (type == Type.ObjectString) {
            // NOP -&gt; same representation
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
</source>
    </clone>
    <clone nlines="11" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/LogicalExpr.java" startline="140" startcolumn="9" endline="151" endcolumn="9">
if (haveType != null) {
            // Check if left-hand side operand must be type casted
            Type arg1 = (Type)haveType.argsType().elementAt(0);
            if (!arg1.identicalTo(tleft))
                _left = new CastExpr(_left, arg1);
            // Check if right-hand side operand must be type casted
            Type arg2 = (Type) haveType.argsType().elementAt(1);
            if (!arg2.identicalTo(tright))
                _right = new CastExpr(_right, arg1);
            // Return the result type for the operator we will use
            return _type = haveType.resultType();
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/RelationalExpr.java" startline="187" startcolumn="9" endline="197" endcolumn="9">
if (ptype != null) {
            Type arg1 = (Type) ptype.argsType().elementAt(0);
            if (!arg1.identicalTo(tleft)) {
                _left = new CastExpr(_left, arg1);
            }
            Type arg2 = (Type) ptype.argsType().elementAt(1);
            if (!arg2.identicalTo(tright)) {
                _right = new CastExpr(_right, arg1);
            }
            return _type = ptype.resultType();
        }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="1311" startcolumn="13" endline="1327" endcolumn="13">
for ( index = 0 ; index &lt; length ; ++index ) {
                ch = text.charAt( index );
                if (!XMLChar.isValid(ch)) {
                    // check if it is surrogate
                    if (++index &lt;length) {
                        surrogates(ch, text.charAt(index));
                    } else {
                        fatalError("The character '"+(char)ch+"' is an invalid XML character");
                    }
                    continue;
                }

                                if ( unescaped )
                    _printer.printText( ch );
                else
                    printXMLChar( ch);
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="1289" startcolumn="13" endline="1304" endcolumn="13">
for ( index = 0 ; index &lt; length ; ++index ) {
                ch = text.charAt( index );
                if (!XMLChar.isValid(ch)) {
                    // check if it is surrogate
                    if (++index &lt;length) {
                        surrogates(ch, text.charAt(index));
                    } else {
                        fatalError("The character '"+(char)ch+"' is an invalid XML character");
                    }
                    continue;
                }
                if ( unescaped ) {
                    _printer.printText( ch );
                } else
                    printXMLChar( ch );
            }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1424" startcolumn="16" endline="1438" endcolumn="9">
for (int i = 0; i&lt;count1; i++) {

            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);
            for (int j = 0; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                try {
                    particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler);
                    continue label;
                }
                catch (XMLSchemaException e) {
                }
            }
            // didn't find a match.  Detect an error
            throw new XMLSchemaException("rcase-MapAndSum.1", null);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1424" startcolumn="9" endline="1438" endcolumn="9">
label: for (int i = 0; i&lt;count1; i++) {

            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);
            for (int j = 0; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                try {
                    particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler);
                    continue label;
                }
                catch (XMLSchemaException e) {
                }
            }
            // didn't find a match.  Detect an error
            throw new XMLSchemaException("rcase-MapAndSum.1", null);
        }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="127" startcolumn="9" endline="140" endcolumn="9">
while (index &lt;= limit) {
            //System.err.println("Starts at "+index);
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                if ((ch = chars[--index]) != this.pattern[--pindex])
                    break;
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="77" startcolumn="9" endline="89" endcolumn="9">
while (index &lt;= limit) {
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                if ((ch = iterator.setIndex(--index)) != this.pattern[--pindex])
                    break;
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
    </clone>
    <clone nlines="14" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="127" startcolumn="9" endline="140" endcolumn="9">
while (index &lt;= limit) {
            //System.err.println("Starts at "+index);
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                if ((ch = chars[--index]) != this.pattern[--pindex])
                    break;
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="102" startcolumn="9" endline="115" endcolumn="9">
while (index &lt;= limit) {
            //System.err.println("Starts at "+index);
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                if ((ch = str.charAt(--index)) != this.pattern[--pindex])
                    break;
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1440" startcolumn="7" endline="1455" endcolumn="7">
while (index &lt; end) {
        testChar = p_userinfo.charAt(index);
        if (testChar == '%') {
          if (index+2 &gt;= end ||
              !isHex(p_userinfo.charAt(index+1)) ||
              !isHex(p_userinfo.charAt(index+2))) {
            throw new MalformedURIException(
                  "Userinfo contains invalid escape sequence!");
          }
        }
        else if (!isUserinfoCharacter(testChar)) {
          throw new MalformedURIException(
                  "Userinfo contains invalid character:"+testChar);
        }
        index++;
      }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="1182" startcolumn="7" endline="1199" endcolumn="7">
while (index &lt; end) {
        testChar = p_uriSpec.charAt(index);

        if (testChar == '%') {
           if (index+2 &gt;= end ||
              !isHex(p_uriSpec.charAt(index+1)) ||
              !isHex(p_uriSpec.charAt(index+2))) {
            throw new MalformedURIException(
                    "Fragment contains invalid escape sequence!");
           }
           index += 2;
        }
        else if (!isURICharacter(testChar)) {
          throw new MalformedURIException(
                "Fragment contains invalid character: "+testChar);
        }
        index++;
      }
</source>
    </clone>
    <clone nlines="13" distance="4">
        <source file="com/sun/xml/internal/stream/XMLEntityStorage.java" startline="549" startcolumn="17" endline="563" endcolumn="17">
try {
                    base = new URI(fixURI(baseSystemId));
                }
                catch (URI.MalformedURIException e) {
                    if (baseSystemId.indexOf(':') != -1) {
                        // for xml schemas we might have baseURI with
                        // a specified drive
                        base = new URI("file", "", fixURI(baseSystemId), null, null);
                    }
                    else {
                        String dir = getUserDir();
                        dir = dir + fixURI(baseSystemId);
                        base = new URI("file", "", dir, null, null);
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java" startline="1951" startcolumn="17" endline="1963" endcolumn="17">
try {
                    base = new URI(fixURI(baseSystemId));
                } catch (URI.MalformedURIException e) {
                    if (baseSystemId.indexOf(':') != -1) {
                        // for xml schemas we might have baseURI with
                        // a specified drive
                        base = new URI("file", "", fixURI(baseSystemId), null, null);
                    } else {
                        String dir = getUserDir().toString();
                        dir = dir + fixURI(baseSystemId);
                        base = new URI("file", "", dir, null, null);
                    }
                }
</source>
    </clone>
    <clone nlines="15" distance="2">
        <source file="javax/xml/validation/SchemaFactoryFinder.java" startline="167" startcolumn="9" endline="181" endcolumn="9">
try {
            debugPrintln("Looking up system property '"+propertyName+"'" );
            String r = ss.getSystemProperty(propertyName);
            if(r!=null) {
                debugPrintln("The value is '"+r+"'");
                sf = createInstance(r, true);
                if(sf!=null)    return sf;
            } else
                debugPrintln("The property is undefined.");
        } catch( Throwable t ) {
            if( debug ) {
                debugPrintln("failed to look up system property '"+propertyName+"'" );
                t.printStackTrace();
            }
        }
</source>
        <source file="javax/xml/xpath/XPathFactoryFinder.java" startline="160" startcolumn="9" endline="176" endcolumn="9">
try {
            debugPrintln("Looking up system property '"+propertyName+"'" );
            String r = ss.getSystemProperty(propertyName);
            if(r!=null) {
                debugPrintln("The value is '"+r+"'");
                xpathFactory = createInstance(r, true);
                if (xpathFactory != null) {
                    return xpathFactory;
                }
            } else
                debugPrintln("The property is undefined.");
        } catch( Throwable t ) {
            if( debug ) {
                debugPrintln("failed to look up system property '"+propertyName+"'" );
                t.printStackTrace();
            }
        }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1865" startcolumn="13" endline="1879" endcolumn="13">
while (partlen-- &gt; 0) {
                final char ch1 =  target[offset++] ;
                final char ch2 =  target[i++] ;
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1828" startcolumn="13" endline="1842" endcolumn="13">
while (partlen-- &gt; 0) {
                final char ch1 = target[offset++] ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter.java" startline="84" startcolumn="9" endline="101" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_de.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_es.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_fr.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_it.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_ja.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_ko.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_pt_BR.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_sv.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_zh_CN.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/msg/XMLMessageFormatter_zh_TW.java" startline="86" startcolumn="9" endline="103" endcolumn="9">
try {
            msg = fResourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = fResourceBundle.getString("FormatFailed");
                    msg += " " + fResourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = fResourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/JAXPValidationMessageFormatter.java" startline="67" startcolumn="9" endline="84" endcolumn="9">
try {
            msg = resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/DatatypeMessageFormatter.java" startline="69" startcolumn="9" endline="86" endcolumn="9">
try {
            msg = resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/util/SAXMessageFormatter.java" startline="67" startcolumn="9" endline="84" endcolumn="9">
try {
            msg = resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        }

        // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMMessageFormatter.java" startline="77" startcolumn="9" endline="92" endcolumn="9">
try {
            msg = key + ": " + resourceBundle.getString(key);
            if (arguments != null) {
                try {
                    msg = java.text.MessageFormat.format(msg, arguments);
                }
                catch (Exception e) {
                    msg = resourceBundle.getString("FormatFailed");
                    msg += " " + resourceBundle.getString(key);
                }
            }
        } // error
        catch (MissingResourceException e) {
            msg = resourceBundle.getString("BadMessageKey");
            throw new MissingResourceException(key, msg, key);
        }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="638" startcolumn="9" endline="653" endcolumn="9">
if (colonIdx == 0 || slashIdx != -1 ||
            queryIdx != -1 || fragmentIdx != -1) {
            // A standalone base is a valid URI according to spec
            if (colonIdx == 0 || (p_base == null &amp;&amp; fragmentIdx != 0)) {
                throw new MalformedURIException("No scheme found in URI.");
            }
        }
        else {
            initializeScheme(uriSpec);
            index = m_scheme.length()+1;

            // Neither 'scheme:' or 'scheme:#fragment' are valid URIs.
            if (colonIdx == uriSpecLen - 1 || uriSpec.charAt(colonIdx+1) == '#') {
                throw new MalformedURIException("Scheme specific part cannot be empty.");
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/util/URI.java" startline="522" startcolumn="11" endline="537" endcolumn="11">
if (colonIdx == 0 || slashIdx != -1 ||
              queryIdx != -1 || fragmentIdx != -1) {
              // A standalone base is a valid URI according to spec
              if (colonIdx == 0 || (p_base == null &amp;&amp; fragmentIdx != 0 &amp;&amp; !allowNonAbsoluteURI)) {
                  throw new MalformedURIException("No scheme found in URI.");
              }
          }
          else {
              initializeScheme(uriSpec);
              index = m_scheme.length()+1;

              // Neither 'scheme:' or 'scheme:#fragment' are valid URIs.
              if (colonIdx == uriSpecLen - 1 || uriSpec.charAt(colonIdx+1) == '#') {
                  throw new MalformedURIException("Scheme specific part cannot be empty.");
              }
          }
</source>
    </clone>
    <clone nlines="10" distance="1">
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="618" startcolumn="13" endline="627" endcolumn="13">
if (!fInitFeatures.isEmpty()) {
                iter = fInitFeatures.entrySet().iterator();
                while (iter.hasNext()) {
                    Map.Entry entry = (Map.Entry) iter.next();
                    String name = (String) entry.getKey();
                    boolean value = ((Boolean) entry.getValue()).booleanValue();
                    super.setFeature(name, value);
                }
                fInitFeatures.clear();
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaValidatorComponentManager.java" startline="493" startcolumn="9" endline="502" endcolumn="9">
if (!fInitFeatures.isEmpty()) {
            Iterator iter = fInitFeatures.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                String name = (String) entry.getKey();
                boolean value = ((Boolean) entry.getValue()).booleanValue();
                super.setFeature(name, value);
            }
            fInitFeatures.clear();
        }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1828" startcolumn="13" endline="1842" endcolumn="13">
while (partlen-- &gt; 0) {
                final char ch1 = target[offset++] ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1920" startcolumn="13" endline="1934" endcolumn="13">
while (partlen-- &gt; 0) {
                final char ch1 = target.setIndex(offset++) ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1828" startcolumn="13" endline="1842" endcolumn="13">
while (partlen-- &gt; 0) {
                final char ch1 = target[offset++] ;
                final char ch2 = part.charAt(i++);
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1958" startcolumn="13" endline="1972" endcolumn="13">
while (partlen-- &gt; 0) {
                final char ch1 = target.setIndex(offset++) ;
                final char ch2 = target.setIndex(i++) ;
                if (ch1 == ch2) {
                    continue;
                }
                final char uch1 = Character.toUpperCase(ch1);
                final char uch2 = Character.toUpperCase(ch2);
                if (uch1 == uch2) {
                    continue;
                }
                if (Character.toLowerCase(uch1) != Character.toLowerCase(uch2)) {
                    return false;
                }
            }
</source>
    </clone>
    <clone nlines="11" distance="2">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/RelationalExpr.java" startline="187" startcolumn="9" endline="197" endcolumn="9">
if (ptype != null) {
            Type arg1 = (Type) ptype.argsType().elementAt(0);
            if (!arg1.identicalTo(tleft)) {
                _left = new CastExpr(_left, arg1);
            }
            Type arg2 = (Type) ptype.argsType().elementAt(1);
            if (!arg2.identicalTo(tright)) {
                _right = new CastExpr(_right, arg1);
            }
            return _type = ptype.resultType();
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/BinOpExpr.java" startline="87" startcolumn="9" endline="97" endcolumn="9">
if (ptype != null) {
            final Type arg1 = (Type) ptype.argsType().elementAt(0);
            if (!arg1.identicalTo(tleft)) {
                _left = new CastExpr(_left, arg1);
            }
            final Type arg2 = (Type) ptype.argsType().elementAt(1);
            if (!arg2.identicalTo(tright)) {
                _right = new CastExpr(_right, arg1);
            }
            return _type = ptype.resultType();
        }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="978" startcolumn="21" endline="993" endcolumn="21">
for (int i = 0; i &lt; enumeration.length; ++i) {
                        for (int j = i + 1; j &lt; enumeration.length; ++j) {
                            if (enumeration[i].equals(enumeration[j])) {
                                // Only report the first uniqueness violation. There could be others,
                                // but additional overhead would be incurred tracking unique tokens
                                // that have already been encountered. -- mrglavas
                                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               type == XMLSymbols.fENUMERATIONSymbol
                                                   ? "MSG_DISTINCT_TOKENS_IN_ENUMERATION"
                                                   : "MSG_DISTINCT_NOTATION_IN_ENUMERATION",
                                               new Object[]{ elementName, enumeration[i], attributeName },
                                               XMLErrorReporter.SEVERITY_ERROR);
                                break outer;
                            }
                        }
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dtd/XMLDTDProcessor.java" startline="977" startcolumn="17" endline="993" endcolumn="21">
outer:
                    for (int i = 0; i &lt; enumeration.length; ++i) {
                        for (int j = i + 1; j &lt; enumeration.length; ++j) {
                            if (enumeration[i].equals(enumeration[j])) {
                                // Only report the first uniqueness violation. There could be others,
                                // but additional overhead would be incurred tracking unique tokens
                                // that have already been encountered. -- mrglavas
                                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               type == XMLSymbols.fENUMERATIONSymbol
                                                   ? "MSG_DISTINCT_TOKENS_IN_ENUMERATION"
                                                   : "MSG_DISTINCT_NOTATION_IN_ENUMERATION",
                                               new Object[]{ elementName, enumeration[i], attributeName },
                                               XMLErrorReporter.SEVERITY_ERROR);
                                break outer;
                            }
                        }
                    }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="306" startcolumn="9" endline="321" endcolumn="9">
try {
            return fXMLSchemaLoader.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="694" startcolumn="13" endline="710" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setFeature(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="306" startcolumn="9" endline="321" endcolumn="9">
try {
            return fXMLSchemaLoader.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="715" startcolumn="13" endline="731" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setProperty(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="338" startcolumn="9" endline="353" endcolumn="9">
try {
            return fXMLSchemaLoader.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="694" startcolumn="13" endline="710" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setFeature(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="338" startcolumn="9" endline="353" endcolumn="9">
try {
            return fXMLSchemaLoader.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="715" startcolumn="13" endline="731" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setProperty(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="306" startcolumn="9" endline="321" endcolumn="9">
try {
            return fXMLSchemaLoader.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="386" startcolumn="9" endline="401" endcolumn="9">
try {
            fXMLSchemaLoader.setFeature(name, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="306" startcolumn="9" endline="321" endcolumn="9">
try {
            return fXMLSchemaLoader.getFeature(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="583" startcolumn="9" endline="598" endcolumn="9">
try {
            fConfiguration.setProperty(propertyId, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="338" startcolumn="9" endline="353" endcolumn="9">
try {
            return fXMLSchemaLoader.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="386" startcolumn="9" endline="401" endcolumn="9">
try {
            fXMLSchemaLoader.setFeature(name, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
    </clone>
    <clone nlines="16" distance="3">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="338" startcolumn="9" endline="353" endcolumn="9">
try {
            return fXMLSchemaLoader.getProperty(name);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="583" startcolumn="9" endline="598" endcolumn="9">
try {
            fConfiguration.setProperty(propertyId, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/bcel/internal/classfile/Utility.java" startline="902" startcolumn="5" endline="921" endcolumn="5">
for(int i=0; i &lt; chars.length; i++) {
      switch(chars[i]) {
      case ' ': case '\t': case '\n': case '\r': case '\f':
        if(char_found)
          delim = true;
        break;

      case '[':
        if(!char_found)
          throw new RuntimeException("Illegal type: " + type);

        index = i;
        break loop;

      default:
        char_found = true;
        if(!delim)
          buf.append(chars[i]);
      }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/Utility.java" startline="901" startcolumn="3" endline="921" endcolumn="5">
loop:
    for(int i=0; i &lt; chars.length; i++) {
      switch(chars[i]) {
      case ' ': case '\t': case '\n': case '\r': case '\f':
        if(char_found)
          delim = true;
        break;

      case '[':
        if(!char_found)
          throw new RuntimeException("Illegal type: " + type);

        index = i;
        break loop;

      default:
        char_found = true;
        if(!delim)
          buf.append(chars[i]);
      }
    }
</source>
    </clone>
    <clone nlines="10" distance="4">
        <source file="com/sun/org/apache/bcel/internal/classfile/ConstantPool.java" startline="191" startcolumn="5" endline="200" endcolumn="5">
for(int i=0; i &lt; len; i++) {
      switch(ch[i]) {
      case '\n' : buf.append("\\n"); break;
      case '\r' : buf.append("\\r"); break;
      case '\t' : buf.append("\\t"); break;
      case '\b' : buf.append("\\b"); break;
      case '"'  : buf.append("\\\""); break;
      default: buf.append(ch[i]);
      }
    }
</source>
        <source file="com/sun/org/apache/bcel/internal/classfile/Utility.java" startline="1378" startcolumn="5" endline="1393" endcolumn="5">
for(int i=0; i &lt; ch.length; i++) {
      switch(ch[i]) {
      case '\n':
        buf.append("\\n"); break;
      case '\r':
        buf.append("\\r"); break;
      case '\"':
        buf.append("\\\""); break;
      case '\'':
        buf.append("\\'"); break;
      case '\\':
        buf.append("\\\\"); break;
      default:
        buf.append(ch[i]); break;
      }
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="386" startcolumn="9" endline="401" endcolumn="9">
try {
            fXMLSchemaLoader.setFeature(name, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="694" startcolumn="13" endline="710" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setFeature(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/XMLSchemaFactory.java" startline="386" startcolumn="9" endline="401" endcolumn="9">
try {
            fXMLSchemaLoader.setFeature(name, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="715" startcolumn="13" endline="731" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setProperty(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="583" startcolumn="9" endline="598" endcolumn="9">
try {
            fConfiguration.setProperty(propertyId, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="694" startcolumn="13" endline="710" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setFeature(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "feature-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/DOMParser.java" startline="583" startcolumn="9" endline="598" endcolumn="9">
try {
            fConfiguration.setProperty(propertyId, value);
        }
        catch (XMLConfigurationException e) {
            String identifier = e.getIdentifier();
            if (e.getType() == Status.NOT_RECOGNIZED) {
                throw new SAXNotRecognizedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-recognized", new Object [] {identifier}));
            }
            else {
                throw new SAXNotSupportedException(
                    SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                    "property-not-supported", new Object [] {identifier}));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/SAXParserImpl.java" startline="715" startcolumn="13" endline="731" endcolumn="13">
try {
                fSAXParser.fSchemaValidator.setProperty(name, value);
            }
            // This should never be thrown from the schema validator.
            catch (XMLConfigurationException e) {
                String identifier = e.getIdentifier();
                if (e.getType() == Status.NOT_RECOGNIZED) {
                    throw new SAXNotRecognizedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-recognized", new Object [] {identifier}));
                }
                else {
                    throw new SAXNotSupportedException(
                        SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),
                        "property-not-supported", new Object [] {identifier}));
                }
            }
</source>
    </clone>
    <clone nlines="18" distance="1">
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="772" startcolumn="7" endline="789" endcolumn="7">
if (!localCatalogFiles.isEmpty()) {
        // Move all the localCatalogFiles into the front of
        // the catalogFiles queue
        Vector newQueue = new Vector();
        Enumeration q = localCatalogFiles.elements();
        while (q.hasMoreElements()) {
          newQueue.addElement(q.nextElement());
        }

        // Put the rest of the catalogs on the end of the new list
        for (int curCat = 0; curCat &lt; catalogFiles.size(); curCat++) {
          catfile = (String) catalogFiles.elementAt(curCat);
          newQueue.addElement(catfile);
        }

        catalogFiles = newQueue;
        localCatalogFiles.clear();
      }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="717" startcolumn="5" endline="734" endcolumn="5">
if (!localCatalogFiles.isEmpty()) {
      // Move all the localCatalogFiles into the front of
      // the catalogFiles queue
      Vector newQueue = new Vector();
      Enumeration q = localCatalogFiles.elements();
      while (q.hasMoreElements()) {
        newQueue.addElement(q.nextElement());
      }

      // Put the rest of the catalogs on the end of the new list
      for (int curCat = 0; curCat &lt; catalogFiles.size(); curCat++) {
        String catfile = (String) catalogFiles.elementAt(curCat);
        newQueue.addElement(catfile);
      }

      catalogFiles = newQueue;
      localCatalogFiles.clear();
    }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/XML11Serializer.java" startline="456" startcolumn="13" endline="472" endcolumn="13">
for ( index = 0 ; index &lt; length ; ++index ) {
                ch = text.charAt( index );
                if (!XML11Char.isXML11Valid(ch)) {
                    // check if it is surrogate
                    if (++index &lt;length) {
                        surrogates(ch, text.charAt(index));
                    } else {
                        fatalError("The character '"+(char)ch+"' is an invalid XML character");
                    }
                    continue;
                }

                if ( unescaped &amp;&amp; XML11Char.isXML11ValidLiteral(ch) )
                    _printer.printText( ch );
                else
                    printXMLChar( ch);
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/XML11Serializer.java" startline="434" startcolumn="13" endline="449" endcolumn="13">
for ( index = 0 ; index &lt; length ; ++index ) {
                ch = text.charAt( index );
                if (!XML11Char.isXML11Valid(ch)) {
                    // check if it is surrogate
                    if (++index &lt;length) {
                        surrogates(ch, text.charAt(index));
                    } else {
                        fatalError("The character '"+(char)ch+"' is an invalid XML character");
                    }
                    continue;
                }
                if ( unescaped  &amp;&amp; XML11Char.isXML11ValidLiteral(ch)) {
                    _printer.printText( ch );
                } else
                    printXMLChar( ch );
            }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="315" startcolumn="29" endline="336" endcolumn="29">
if (fEntityManager.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                                 new Object[] { entityName });
                            }
                            else {
                                if (!fEntityManager.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                                       "EntityNotDeclared",
                                                                       new Object[]{entityName},
                                                                       XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    }
                                    else {
                                        reportFatalError("EntityNotDeclared",
                                                         new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="932" startcolumn="29" endline="951" endcolumn="29">
if (fEntityStore.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                        new Object[] { entityName });
                            } else {
                                if (!fEntityStore.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(fEntityScanner,XMLMessageFormatter.XML_DOMAIN,
                                                    "EntityNotDeclared",
                                                    new Object[]{entityName},
                                                    XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    } else {
                                        reportFatalError("EntityNotDeclared",
                                                new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1369" startcolumn="16" endline="1388" endcolumn="9">
for (int i = 0; i&lt;count1; i++) {

            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);
            for (int j = current; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                current +=1;
                try {
                    // IHR: go back one element on b list because the next element may match
                    // this as well.
                    if (particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler))
                        current--;
                    continue label;
                }
                catch (XMLSchemaException e) {
                }
            }
            // didn't find a match.  Detect an error
            throw new XMLSchemaException("rcase-RecurseLax.2", null);

        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1369" startcolumn="9" endline="1388" endcolumn="9">
label: for (int i = 0; i&lt;count1; i++) {

            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);
            for (int j = current; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                current +=1;
                try {
                    // IHR: go back one element on b list because the next element may match
                    // this as well.
                    if (particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler))
                        current--;
                    continue label;
                }
                catch (XMLSchemaException e) {
                }
            }
            // didn't find a match.  Detect an error
            throw new XMLSchemaException("rcase-RecurseLax.2", null);

        }
</source>
    </clone>
    <clone nlines="17" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/DocumentImpl.java" startline="716" startcolumn="17" endline="732" endcolumn="17">
if (nodeListeners != null) {
                    Vector nl = (Vector) nodeListeners.clone();
                    // call listeners in the order in which they got registered
                    int nlsize = nl.size();
                    for (int i = 0; i &lt; nlsize; i++) {
                        LEntry le = (LEntry) nl.elementAt(i);
                        if (le.useCapture &amp;&amp; le.type.equals(evt.type) &amp;&amp;
                            nodeListeners.contains(le)) {
                            try {
                                le.listener.handleEvent(evt);
                            }
                            catch (Exception e) {
                                // All exceptions are ignored.
                            }
                        }
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DocumentImpl.java" startline="778" startcolumn="21" endline="795" endcolumn="21">
if (nodeListeners != null) {
                        Vector nl = (Vector) nodeListeners.clone();
                        // call listeners in the order in which they got
                        // registered
                        int nlsize = nl.size();
                        for (int i = 0; i &lt; nlsize; i++) {
                            LEntry le = (LEntry) nl.elementAt(i);
                            if (!le.useCapture &amp;&amp; le.type.equals(evt.type) &amp;&amp;
                                nodeListeners.contains(le)) {
                                try {
                                    le.listener.handleEvent(evt);
                                }
                                catch (Exception e) {
                                    // All exceptions are ignored.
                                }
                            }
                        }
                    }
</source>
    </clone>
    <clone nlines="32" distance="2">
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="146" startcolumn="9" endline="177" endcolumn="9">
while (!accepted) {

            // if last direction is not forward, repeat node.
            if (!fForward &amp;&amp; nextNode!=null) {
                //System.out.println("nextNode():!fForward:"+fCurrentNode.getNodeName());
                nextNode = fCurrentNode;
            } else {
            // else get the next node via depth-first
                if (!fEntityReferenceExpansion
                    &amp;&amp; nextNode != null
                    &amp;&amp; nextNode.getNodeType() == Node.ENTITY_REFERENCE_NODE) {
                    nextNode = nextNode(nextNode, false);
                } else {
                    nextNode = nextNode(nextNode, true);
                }
            }

            fForward = true; //REVIST: should direction be set forward before null check?

            // nothing in the list. return null.
            if (nextNode == null) return null;

            // does node pass the filters and whatToShow?
            accepted = acceptNode(nextNode);
            if (accepted) {
                // if so, then the node is the current node.
                fCurrentNode = nextNode;
                return fCurrentNode;
            } else
                continue accepted_loop;

        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/NodeIteratorImpl.java" startline="145" startcolumn="9" endline="177" endcolumn="9">
accepted_loop:
        while (!accepted) {

            // if last direction is not forward, repeat node.
            if (!fForward &amp;&amp; nextNode!=null) {
                //System.out.println("nextNode():!fForward:"+fCurrentNode.getNodeName());
                nextNode = fCurrentNode;
            } else {
            // else get the next node via depth-first
                if (!fEntityReferenceExpansion
                    &amp;&amp; nextNode != null
                    &amp;&amp; nextNode.getNodeType() == Node.ENTITY_REFERENCE_NODE) {
                    nextNode = nextNode(nextNode, false);
                } else {
                    nextNode = nextNode(nextNode, true);
                }
            }

            fForward = true; //REVIST: should direction be set forward before null check?

            // nothing in the list. return null.
            if (nextNode == null) return null;

            // does node pass the filters and whatToShow?
            accepted = acceptNode(nextNode);
            if (accepted) {
                // if so, then the node is the current node.
                fCurrentNode = nextNode;
                return fCurrentNode;
            } else
                continue accepted_loop;

        }
</source>
    </clone>
    <clone nlines="16" distance="2">
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/SoftReferenceGrammarPool.java" startline="188" startcolumn="9" endline="203" endcolumn="9">
synchronized (fGrammars) {
            clean();
            int hash = hashCode(desc);
            int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
            for (Entry entry = fGrammars[index]; entry != null; entry = entry.next) {
                Grammar tempGrammar = (Grammar) entry.grammar.get();
                /** If the soft reference has been cleared, remove this entry from the pool. */
                if (tempGrammar == null) {
                    removeEntry(entry);
                }
                else if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                    return tempGrammar;
                }
            }
            return null;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/jaxp/validation/SoftReferenceGrammarPool.java" startline="238" startcolumn="9" endline="253" endcolumn="9">
synchronized (fGrammars) {
            clean();
            int hash = hashCode(desc);
            int index = (hash &amp; 0x7FFFFFFF) % fGrammars.length;
            for (Entry entry = fGrammars[index]; entry != null ; entry = entry.next) {
                Grammar tempGrammar = (Grammar) entry.grammar.get();
                /** If the soft reference has been cleared, remove this entry from the pool. */
                if (tempGrammar == null) {
                    removeEntry(entry);
                }
                else if ((entry.hash == hash) &amp;&amp; equals(entry.desc, desc)) {
                    return true;
                }
            }
            return false;
        }
</source>
    </clone>
    <clone nlines="16" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="774" startcolumn="7" endline="789" endcolumn="7">
if (testChar == '%')
      {
        if (index + 2 &gt;= end ||!isHex(p_uriSpec.charAt(index + 1))
                ||!isHex(p_uriSpec.charAt(index + 2)))
        {
          throw new MalformedURIException(
            XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE, null)); //"Path contains invalid escape sequence!");
        }
      }
      else if (!isReservedCharacter(testChar)
               &amp;&amp;!isUnreservedCharacter(testChar))
      {
        if ('\\' != testChar)
          throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR, new Object[]{String.valueOf(testChar)})); //"Path contains invalid character: "
                                          //+ testChar);
      }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="753" startcolumn="7" endline="768" endcolumn="7">
if (testChar == '%')
      {
        if (index + 2 &gt;= end ||!isHex(p_uriSpec.charAt(index + 1))
                ||!isHex(p_uriSpec.charAt(index + 2)))
        {
          throw new MalformedURIException(
            Utils.messages.createMessage(MsgKey.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE, null)); //"Path contains invalid escape sequence!");
        }
      }
      else if (!isReservedCharacter(testChar)
               &amp;&amp;!isUnreservedCharacter(testChar))
      {
        if ('\\' != testChar)
          throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR, new Object[]{String.valueOf(testChar)})); //"Path contains invalid character: "
                                          //+ testChar);
      }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/XML11Serializer.java" startline="217" startcolumn="21" endline="235" endcolumn="21">
if (!XML11Char.isXML11Valid(ch)) {
                        // check if it is surrogate
                        if (++index &lt; end) {
                            surrogates(ch, chars[index]);
                        }
                        else {
                            fatalError("The character '"+(char)ch+"' is an invalid XML character");
                        }
                        continue;
                    } else {
                        if ( _encodingInfo.isPrintable((char)ch) &amp;&amp; XML11Char.isXML11ValidLiteral(ch)) {
                            _printer.printText((char)ch);
                        } else {
                            // The character is not printable -- split CDATA section
                            _printer.printText("]]&gt;&amp;#x");
                            _printer.printText(Integer.toHexString(ch));
                            _printer.printText(";&lt;![CDATA[");
                        }
                    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/XML11Serializer.java" startline="344" startcolumn="13" endline="366" endcolumn="13">
if (!XML11Char.isXML11Valid(ch)) {
                // check if it is surrogate
                if (++index &lt; length) {
                    surrogates(ch, text.charAt(index));
                } else {
                    fatalError(
                        "The character '"
                            + (char) ch
                            + "' is an invalid XML character");
                }
                continue;
            } else {
                if (_encodingInfo.isPrintable((char) ch)
                    &amp;&amp; XML11Char.isXML11ValidLiteral(ch)) {
                    _printer.printText((char) ch);
                } else {

                    // The character is not printable -- split CDATA section
                    _printer.printText("]]&gt;&amp;#x");
                    _printer.printText(Integer.toHexString(ch));
                    _printer.printText(";&lt;![CDATA[");
                }
            }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="235" startcolumn="9" endline="253" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode) )
            {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="410" startcolumn="9" endline="427" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !isLegalContainer( refNode.getParentNode() ) ||
                    !isLegalContainedNode( refNode ) ) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="276" startcolumn="9" endline="293" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="410" startcolumn="9" endline="427" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !isLegalContainer( refNode.getParentNode() ) ||
                    !isLegalContainedNode( refNode ) ) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="315" startcolumn="9" endline="332" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="410" startcolumn="9" endline="427" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !isLegalContainer( refNode.getParentNode() ) ||
                    !isLegalContainedNode( refNode ) ) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
    </clone>
    <clone nlines="18" distance="4">
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="354" startcolumn="9" endline="371" endcolumn="9">
if (fDocument.errorChecking) {
            if( fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !hasLegalRootContainer(refNode) ||
                    !isLegalContainedNode(refNode)) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/RangeImpl.java" startline="410" startcolumn="9" endline="427" endcolumn="9">
if (fDocument.errorChecking) {
            if (fDetach) {
                throw new DOMException(
                        DOMException.INVALID_STATE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
            }
            if ( !isLegalContainer( refNode.getParentNode() ) ||
                    !isLegalContainedNode( refNode ) ) {
                throw new RangeExceptionImpl(
                        RangeException.INVALID_NODE_TYPE_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_NODE_TYPE_ERR", null));
            }
            if ( fDocument != refNode.getOwnerDocument() &amp;&amp; fDocument != refNode) {
                throw new DOMException(
                        DOMException.WRONG_DOCUMENT_ERR,
                        DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null));
            }
        }
</source>
    </clone>
    <clone nlines="17" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1270" startcolumn="16" endline="1286" endcolumn="9">
for (int i = 0; i&lt;count1; i++) {

            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);
            for (int j = current; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                current +=1;
                try {
                    particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler);
                    continue label;
                }
                catch (XMLSchemaException e) {
                    if (!particle2.emptiable())
                        throw new XMLSchemaException("rcase-Recurse.2", null);
                }
            }
            throw new XMLSchemaException("rcase-Recurse.2", null);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1270" startcolumn="9" endline="1286" endcolumn="9">
label: for (int i = 0; i&lt;count1; i++) {

            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);
            for (int j = current; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                current +=1;
                try {
                    particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler);
                    continue label;
                }
                catch (XMLSchemaException e) {
                    if (!particle2.emptiable())
                        throw new XMLSchemaException("rcase-Recurse.2", null);
                }
            }
            throw new XMLSchemaException("rcase-Recurse.2", null);
        }
</source>
    </clone>
    <clone nlines="15" distance="4">
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/ReferenceType.java" startline="87" startcolumn="14" endline="101" endcolumn="9">
if (type == Type.Node) {
            translateTo(classGen, methodGen, (NodeType) type);
        }
        else if (type == Type.ResultTree) {
            translateTo(classGen, methodGen, (ResultTreeType) type);
        }
        else if (type == Type.Object) {
            translateTo(classGen, methodGen, (ObjectType) type);
        }
        else if (type == Type.Reference ) {
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.INTERNAL_ERR, type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
</source>
        <source file="com/sun/org/apache/xalan/internal/xsltc/compiler/util/StringType.java" startline="77" startcolumn="9" endline="93" endcolumn="9">
if (type == Type.Boolean) {
            translateTo(classGen, methodGen, (BooleanType) type);
        }
        else if (type == Type.Real) {
            translateTo(classGen, methodGen, (RealType) type);
        }
        else if (type == Type.Reference) {
            translateTo(classGen, methodGen, (ReferenceType) type);
        }
        else if (type == Type.ObjectString) {
            // NOP -&gt; same representation
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1319" startcolumn="16" endline="1338" endcolumn="9">
for (int i = 0; i&lt;count1; i++) {
            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);

            for (int j = 0; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                try {
                    particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler);
                    if (foundIt[j])
                        throw new XMLSchemaException("rcase-RecurseUnordered.2", null);
                    else
                        foundIt[j]=true;

                    continue label;
                }
                catch (XMLSchemaException e) {
                }
            }
            // didn't find a match.  Detect an error
            throw new XMLSchemaException("rcase-RecurseUnordered.2", null);
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XSConstraints.java" startline="1319" startcolumn="9" endline="1338" endcolumn="9">
label: for (int i = 0; i&lt;count1; i++) {
            XSParticleDecl particle1 = (XSParticleDecl)dChildren.elementAt(i);

            for (int j = 0; j&lt;count2; j++) {
                XSParticleDecl particle2 = (XSParticleDecl)bChildren.elementAt(j);
                try {
                    particleValidRestriction(particle1, dSGHandler, particle2, bSGHandler);
                    if (foundIt[j])
                        throw new XMLSchemaException("rcase-RecurseUnordered.2", null);
                    else
                        foundIt[j]=true;

                    continue label;
                }
                catch (XMLSchemaException e) {
                }
            }
            // didn't find a match.  Detect an error
            throw new XMLSchemaException("rcase-RecurseUnordered.2", null);
        }
</source>
    </clone>
    <clone nlines="12" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1172" startcolumn="17" endline="1183" endcolumn="17">
if ((fFacetsDefined &amp; FACET_MINLENGTH) != 0){
                    if (fBase.fLength &lt; fMinLength) {
                        // fBase.length, minLength and maxLength defined
                        reportError("length-minLength-maxLength.1.1", new Object[]{fTypeName, Integer.toString(fBase.fLength), Integer.toString(fMinLength)});
                    }
                    if ((fBase.fFacetsDefined &amp; FACET_MINLENGTH) == 0){
                        reportError("length-minLength-maxLength.1.2.a", new Object[]{fTypeName});
                    }
                    if (fMinLength != fBase.fMinLength){
                        reportError("length-minLength-maxLength.1.2.b", new Object[]{fTypeName, Integer.toString(fMinLength), Integer.toString(fBase.fMinLength)});
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1184" startcolumn="17" endline="1195" endcolumn="17">
if ((fFacetsDefined &amp; FACET_MAXLENGTH) != 0){
                    if (fBase.fLength &gt; fMaxLength) {
                        // fBase.length, minLength and maxLength defined
                        reportError("length-minLength-maxLength.2.1", new Object[]{fTypeName, Integer.toString(fBase.fLength), Integer.toString(fMaxLength)});
                    }
                    if ((fBase.fFacetsDefined &amp; FACET_MAXLENGTH) == 0){
                        reportError("length-minLength-maxLength.2.2.a", new Object[]{fTypeName});
                    }
                    if (fMaxLength != fBase.fMaxLength){
                        reportError("length-minLength-maxLength.2.2.b", new Object[]{fTypeName, Integer.toString(fMaxLength), Integer.toString(fBase.fBase.fMaxLength)});
                    }
                }
</source>
    </clone>
    <clone nlines="19" distance="3">
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="2023" startcolumn="7" endline="2041" endcolumn="7">
try {
        c = (Catalog) catalogs.elementAt(catPos);
      } catch (ClassCastException e) {
        String catfile = (String) catalogs.elementAt(catPos);
        c = newCatalog();

        try {
          c.parseCatalog(catfile);
        } catch (MalformedURLException mue) {
          catalogManager.debug.message(1, "Malformed Catalog URL", catfile);
        } catch (FileNotFoundException fnfe) {
          catalogManager.debug.message(1, "Failed to load catalog, file not found",
                        catfile);
        } catch (IOException ioe) {
          catalogManager.debug.message(1, "Failed to load catalog, I/O error", catfile);
        }

        catalogs.setElementAt(c, catPos);
      }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/Resolver.java" startline="614" startcolumn="13" endline="632" endcolumn="13">
try {
                c = (Resolver) catalogs.elementAt(catPos);
            } catch (ClassCastException e) {
                String catfile = (String) catalogs.elementAt(catPos);
                c = (Resolver) newCatalog();

                try {
                    c.parseCatalog(catfile);
                } catch (MalformedURLException mue) {
                    catalogManager.debug.message(1, "Malformed Catalog URL", catfile);
                } catch (FileNotFoundException fnfe) {
                    catalogManager.debug.message(1, "Failed to load catalog, file not found",
                          catfile);
                } catch (IOException ioe) {
                    catalogManager.debug.message(1, "Failed to load catalog, I/O error", catfile);
                }

                catalogs.setElementAt(c, catPos);
            }
</source>
    </clone>
    <clone nlines="16" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="967" startcolumn="17" endline="982" endcolumn="17">
if (needCheckBase) {
                    try {
                        fBase.validate(context, tempInfo);
                    } catch (InvalidDatatypeValueException ide) {
                        reportError(ide.getKey(), ide.getArgs());
                        reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxExclusive,
                                "maxExclusive", fBase.getName()});
                    }
                }
                // If maxExclusive == base.maxExclusive, then we only need to check
                // maxExclusive &lt;= base.maxInclusive
                else if (((fBase.fFacetsDefined &amp; FACET_MAXINCLUSIVE) != 0)) {
                    if (fDVs[fValidationDV].compare(fMaxExclusive, fBase.fMaxInclusive) &gt; 0) {
                        reportError( "maxExclusive-valid-restriction.2", new Object[]{facets.maxExclusive, fBase.fMaxInclusive});
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1014" startcolumn="17" endline="1029" endcolumn="17">
if (needCheckBase) {
                    try {
                        fBase.validate(context, tempInfo);
                    } catch (InvalidDatatypeValueException ide) {
                        reportError(ide.getKey(), ide.getArgs());
                        reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minExclusive,
                                "minExclusive", fBase.getName()});
                    }
                }
                // If minExclusive == base.minExclusive, then we only need to check
                // minExclusive &gt;= base.minInclusive
                else if (((fBase.fFacetsDefined &amp; FACET_MININCLUSIVE) != 0)) {
                    if (fDVs[fValidationDV].compare(fMinExclusive, fBase.fMinInclusive) &lt; 0) {
                        reportError( "minExclusive-valid-restriction.3", new Object[]{facets.minExclusive, fBase.fMinInclusive});
                    }
                }
</source>
    </clone>
    <clone nlines="10" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="580" startcolumn="17" endline="589" endcolumn="17">
for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append('-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="557" startcolumn="17" endline="566" endcolumn="17">
for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append((char)'-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
</source>
    </clone>
    <clone nlines="21" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="322" startcolumn="13" endline="342" endcolumn="13">
if ( addNSAttr ) {
                Enumeration keys;

                keys = _prefixes.keys();
                while ( keys.hasMoreElements() ) {
                    _printer.printSpace();
                    value = (String) keys.nextElement();
                    name = (String) _prefixes.get( value );
                    if ( name.length() == 0 ) {
                        _printer.printText( "xmlns=\"" );
                        printEscaped( value );
                        _printer.printText( '"' );
                    } else {
                        _printer.printText( "xmlns:" );
                        _printer.printText( name );
                        _printer.printText( "=\"" );
                        printEscaped( value );
                        _printer.printText( '"' );
                    }
                }
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="336" startcolumn="13" endline="356" endcolumn="13">
if (_prefixes != null) {
                Enumeration keys;

                keys = _prefixes.keys();
                while (keys.hasMoreElements()) {
                    _printer.printSpace();
                    value = (String) keys.nextElement();
                    name = (String) _prefixes.get( value );
                    if (name.length() == 0) {
                        _printer.printText( "xmlns=\"" );
                        printEscaped( value );
                        _printer.printText( '"' );
                    } else {
                        _printer.printText( "xmlns:" );
                        _printer.printText( name );
                        _printer.printText( "=\"" );
                        printEscaped( value );
                        _printer.printText( '"' );
                    }
                }
            }
</source>
    </clone>
    <clone nlines="20" distance="4">
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="530" startcolumn="17" endline="549" endcolumn="17">
if (!XMLChar.isValid(ch)) {
                    // check if it is surrogate
                    if (++index &lt; end) {
                        surrogates(ch, chars[index]);
                    }
                    else {
                        fatalError("The character '"+(char)ch+"' is an invalid XML character");
                    }
                    continue;
                } else {
                    if ( ( ch &gt;= ' ' &amp;&amp; _encodingInfo.isPrintable((char)ch) &amp;&amp; ch != 0xF7 ) ||
                        ch == '\n' || ch == '\r' || ch == '\t' ) {
                        _printer.printText((char)ch);
                    } else {
                        // The character is not printable -- split CDATA section
                        _printer.printText("]]&gt;&amp;#x");
                        _printer.printText(Integer.toHexString(ch));
                        _printer.printText(";&lt;![CDATA[");
                    }
                }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1573" startcolumn="13" endline="1593" endcolumn="13">
if (!XMLChar.isValid(ch)) {
                // check if it is surrogate
                if (++index &lt;length) {
                    surrogates(ch, text.charAt(index));
                }
                else {
                    fatalError("The character '"+(char)ch+"' is an invalid XML character");
                }
                continue;
            } else {
                if ( ( ch &gt;= ' ' &amp;&amp; _encodingInfo.isPrintable((char)ch) &amp;&amp; ch != 0xF7 ) ||
                     ch == '\n' || ch == '\r' || ch == '\t' ) {
                    _printer.printText((char)ch);
                } else {

                    // The character is not printable -- split CDATA section
                    _printer.printText("]]&gt;&amp;#x");
                    _printer.printText(Integer.toHexString(ch));
                    _printer.printText(";&lt;![CDATA[");
                }
            }
</source>
    </clone>
    <clone nlines="22" distance="2">
        <source file="com/sun/org/apache/xml/internal/utils/DefaultErrorHandler.java" startline="307" startcolumn="5" endline="328" endcolumn="25">
do
    {
      if(cause instanceof SAXParseException)
      {
        locator = new SAXSourceLocator((SAXParseException)cause);
      }
      else if (cause instanceof TransformerException)
      {
        SourceLocator causeLocator = ((TransformerException)cause).getLocator();
        if(null != causeLocator)
          locator = causeLocator;
      }
      if(cause instanceof TransformerException)
        cause = ((TransformerException)cause).getCause();
      else if(cause instanceof WrappedRuntimeException)
        cause = ((WrappedRuntimeException)cause).getException();
      else if(cause instanceof SAXException)
        cause = ((SAXException)cause).getException();
      else
        cause = null;
    }
    while(null != cause);
</source>
        <source file="com/sun/org/apache/xml/internal/utils/ListingErrorHandler.java" startline="294" startcolumn="9" endline="325" endcolumn="29">
do
        {
            // Find the current locator, if one present
            if(cause instanceof SAXParseException)
            {
                // A SAXSourceLocator is a Xalan helper class
                //  that implements both a SourceLocator and a SAX Locator
                //@todo check that the new locator actually has
                //  as much or more information as the
                //  current one already does
                locator = new SAXSourceLocator((SAXParseException)cause);
            }
            else if (cause instanceof TransformerException)
            {
                SourceLocator causeLocator = ((TransformerException)cause).getLocator();
                if(null != causeLocator)
                {
                    locator = causeLocator;
                }
            }

            // Then walk back down the chain of exceptions
            if(cause instanceof TransformerException)
                cause = ((TransformerException)cause).getCause();
            else if(cause instanceof WrappedRuntimeException)
                cause = ((WrappedRuntimeException)cause).getException();
            else if(cause instanceof SAXException)
                cause = ((SAXException)cause).getException();
            else
                cause = null;
        }
        while(null != cause);
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="786" startcolumn="13" endline="804" endcolumn="13">
if (isSet(this.options, SINGLE_LINE)) {
                matchStart = con.start;
                matchEnd = this. match(con, this.operations, con.start, 1, this.options);
            } else {
                boolean previousIsEOL = true;
                for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target [  matchStart ] ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this. match(con, this.operations,
                                                             matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="977" startcolumn="13" endline="995" endcolumn="13">
if (isSet(this.options, SINGLE_LINE)) {
                matchStart = con.start;
                matchEnd = this.match(con, this.operations, con.start, 1, this.options);
            } else {
                boolean previousIsEOL = true;
                for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target .charAt(  matchStart ) ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this.match(con, this.operations,
                                                            matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
            }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="786" startcolumn="13" endline="804" endcolumn="13">
if (isSet(this.options, SINGLE_LINE)) {
                matchStart = con.start;
                matchEnd = this. match(con, this.operations, con.start, 1, this.options);
            } else {
                boolean previousIsEOL = true;
                for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target [  matchStart ] ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this. match(con, this.operations,
                                                             matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java" startline="1650" startcolumn="13" endline="1668" endcolumn="13">
if (isSet(this.options, SINGLE_LINE)) {
                matchStart = con.start;
                matchEnd = this.match(con, this.operations, con.start, 1, this.options);
            } else {
                boolean previousIsEOL = true;
                for (matchStart = con.start;  matchStart &lt;= limit;  matchStart ++) {
                    int ch =  target .setIndex(  matchStart ) ;
                    if (isEOLChar(ch)) {
                        previousIsEOL = true;
                    } else {
                        if (previousIsEOL) {
                            if (0 &lt;= (matchEnd = this.match(con, this.operations,
                                                            matchStart, 1, this.options)))
                                break;
                        }
                        previousIsEOL = false;
                    }
                }
            }
</source>
    </clone>
    <clone nlines="14" distance="1">
        <source file="com/sun/org/apache/xerces/internal/dom/DOMNormalizer.java" startline="355" startcolumn="29" endline="368" endcolumn="29">
if (fDocument.errorChecking &amp;&amp; ((fConfiguration.features &amp; DOMConfigurationImpl.WELLFORMED) != 0)){
                                    isAttrValueWF(fErrorHandler, fError, fLocator, attributes, (AttrImpl)attr, attr.getValue(), fDocument.isXML11Version());
                                if (fDocument.isXMLVersionChanged()){
                                    wellformed=CoreDocumentImpl.isXMLName(node.getNodeName() , fDocument.isXML11Version());
                                    if (!wellformed){
                                                            String msg = DOMMessageFormatter.formatMessage(
                                                              DOMMessageFormatter.DOM_DOMAIN,
                                                              "wf-invalid-character-in-node-name",
                                                               new Object[]{"Attr",node.getNodeName()});
                                                            reportDOMError(fErrorHandler, fError, fLocator, msg, DOMError.SEVERITY_ERROR,
                                                                "wf-invalid-character-in-node-name");
                                    }
                                }
                            }
</source>
        <source file="com/sun/org/apache/xerces/internal/dom/DOMNormalizer.java" startline="928" startcolumn="21" endline="941" endcolumn="21">
if (fDocument.errorChecking &amp;&amp; ((fConfiguration.features &amp; DOMConfigurationImpl.WELLFORMED) != 0)) {
                            isAttrValueWF(fErrorHandler, fError, fLocator, attributes, (AttrImpl)attr, attr.getValue(), fDocument.isXML11Version());
                            if (fDocument.isXMLVersionChanged()){
                                boolean wellformed=CoreDocumentImpl.isXMLName(attr.getNodeName() , fDocument.isXML11Version());
                                if (!wellformed){
                                                        String msg = DOMMessageFormatter.formatMessage(
                                                            DOMMessageFormatter.DOM_DOMAIN,
                                                            "wf-invalid-character-in-node-name",
                                                            new Object[]{"Attribute", attr.getNodeName()});
                                        reportDOMError(fErrorHandler, fError, fLocator, msg, DOMError.SEVERITY_ERROR,
                                            "wf-invalid-character-in-node-name");
                                }
                        }
                    }
</source>
    </clone>
    <clone nlines="25" distance="1">
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDynamic.java" startline="118" startcolumn="5" endline="142" endcolumn="5">
for (int i = 0; i &lt; contextNodes.getLength(); i++)
    {
      int contextNode = contextNodes.item(i);
      xctxt.pushCurrentNode(contextNode);

      double result = 0;
      try
      {
        XPath dynamicXPath = new XPath(expr, xctxt.getSAXLocator(),
                                       xctxt.getNamespaceContext(),
                                       XPath.SELECT);
        result = dynamicXPath.execute(xctxt, contextNode, xctxt.getNamespaceContext()).num();
      }
      catch (TransformerException e)
      {
        xctxt.popCurrentNode();
        xctxt.popContextNodeList();
        return Double.NaN;
      }

      xctxt.popCurrentNode();

      if (result &gt; maxValue)
          maxValue = result;
    }
</source>
        <source file="com/sun/org/apache/xalan/internal/lib/ExsltDynamic.java" startline="199" startcolumn="5" endline="223" endcolumn="5">
for (int i = 0; i &lt; nl.getLength(); i++)
    {
      int contextNode = contextNodes.item(i);
      xctxt.pushCurrentNode(contextNode);

      double result = 0;
      try
      {
        XPath dynamicXPath = new XPath(expr, xctxt.getSAXLocator(),
                                       xctxt.getNamespaceContext(),
                                       XPath.SELECT);
        result = dynamicXPath.execute(xctxt, contextNode, xctxt.getNamespaceContext()).num();
      }
      catch (TransformerException e)
      {
        xctxt.popCurrentNode();
        xctxt.popContextNodeList();
        return Double.NaN;
      }

      xctxt.popCurrentNode();

      if (result &lt; minValue)
          minValue = result;
    }
</source>
    </clone>
    <clone nlines="21" distance="2">
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="1803" startcolumn="5" endline="1823" endcolumn="5">
if (delCats.size() &gt; 0) {
      Enumeration enCats = delCats.elements();

      if (catalogManager.debug.getDebug() &gt; 1) {
        catalogManager.debug.message(2, "Switching to delegated catalog(s):");
        while (enCats.hasMoreElements()) {
          String delegatedCatalog = (String) enCats.nextElement();
          catalogManager.debug.message(2, "\t" + delegatedCatalog);
        }
      }

      Catalog dcat = newCatalog();

      enCats = delCats.elements();
      while (enCats.hasMoreElements()) {
        String delegatedCatalog = (String) enCats.nextElement();
        dcat.parseCatalog(delegatedCatalog);
      }

      return dcat.resolveSystem(systemId);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="1636" startcolumn="5" endline="1656" endcolumn="5">
if (delCats.size() &gt; 0) {
      Enumeration enCats = delCats.elements();

      if (catalogManager.debug.getDebug() &gt; 1) {
        catalogManager.debug.message(2, "Switching to delegated catalog(s):");
        while (enCats.hasMoreElements()) {
          String delegatedCatalog = (String) enCats.nextElement();
          catalogManager.debug.message(2, "\t" + delegatedCatalog);
        }
      }

      Catalog dcat = newCatalog();

      enCats = delCats.elements();
      while (enCats.hasMoreElements()) {
        String delegatedCatalog = (String) enCats.nextElement();
        dcat.parseCatalog(delegatedCatalog);
      }

      return dcat.resolvePublic(publicId, null);
    }
</source>
    </clone>
    <clone nlines="21" distance="2">
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="1961" startcolumn="5" endline="1981" endcolumn="5">
if (delCats.size() &gt; 0) {
      Enumeration enCats = delCats.elements();

      if (catalogManager.debug.getDebug() &gt; 1) {
        catalogManager.debug.message(2, "Switching to delegated catalog(s):");
        while (enCats.hasMoreElements()) {
          String delegatedCatalog = (String) enCats.nextElement();
          catalogManager.debug.message(2, "\t" + delegatedCatalog);
        }
      }

      Catalog dcat = newCatalog();

      enCats = delCats.elements();
      while (enCats.hasMoreElements()) {
        String delegatedCatalog = (String) enCats.nextElement();
        dcat.parseCatalog(delegatedCatalog);
      }

      return dcat.resolveURI(uri);
    }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/Catalog.java" startline="1636" startcolumn="5" endline="1656" endcolumn="5">
if (delCats.size() &gt; 0) {
      Enumeration enCats = delCats.elements();

      if (catalogManager.debug.getDebug() &gt; 1) {
        catalogManager.debug.message(2, "Switching to delegated catalog(s):");
        while (enCats.hasMoreElements()) {
          String delegatedCatalog = (String) enCats.nextElement();
          catalogManager.debug.message(2, "\t" + delegatedCatalog);
        }
      }

      Catalog dcat = newCatalog();

      enCats = delCats.elements();
      while (enCats.hasMoreElements()) {
        String delegatedCatalog = (String) enCats.nextElement();
        dcat.parseCatalog(delegatedCatalog);
      }

      return dcat.resolvePublic(publicId, null);
    }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerTraceWriter.java" startline="249" startcolumn="13" endline="261" endcolumn="13">
if (c &lt; 0x80)
                buf[count++] = (byte) (c);
            else if (c &lt; 0x800)
            {
                buf[count++] = (byte) (0xc0 + (c &gt;&gt; 6));
                buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
            }
            else
            {
                buf[count++] = (byte) (0xe0 + (c &gt;&gt; 12));
                buf[count++] = (byte) (0x80 + ((c &gt;&gt; 6) &amp; 0x3f));
                buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerTraceWriter.java" startline="189" startcolumn="9" endline="203" endcolumn="9">
if (c &lt; 0x80)
        {
            buf[count++] = (byte) (c);
        }
        else if (c &lt; 0x800)
        {
            buf[count++] = (byte) (0xc0 + (c &gt;&gt; 6));
            buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
        }
        else
        {
            buf[count++] = (byte) (0xe0 + (c &gt;&gt; 12));
            buf[count++] = (byte) (0x80 + ((c &gt;&gt; 6) &amp; 0x3f));
            buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
        }
</source>
    </clone>
    <clone nlines="13" distance="2">
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerTraceWriter.java" startline="308" startcolumn="13" endline="320" endcolumn="13">
if (c &lt; 0x80)
                buf[count++] = (byte) (c);
            else if (c &lt; 0x800)
            {
                buf[count++] = (byte) (0xc0 + (c &gt;&gt; 6));
                buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
            }
            else
            {
                buf[count++] = (byte) (0xe0 + (c &gt;&gt; 12));
                buf[count++] = (byte) (0x80 + ((c &gt;&gt; 6) &amp; 0x3f));
                buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/SerializerTraceWriter.java" startline="189" startcolumn="9" endline="203" endcolumn="9">
if (c &lt; 0x80)
        {
            buf[count++] = (byte) (c);
        }
        else if (c &lt; 0x800)
        {
            buf[count++] = (byte) (0xc0 + (c &gt;&gt; 6));
            buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
        }
        else
        {
            buf[count++] = (byte) (0xe0 + (c &gt;&gt; 12));
            buf[count++] = (byte) (0x80 + ((c &gt;&gt; 6) &amp; 0x3f));
            buf[count++] = (byte) (0x80 + (c &amp; 0x3f));
        }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2282" startcolumn="9" endline="2301" endcolumn="9">
if (fDocumentTypeIndex != -1) {
            boolean found = false;
            int nodeIndex = fDeferredDocumentImpl.getLastChild (fDocumentTypeIndex, false);
            while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.NOTATION_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getPrevSibling (nodeIndex, false);
            }
            if (!found) {
                int notationIndex = fDeferredDocumentImpl.createDeferredNotation (
                name, publicId, literalSystemId, identifier.getBaseSystemId ());
                fDeferredDocumentImpl.appendChild (fDocumentTypeIndex, notationIndex);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2064" startcolumn="9" endline="2083" endcolumn="9">
if (fDocumentTypeIndex != -1) {
            boolean found = false;
            int nodeIndex = fDeferredDocumentImpl.getLastChild (fDocumentTypeIndex, false);
            while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getRealPrevSibling (nodeIndex, false);
            }
            if (!found) {
                int entityIndex = fDeferredDocumentImpl.createDeferredEntity (
                name, publicId, literalSystemId, null, identifier.getBaseSystemId ());
                fDeferredDocumentImpl.appendChild (fDocumentTypeIndex, entityIndex);
            }
        }
</source>
    </clone>
    <clone nlines="20" distance="2">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2282" startcolumn="9" endline="2301" endcolumn="9">
if (fDocumentTypeIndex != -1) {
            boolean found = false;
            int nodeIndex = fDeferredDocumentImpl.getLastChild (fDocumentTypeIndex, false);
            while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.NOTATION_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getPrevSibling (nodeIndex, false);
            }
            if (!found) {
                int notationIndex = fDeferredDocumentImpl.createDeferredNotation (
                name, publicId, literalSystemId, identifier.getBaseSystemId ());
                fDeferredDocumentImpl.appendChild (fDocumentTypeIndex, notationIndex);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2207" startcolumn="9" endline="2226" endcolumn="9">
if (fDocumentTypeIndex != -1) {
            boolean found = false;
            int nodeIndex = fDeferredDocumentImpl.getLastChild (fDocumentTypeIndex, false);
            while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getRealPrevSibling (nodeIndex, false);
            }
            if (!found) {
                int entityIndex = fDeferredDocumentImpl.createDeferredEntity (
                name, publicId, literalSystemId, notation, identifier.getBaseSystemId ());
                fDeferredDocumentImpl.appendChild (fDocumentTypeIndex, entityIndex);
            }
        }
</source>
    </clone>
    <clone nlines="31" distance="3">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="859" startcolumn="9" endline="889" endcolumn="9">
if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {
            if (fCurrentScanner != fXML11NSDocScanner) {
                fCurrentScanner = fXML11NSDocScanner;
                setProperty(DOCUMENT_SCANNER, fXML11NSDocScanner);
            }

            fXML11NSDocScanner.setDTDValidator(null);
            fXML11NSDocScanner.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fXML11NSDocScanner);
            }
            fLastComponent = fXML11NSDocScanner;

        } else {
                        // create components
                          if (fXML11DocScanner == null) {
                                        // non namespace document pipeline
                                        fXML11DocScanner = new XML11DocumentScannerImpl();
                                        addXML11Component(fXML11DocScanner);
                          }
            if (fCurrentScanner != fXML11DocScanner) {
                fCurrentScanner = fXML11DocScanner;
                setProperty(DOCUMENT_SCANNER, fXML11DocScanner);
            }
            fXML11DocScanner.setDocumentHandler(fDocumentHandler);

            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fXML11DocScanner);
            }
            fLastComponent = fXML11DocScanner;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="910" startcolumn="9" endline="940" endcolumn="9">
if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {
            if (fCurrentScanner != fNamespaceScanner) {
                fCurrentScanner = fNamespaceScanner;
                setProperty(DOCUMENT_SCANNER, fNamespaceScanner);
            }
            fNamespaceScanner.setDTDValidator(null);
            fNamespaceScanner.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fNamespaceScanner);
            }
            fLastComponent = fNamespaceScanner;
        } else {
            // create components
            if (fNonNSScanner == null) {
                fNonNSScanner = new XMLDocumentScannerImpl();
                // add components
                addComponent((XMLComponent) fNonNSScanner);

            }
            if (fCurrentScanner != fNonNSScanner) {
                fCurrentScanner = fNonNSScanner;
                setProperty(DOCUMENT_SCANNER, fNonNSScanner);

            }

            fNonNSScanner.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler != null) {
                fDocumentHandler.setDocumentSource(fNonNSScanner);
            }
            fLastComponent = fNonNSScanner;
        }
</source>
    </clone>
    <clone nlines="20" distance="1">
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2064" startcolumn="9" endline="2083" endcolumn="9">
if (fDocumentTypeIndex != -1) {
            boolean found = false;
            int nodeIndex = fDeferredDocumentImpl.getLastChild (fDocumentTypeIndex, false);
            while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getRealPrevSibling (nodeIndex, false);
            }
            if (!found) {
                int entityIndex = fDeferredDocumentImpl.createDeferredEntity (
                name, publicId, literalSystemId, null, identifier.getBaseSystemId ());
                fDeferredDocumentImpl.appendChild (fDocumentTypeIndex, entityIndex);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/AbstractDOMParser.java" startline="2207" startcolumn="9" endline="2226" endcolumn="9">
if (fDocumentTypeIndex != -1) {
            boolean found = false;
            int nodeIndex = fDeferredDocumentImpl.getLastChild (fDocumentTypeIndex, false);
            while (nodeIndex != -1) {
                short nodeType = fDeferredDocumentImpl.getNodeType (nodeIndex, false);
                if (nodeType == Node.ENTITY_NODE) {
                    String nodeName = fDeferredDocumentImpl.getNodeName (nodeIndex, false);
                    if (nodeName.equals (name)) {
                        found = true;
                        break;
                    }
                }
                nodeIndex = fDeferredDocumentImpl.getRealPrevSibling (nodeIndex, false);
            }
            if (!found) {
                int entityIndex = fDeferredDocumentImpl.createDeferredEntity (
                name, publicId, literalSystemId, notation, identifier.getBaseSystemId ());
                fDeferredDocumentImpl.appendChild (fDocumentTypeIndex, entityIndex);
            }
        }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="199" startcolumn="9" endline="217" endcolumn="9">
while (index &lt;= limit) {
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                char ch1 = ch = chars[--index];
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="148" startcolumn="9" endline="166" endcolumn="9">
while (index &lt;= limit) {
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                char ch1 = ch = iterator.setIndex(--index);
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
    </clone>
    <clone nlines="19" distance="4">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="199" startcolumn="9" endline="217" endcolumn="9">
while (index &lt;= limit) {
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                char ch1 = ch = chars[--index];
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/BMPattern.java" startline="174" startcolumn="9" endline="192" endcolumn="9">
while (index &lt;= limit) {
            int pindex = plength;
            int nindex = index+1;
            char ch;
            do {
                char ch1 = ch = text.charAt(--index);
                char ch2 = this.pattern[--pindex];
                if (ch1 != ch2) {
                    ch1 = Character.toUpperCase(ch1);
                    ch2 = Character.toUpperCase(ch2);
                    if (ch1 != ch2 &amp;&amp; Character.toLowerCase(ch1) != Character.toLowerCase(ch2))
                        break;
                }
                if (pindex == 0)
                    return index;
            } while (pindex &gt; 0);
            index += this.shiftTable[ch % this.shiftTable.length]+1;
            if (index &lt; nindex)  index = nindex;
        }
</source>
    </clone>
    <clone nlines="29" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="306" startcolumn="30" endline="337" endcolumn="25">
if (entityName == fQuotSymbol) {
                            fStringBuffer.append('"');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueD: \""
                                                   + fStringBuffer.toString()
                                                   + "\"");
                            }
                        }
                        else {
                            if (fEntityManager.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                                 new Object[] { entityName });
                            }
                            else {
                                if (!fEntityManager.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                                       "EntityNotDeclared",
                                                                       new Object[]{entityName},
                                                                       XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    }
                                    else {
                                        reportFatalError("EntityNotDeclared",
                                                         new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
                        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="924" startcolumn="32" endline="952" endcolumn="25">
if (entityName == fQuotSymbol) {
                            stringBuffer.append('"');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueD: \""
                                        + stringBuffer.toString()
                                        + "\"");
                            }
                        } else {
                            if (fEntityStore.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                        new Object[] { entityName });
                            } else {
                                if (!fEntityStore.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(fEntityScanner,XMLMessageFormatter.XML_DOMAIN,
                                                    "EntityNotDeclared",
                                                    new Object[]{entityName},
                                                    XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    } else {
                                        reportFatalError("EntityNotDeclared",
                                                new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
                        }
</source>
    </clone>
    <clone nlines="25" distance="2">
        <source file="javax/xml/datatype/FactoryFinder.java" startline="241" startcolumn="9" endline="265" endcolumn="9">
try {
            if (firstTime) {
                synchronized (cacheProps) {
                    if (firstTime) {
                        String configFile = ss.getSystemProperty("java.home") + File.separator +
                            "lib" + File.separator + "jaxp.properties";
                        File f = new File(configFile);
                        firstTime = false;
                        if (ss.doesFileExist(f)) {
                            dPrint("Read properties file "+f);
                            cacheProps.load(ss.getFileInputStream(f));
                        }
                    }
                }
            }
            final String factoryClassName = cacheProps.getProperty(factoryId);

            if (factoryClassName != null) {
                dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);
                return newInstance(type, factoryClassName, null, true);
            }
        }
        catch (Exception ex) {
            if (debug) ex.printStackTrace();
        }
</source>
        <source file="javax/xml/transform/FactoryFinder.java" startline="272" startcolumn="9" endline="296" endcolumn="9">
try {
            if (firstTime) {
                synchronized (cacheProps) {
                    if (firstTime) {
                        String configFile = ss.getSystemProperty("java.home") + File.separator +
                            "lib" + File.separator + "jaxp.properties";
                        File f = new File(configFile);
                        firstTime = false;
                        if (ss.doesFileExist(f)) {
                            dPrint("Read properties file "+f);
                            cacheProps.load(ss.getFileInputStream(f));
                        }
                    }
                }
            }
            final String factoryClassName = cacheProps.getProperty(factoryId);

            if (factoryClassName != null) {
                dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);
                return newInstance(type, factoryClassName, null, true, true);
            }
        }
        catch (Exception ex) {
            if (debug) ex.printStackTrace();
        }
</source>
    </clone>
    <clone nlines="25" distance="2">
        <source file="javax/xml/parsers/FactoryFinder.java" startline="240" startcolumn="9" endline="264" endcolumn="9">
try {
            if (firstTime) {
                synchronized (cacheProps) {
                    if (firstTime) {
                        String configFile = ss.getSystemProperty("java.home") + File.separator +
                            "lib" + File.separator + "jaxp.properties";
                        File f = new File(configFile);
                        firstTime = false;
                        if (ss.doesFileExist(f)) {
                            dPrint("Read properties file "+f);
                            cacheProps.load(ss.getFileInputStream(f));
                        }
                    }
                }
            }
            final String factoryClassName = cacheProps.getProperty(factoryId);

            if (factoryClassName != null) {
                dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);
                return newInstance(type, factoryClassName, null, true);
            }
        }
        catch (Exception ex) {
            if (debug) ex.printStackTrace();
        }
</source>
        <source file="javax/xml/transform/FactoryFinder.java" startline="272" startcolumn="9" endline="296" endcolumn="9">
try {
            if (firstTime) {
                synchronized (cacheProps) {
                    if (firstTime) {
                        String configFile = ss.getSystemProperty("java.home") + File.separator +
                            "lib" + File.separator + "jaxp.properties";
                        File f = new File(configFile);
                        firstTime = false;
                        if (ss.doesFileExist(f)) {
                            dPrint("Read properties file "+f);
                            cacheProps.load(ss.getFileInputStream(f));
                        }
                    }
                }
            }
            final String factoryClassName = cacheProps.getProperty(factoryId);

            if (factoryClassName != null) {
                dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);
                return newInstance(type, factoryClassName, null, true, true);
            }
        }
        catch (Exception ex) {
            if (debug) ex.printStackTrace();
        }
</source>
    </clone>
    <clone nlines="29" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/URI.java" startline="764" startcolumn="5" endline="792" endcolumn="5">
while (index &lt; end)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == '?' || testChar == '#')
      {
        break;
      }

      // check for valid escape sequence
      if (testChar == '%')
      {
        if (index + 2 &gt;= end ||!isHex(p_uriSpec.charAt(index + 1))
                ||!isHex(p_uriSpec.charAt(index + 2)))
        {
          throw new MalformedURIException(
            XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE, null)); //"Path contains invalid escape sequence!");
        }
      }
      else if (!isReservedCharacter(testChar)
               &amp;&amp;!isUnreservedCharacter(testChar))
      {
        if ('\\' != testChar)
          throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR, new Object[]{String.valueOf(testChar)})); //"Path contains invalid character: "
                                          //+ testChar);
      }

      index++;
    }
</source>
        <source file="com/sun/org/apache/xml/internal/serializer/utils/URI.java" startline="743" startcolumn="5" endline="771" endcolumn="5">
while (index &lt; end)
    {
      testChar = p_uriSpec.charAt(index);

      if (testChar == '?' || testChar == '#')
      {
        break;
      }

      // check for valid escape sequence
      if (testChar == '%')
      {
        if (index + 2 &gt;= end ||!isHex(p_uriSpec.charAt(index + 1))
                ||!isHex(p_uriSpec.charAt(index + 2)))
        {
          throw new MalformedURIException(
            Utils.messages.createMessage(MsgKey.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE, null)); //"Path contains invalid escape sequence!");
        }
      }
      else if (!isReservedCharacter(testChar)
               &amp;&amp;!isUnreservedCharacter(testChar))
      {
        if ('\\' != testChar)
          throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR, new Object[]{String.valueOf(testChar)})); //"Path contains invalid character: "
                                          //+ testChar);
      }

      index++;
    }
</source>
    </clone>
    <clone nlines="34" distance="1">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBaseIterators.java" startline="1308" startcolumn="7" endline="1342" endcolumn="7">
if (_isRestartable)
      {
        node = makeNodeIdentity(node);

        // iterator is not a clone
        int parent, index;

       if (_type(node) == DTM.ATTRIBUTE_NODE)
        node = _parent(node);

        _startNode = node;
        _stack[index = 0] = node;



                parent=node;
                while ((parent = _parent(parent)) != NULL)
                {
                        if (++index == _stack.length)
                        {
                                final int[] stack = new int[index + 4];
                                System.arraycopy(_stack, 0, stack, 0, index);
                                _stack = stack;
                        }
                        _stack[index] = parent;
        }
        if(index&gt;0)
                --index; // Pop actual root node (if not start) back off the stack

        _currentNode=_stack[index]; // Last parent before root node

        _oldsp = _sp = index;

        return resetPosition();
      }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/sax2dtm/SAX2DTM2.java" startline="866" startcolumn="7" endline="899" endcolumn="7">
if (_isRestartable)
      {
        node = makeNodeIdentity(node);

        // iterator is not a clone
        int parent, index;

       if (_type2(node) == DTM.ATTRIBUTE_NODE)
         node = _parent2(node);

        _startNode = node;
        _stack[index = 0] = node;

        parent=node;
        while ((parent = _parent2(parent)) != NULL)
        {
          if (++index == _stack.length)
          {
            final int[] stack = new int[index*2];
            System.arraycopy(_stack, 0, stack, 0, index);
            _stack = stack;
          }
          _stack[index] = parent;
        }

        if(index&gt;0)
          --index; // Pop actual root node (if not start) back off the stack

        _currentNode=_stack[index]; // Last parent before root node

        _oldsp = _sp = index;

        return resetPosition();
      }
</source>
    </clone>
    <clone nlines="26" distance="2">
        <source file="com/sun/xml/internal/stream/events/DummyEvent.java" startline="204" startcolumn="9" endline="229" endcolumn="9">
for (; i &lt; len; ++i) {
            switch (data.charAt(i)) {
            case '&lt;':
                writer.write(data, start, i - start);
                writer.write("&amp;lt;");
                start = i + 1;
                break;

            case '&amp;':
                writer.write(data, start, i - start);
                writer.write("&amp;amp;");
                start = i + 1;
                break;

            case '&gt;':
                writer.write(data, start, i - start);
                writer.write("&amp;gt;");
                start = i + 1;
                break;
            case '"':
                writer.write(data, start, i - start);
                writer.write("&amp;quot;");
                start = i + 1;
                break;
            }
        }
</source>
        <source file="com/sun/xml/internal/stream/events/DummyEvent.java" startline="203" startcolumn="9" endline="229" endcolumn="9">
loop:
        for (; i &lt; len; ++i) {
            switch (data.charAt(i)) {
            case '&lt;':
                writer.write(data, start, i - start);
                writer.write("&amp;lt;");
                start = i + 1;
                break;

            case '&amp;':
                writer.write(data, start, i - start);
                writer.write("&amp;amp;");
                start = i + 1;
                break;

            case '&gt;':
                writer.write(data, start, i - start);
                writer.write("&amp;gt;");
                start = i + 1;
                break;
            case '"':
                writer.write(data, start, i - start);
                writer.write("&amp;quot;");
                start = i + 1;
                break;
            }
        }
</source>
    </clone>
    <clone nlines="32" distance="4">
        <source file="com/sun/xml/internal/stream/writers/XMLDOMWriterImpl.java" startline="386" startcolumn="9" endline="417" endcolumn="9">
if(ownerDoc != null){
            String qualifiedName = null;
            String prefix = null;
            if(namespaceURI == null ){
                throw new XMLStreamException("NamespaceURI cannot be null");
            }
            if(localName == null){
                throw new XMLStreamException("Local name cannot be null");
            }

            if(namespaceContext != null){
                prefix = namespaceContext.getPrefix(namespaceURI);
            }
            if(prefix == null){
                throw new XMLStreamException("Namespace URI "+namespaceURI +
                        "is not bound to any prefix" );
            }
            if("".equals(prefix)){
                qualifiedName = localName;
            }else{

                qualifiedName = getQName(prefix,localName);

            }
            Element element = ownerDoc.createElementNS(namespaceURI, qualifiedName);
            if(currentNode!=null){
                currentNode.appendChild(element);
            }else{
                ownerDoc.appendChild(element);
            }
            //currentNode = element;
        }
</source>
        <source file="com/sun/xml/internal/stream/writers/XMLDOMWriterImpl.java" startline="637" startcolumn="9" endline="669" endcolumn="9">
if(ownerDoc != null){
            String qualifiedName = null;
            String prefix = null;

            if(namespaceURI == null ){
                throw new XMLStreamException("NamespaceURI cannot be null");
            }
            if(localName == null){
                throw new XMLStreamException("Local name cannot be null");
            }

            if(namespaceContext != null){
                prefix = namespaceContext.getPrefix(namespaceURI);
            }
            if(prefix == null){
                throw new XMLStreamException("Namespace URI "+namespaceURI +
                        "is not bound to any prefix" );
            }
            if("".equals(prefix)){
                qualifiedName = localName;
            }else{
                qualifiedName =  getQName(prefix,localName);
            }

            Element element = ownerDoc.createElementNS(namespaceURI, qualifiedName);

            if(currentNode!=null){
                currentNode.appendChild(element);
            }else{
                ownerDoc.appendChild(element);
            }
            currentNode = element;
        }
</source>
    </clone>
    <clone nlines="24" distance="4">
        <source file="com/sun/org/apache/xml/internal/resolver/readers/SAXCatalogReader.java" startline="350" startcolumn="7" endline="373" endcolumn="7">
try {
        saxParser = (SAXCatalogParser)
          ReflectUtil.forName(saxParserClass).newInstance();

        saxParser.setCatalog(catalog);
        saxParser.startDocument();
        saxParser.startElement(name, atts);
      } catch (ClassNotFoundException cnfe) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cnfe.toString());
      } catch (InstantiationException ie) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, ie.toString());
      } catch (IllegalAccessException iae) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, iae.toString());
      } catch (ClassCastException cce ) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cce.toString());
      }
</source>
        <source file="com/sun/org/apache/xml/internal/resolver/readers/SAXCatalogReader.java" startline="411" startcolumn="7" endline="434" endcolumn="7">
try {
        saxParser = (SAXCatalogParser)
          ReflectUtil.forName(saxParserClass).newInstance();

        saxParser.setCatalog(catalog);
        saxParser.startDocument();
        saxParser.startElement(namespaceURI, localName, qName, atts);
      } catch (ClassNotFoundException cnfe) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cnfe.toString());
      } catch (InstantiationException ie) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, ie.toString());
      } catch (IllegalAccessException iae) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, iae.toString());
      } catch (ClassCastException cce ) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cce.toString());
      }
</source>
    </clone>
    <clone nlines="21" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3605" startcolumn="20" endline="3625" endcolumn="13">
for (int i = 0; i &lt; size; i = next) {
                next = i + fFieldCount;
                for (int j = 0; j &lt; fFieldCount; j++) {
                    Object value1 = fLocalValues[j];
                    Object value2 = fValues.elementAt(i);
                    short valueType1 = fLocalValueTypes[j];
                    short valueType2 = getValueTypeAt(i);
                    if (value1 == null || value2 == null || valueType1 != valueType2 || !(value1.equals(value2))) {
                        continue LOOP;
                    }
                    else if(valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {
                        ShortList list1 = fLocalItemValueTypes[j];
                        ShortList list2 = getItemValueTypeAt(i);
                        if(list1 == null || list2 == null || !list1.equals(list2))
                            continue LOOP;
                    }
                    i++;
                }
                // found it
                return true;
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3605" startcolumn="13" endline="3625" endcolumn="13">
LOOP : for (int i = 0; i &lt; size; i = next) {
                next = i + fFieldCount;
                for (int j = 0; j &lt; fFieldCount; j++) {
                    Object value1 = fLocalValues[j];
                    Object value2 = fValues.elementAt(i);
                    short valueType1 = fLocalValueTypes[j];
                    short valueType2 = getValueTypeAt(i);
                    if (value1 == null || value2 == null || valueType1 != valueType2 || !(value1.equals(value2))) {
                        continue LOOP;
                    }
                    else if(valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {
                        ShortList list1 = fLocalItemValueTypes[j];
                        ShortList list2 = getItemValueTypeAt(i);
                        if(list1 == null || list2 == null || !list1.equals(list2))
                            continue LOOP;
                    }
                    i++;
                }
                // found it
                return true;
            }
</source>
    </clone>
    <clone nlines="18" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="575" startcolumn="18" endline="592" endcolumn="13">
if (this == Token.token_not_spaces)
                ret = "\\S";
            else {
                StringBuffer sb = new StringBuffer();
                sb.append("[^");
                for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append('-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
                sb.append("]");
                ret = sb.toString();
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="552" startcolumn="18" endline="569" endcolumn="13">
if (this == Token.token_spaces)
                ret = "\\s";
            else {
                StringBuffer sb = new StringBuffer();
                sb.append("[");
                for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append((char)'-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
                sb.append("]");
                ret = sb.toString();
            }
</source>
    </clone>
    <clone nlines="38" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="701" startcolumn="13" endline="738" endcolumn="13">
try {
                                fValidationManager.reset();
                fVersionDetector.reset(this);
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="806" startcolumn="13" endline="844" endcolumn="13">
try {
                fValidationManager.reset();
                fVersionDetector.reset(this);
                fConfigUpdated = true;
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
</source>
    </clone>
    <clone nlines="38" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="627" startcolumn="13" endline="664" endcolumn="13">
try {
                                fValidationManager.reset();
                fVersionDetector.reset(this);
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="806" startcolumn="13" endline="844" endcolumn="13">
try {
                fValidationManager.reset();
                fVersionDetector.reset(this);
                fConfigUpdated = true;
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
</source>
    </clone>
    <clone nlines="48" distance="3">
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBase.java" startline="675" startcolumn="9" endline="722" endcolumn="9">
switch (type)
        {
        case DTM.ATTRIBUTE_NODE :
          typestring = "ATTRIBUTE_NODE";
          break;
        case DTM.CDATA_SECTION_NODE :
          typestring = "CDATA_SECTION_NODE";
          break;
        case DTM.COMMENT_NODE :
          typestring = "COMMENT_NODE";
          break;
        case DTM.DOCUMENT_FRAGMENT_NODE :
          typestring = "DOCUMENT_FRAGMENT_NODE";
          break;
        case DTM.DOCUMENT_NODE :
          typestring = "DOCUMENT_NODE";
          break;
        case DTM.DOCUMENT_TYPE_NODE :
          typestring = "DOCUMENT_NODE";
          break;
        case DTM.ELEMENT_NODE :
          typestring = "ELEMENT_NODE";
          break;
        case DTM.ENTITY_NODE :
          typestring = "ENTITY_NODE";
          break;
        case DTM.ENTITY_REFERENCE_NODE :
          typestring = "ENTITY_REFERENCE_NODE";
          break;
        case DTM.NAMESPACE_NODE :
          typestring = "NAMESPACE_NODE";
          break;
        case DTM.NOTATION_NODE :
          typestring = "NOTATION_NODE";
          break;
        case DTM.NULL :
          typestring = "NULL";
          break;
        case DTM.PROCESSING_INSTRUCTION_NODE :
          typestring = "PROCESSING_INSTRUCTION_NODE";
          break;
        case DTM.TEXT_NODE :
          typestring = "TEXT_NODE";
          break;
        default :
          typestring = "Unknown!";
          break;
        }
</source>
        <source file="com/sun/org/apache/xml/internal/dtm/ref/DTMDefaultBase.java" startline="798" startcolumn="9" endline="845" endcolumn="9">
switch (getNodeType(nodeHandle))
        {
        case DTM.ATTRIBUTE_NODE :
          typestring = "ATTR";
          break;
        case DTM.CDATA_SECTION_NODE :
          typestring = "CDATA";
          break;
        case DTM.COMMENT_NODE :
          typestring = "COMMENT";
          break;
        case DTM.DOCUMENT_FRAGMENT_NODE :
          typestring = "DOC_FRAG";
          break;
        case DTM.DOCUMENT_NODE :
          typestring = "DOC";
          break;
        case DTM.DOCUMENT_TYPE_NODE :
          typestring = "DOC_TYPE";
          break;
        case DTM.ELEMENT_NODE :
          typestring = "ELEMENT";
          break;
        case DTM.ENTITY_NODE :
          typestring = "ENTITY";
          break;
        case DTM.ENTITY_REFERENCE_NODE :
          typestring = "ENT_REF";
          break;
        case DTM.NAMESPACE_NODE :
          typestring = "NAMESPACE";
          break;
        case DTM.NOTATION_NODE :
          typestring = "NOTATION";
          break;
        case DTM.NULL :
          typestring = "null";
          break;
        case DTM.PROCESSING_INSTRUCTION_NODE :
          typestring = "PI";
          break;
        case DTM.TEXT_NODE :
          typestring = "TEXT";
          break;
        default :
          typestring = "Unknown!";
          break;
        }
</source>
    </clone>
    <clone nlines="32" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="992" startcolumn="14" endline="1023" endcolumn="9">
if (hasXIncludeNamespace(element)) {
            if (getSawInclude(fDepth - 1)) {
                reportFatalError(
                    "IncludeChild",
                    new Object[] { element.rawname });
            }
            if (getSawFallback(fDepth - 1)) {
                reportFatalError(
                    "FallbackChild",
                    new Object[] { element.rawname });
            }
            if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.emptyElement(element, attributes, augs);
                }
            }
        }
        else if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.emptyElement(element, attributes, augs);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="920" startcolumn="14" endline="951" endcolumn="9">
if (hasXIncludeNamespace(element)) {
            if (getSawInclude(fDepth - 1)) {
                reportFatalError(
                    "IncludeChild",
                    new Object[] { element.rawname });
            }
            if (getSawFallback(fDepth - 1)) {
                reportFatalError(
                    "FallbackChild",
                    new Object[] { element.rawname });
            }
            if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth++ == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.startElement(element, attributes, augs);
                }
            }
        }
        else if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth++ == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.startElement(element, attributes, augs);
            }
        }
</source>
    </clone>
    <clone nlines="29" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="595" startcolumn="9" endline="624" endcolumn="9">
while (true){
            //while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {
            c = fCurrentEntity.ch[fCurrentEntity.position];
            if(c &lt; 127){
                vc = VALID_NAMES[c];
            }else{
                vc = XMLChar.isName(c);
            }
            if(!vc)break;

            if (++fCurrentEntity.position == fCurrentEntity.count) {
                int length = fCurrentEntity.position - offset;
                invokeListeners(length);
                if (length == fCurrentEntity.fBufferSize) {
                    // bad luck we have to resize our buffer
                    char[] tmp = new char[fCurrentEntity.fBufferSize * 2];
                    System.arraycopy(fCurrentEntity.ch, offset,
                            tmp, 0, length);
                    fCurrentEntity.ch = tmp;
                    fCurrentEntity.fBufferSize *= 2;
                } else {
                    System.arraycopy(fCurrentEntity.ch, offset,
                            fCurrentEntity.ch, 0, length);
                }
                offset = 0;
                if (load(length, false, false)) {
                    break;
                }
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="690" startcolumn="13" endline="718" endcolumn="13">
while (true ){
                //XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) ;
                char c = fCurrentEntity.ch[fCurrentEntity.position];
                if(c &lt; 127){
                    vc = VALID_NAMES[c];
                }else{
                    vc = XMLChar.isName(c);
                }
                if(!vc)break;
                if (++fCurrentEntity.position == fCurrentEntity.count) {
                    int length = fCurrentEntity.position - offset;
                    invokeListeners(length);
                    if (length == fCurrentEntity.fBufferSize) {
                        // bad luck we have to resize our buffer
                        char[] tmp = new char[fCurrentEntity.fBufferSize * 2];
                        System.arraycopy(fCurrentEntity.ch, offset,
                                tmp, 0, length);
                        fCurrentEntity.ch = tmp;
                        fCurrentEntity.fBufferSize *= 2;
                    } else {
                        System.arraycopy(fCurrentEntity.ch, offset,
                                fCurrentEntity.ch, 0, length);
                    }
                    offset = 0;
                    if (load(length, false, false)) {
                        break;
                    }
                }
            }
</source>
    </clone>
    <clone nlines="40" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11DTDConfiguration.java" startline="700" startcolumn="9" endline="739" endcolumn="9">
if (fInputSource != null) {
            try {
                                fValidationManager.reset();
                fVersionDetector.reset(this);
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="805" startcolumn="9" endline="845" endcolumn="9">
if (fInputSource != null) {
            try {
                fValidationManager.reset();
                fVersionDetector.reset(this);
                fConfigUpdated = true;
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
        }
</source>
    </clone>
    <clone nlines="40" distance="4">
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11NonValidatingConfiguration.java" startline="626" startcolumn="9" endline="665" endcolumn="9">
if (fInputSource != null) {
            try {
                                fValidationManager.reset();
                fVersionDetector.reset(this);
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java" startline="805" startcolumn="9" endline="845" endcolumn="9">
if (fInputSource != null) {
            try {
                fValidationManager.reset();
                fVersionDetector.reset(this);
                fConfigUpdated = true;
                resetCommon();

                short version = fVersionDetector.determineDocVersion(fInputSource);
                if (version == Constants.XML_VERSION_1_1) {
                    initXML11Components();
                    configureXML11Pipeline();
                    resetXML11();
                } else {
                    configurePipeline();
                    reset();
                }

                // mark configuration as fixed
                fConfigUpdated = false;

                // resets and sets the pipeline.
                fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, version);
                fInputSource = null;
            } catch (XNIException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (IOException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (RuntimeException ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw ex;
            } catch (Exception ex) {
                if (PRINT_EXCEPTION_STACK_TRACE)
                    ex.printStackTrace();
                throw new XNIException(ex);
            }
        }
</source>
    </clone>
    <clone nlines="19" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3659" startcolumn="28" endline="3677" endcolumn="21">
for (int j = 0; j &lt; size2; j += fFieldCount) {
                        for (int k = 0; k &lt; fFieldCount; ++k) {
                            final Object value1 = values.elementAt(i+k);
                            final Object value2 = fValues.elementAt(j+k);
                            final short valueType1 = vsb.getValueTypeAt(i+k);
                            final short valueType2 = getValueTypeAt(j+k);
                            if (value1 != value2 &amp;&amp; (valueType1 != valueType2 || value1 == null || !value1.equals(value2))) {
                                continue INNER;
                            }
                            else if(valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {
                                ShortList list1 = vsb.getItemValueTypeAt(i+k);
                                ShortList list2 = getItemValueTypeAt(j+k);
                                if (list1 == null || list2 == null || !list1.equals(list2)) {
                                    continue INNER;
                                }
                            }
                        }
                        continue OUTER;
                    }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3659" startcolumn="21" endline="3677" endcolumn="21">
INNER: for (int j = 0; j &lt; size2; j += fFieldCount) {
                        for (int k = 0; k &lt; fFieldCount; ++k) {
                            final Object value1 = values.elementAt(i+k);
                            final Object value2 = fValues.elementAt(j+k);
                            final short valueType1 = vsb.getValueTypeAt(i+k);
                            final short valueType2 = getValueTypeAt(j+k);
                            if (value1 != value2 &amp;&amp; (valueType1 != valueType2 || value1 == null || !value1.equals(value2))) {
                                continue INNER;
                            }
                            else if(valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {
                                ShortList list1 = vsb.getItemValueTypeAt(i+k);
                                ShortList list2 = getItemValueTypeAt(j+k);
                                if (list1 == null || list2 == null || !list1.equals(list2)) {
                                    continue INNER;
                                }
                            }
                        }
                        continue OUTER;
                    }
</source>
    </clone>
    <clone nlines="36" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="298" startcolumn="30" endline="337" endcolumn="25">
if (entityName == fGtSymbol) {
                            fStringBuffer.append('&gt;');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueB: \""
                                                   + fStringBuffer.toString()
                                                   + "\"");
                            }
                        }
                        else if (entityName == fQuotSymbol) {
                            fStringBuffer.append('"');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueD: \""
                                                   + fStringBuffer.toString()
                                                   + "\"");
                            }
                        }
                        else {
                            if (fEntityManager.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                                 new Object[] { entityName });
                            }
                            else {
                                if (!fEntityManager.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                                       "EntityNotDeclared",
                                                                       new Object[]{entityName},
                                                                       XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    }
                                    else {
                                        reportFatalError("EntityNotDeclared",
                                                         new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
                        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="917" startcolumn="32" endline="952" endcolumn="25">
if (entityName == fGtSymbol) {
                            stringBuffer.append('&gt;');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueB: \""
                                        + stringBuffer.toString()
                                        + "\"");
                            }
                        } else if (entityName == fQuotSymbol) {
                            stringBuffer.append('"');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueD: \""
                                        + stringBuffer.toString()
                                        + "\"");
                            }
                        } else {
                            if (fEntityStore.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                        new Object[] { entityName });
                            } else {
                                if (!fEntityStore.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(fEntityScanner,XMLMessageFormatter.XML_DOMAIN,
                                                    "EntityNotDeclared",
                                                    new Object[]{entityName},
                                                    XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    } else {
                                        reportFatalError("EntityNotDeclared",
                                                new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
                        }
</source>
    </clone>
    <clone nlines="20" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="573" startcolumn="18" endline="592" endcolumn="13">
if (this == Token.token_not_wordchars)
                ret = "\\W";
            else if (this == Token.token_not_spaces)
                ret = "\\S";
            else {
                StringBuffer sb = new StringBuffer();
                sb.append("[^");
                for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append('-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
                sb.append("]");
                ret = sb.toString();
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="550" startcolumn="18" endline="569" endcolumn="13">
if (this == Token.token_wordchars)
                ret = "\\w";
            else if (this == Token.token_spaces)
                ret = "\\s";
            else {
                StringBuffer sb = new StringBuffer();
                sb.append("[");
                for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append((char)'-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
                sb.append("]");
                ret = sb.toString();
            }
</source>
    </clone>
    <clone nlines="31" distance="4">
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedByteVector.java" startline="154" startcolumn="5" endline="184" endcolumn="5">
if(m_firstFree+numberOfElements&lt;m_blocksize)
      for (int i = 0; i &lt; numberOfElements; i++)
      {
        m_map0[m_firstFree++]=value;
      }
    else
    {
      int index=m_firstFree/m_blocksize;
      int offset=m_firstFree%m_blocksize;
      m_firstFree+=numberOfElements;
      while( numberOfElements&gt;0)
      {
        if(index&gt;=m_map.length)
        {
          int newsize=index+m_numblocks;
          byte[][] newMap=new byte[newsize][];
          System.arraycopy(m_map, 0, newMap, 0, m_map.length);
          m_map=newMap;
        }
        byte[] block=m_map[index];
        if(null==block)
          block=m_map[index]=new byte[m_blocksize];
        int copied=(m_blocksize-offset &lt; numberOfElements)
          ? m_blocksize-offset : numberOfElements;
        numberOfElements-=copied;
        while(copied-- &gt; 0)
          block[offset++]=value;

        ++index;offset=0;
      }
    }
</source>
        <source file="com/sun/org/apache/xml/internal/utils/SuballocatedIntVector.java" startline="194" startcolumn="5" endline="224" endcolumn="5">
if(m_firstFree+numberOfElements&lt;m_blocksize)
      for (int i = 0; i &lt; numberOfElements; i++)
      {
        m_map0[m_firstFree++]=value;
      }
    else
    {
      int index=m_firstFree&gt;&gt;&gt;m_SHIFT;
      int offset=m_firstFree&amp;m_MASK;
      m_firstFree+=numberOfElements;
      while( numberOfElements&gt;0)
      {
        if(index&gt;=m_map.length)
        {
          int newsize=index+m_numblocks;
          int[][] newMap=new int[newsize][];
          System.arraycopy(m_map, 0, newMap, 0, m_map.length);
          m_map=newMap;
        }
        int[] block=m_map[index];
        if(null==block)
          block=m_map[index]=new int[m_blocksize];
        int copied=(m_blocksize-offset &lt; numberOfElements)
          ? m_blocksize-offset : numberOfElements;
        numberOfElements-=copied;
        while(copied-- &gt; 0)
          block[offset++]=value;

        ++index;offset=0;
      }
    }
</source>
    </clone>
    <clone nlines="35" distance="2">
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="989" startcolumn="14" endline="1023" endcolumn="9">
if (isFallbackElement(element)) {
            this.handleFallbackElement();
        }
        else if (hasXIncludeNamespace(element)) {
            if (getSawInclude(fDepth - 1)) {
                reportFatalError(
                    "IncludeChild",
                    new Object[] { element.rawname });
            }
            if (getSawFallback(fDepth - 1)) {
                reportFatalError(
                    "FallbackChild",
                    new Object[] { element.rawname });
            }
            if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.emptyElement(element, attributes, augs);
                }
            }
        }
        else if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.emptyElement(element, attributes, augs);
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/xinclude/XIncludeHandler.java" startline="917" startcolumn="14" endline="951" endcolumn="9">
if (isFallbackElement(element)) {
            this.handleFallbackElement();
        }
        else if (hasXIncludeNamespace(element)) {
            if (getSawInclude(fDepth - 1)) {
                reportFatalError(
                    "IncludeChild",
                    new Object[] { element.rawname });
            }
            if (getSawFallback(fDepth - 1)) {
                reportFatalError(
                    "FallbackChild",
                    new Object[] { element.rawname });
            }
            if (getState() == STATE_NORMAL_PROCESSING) {
                if (fResultDepth++ == 0) {
                    checkMultipleRootElements();
                }
                if (fDocumentHandler != null) {
                    augs = modifyAugmentations(augs);
                    attributes = processAttributes(attributes);
                    fDocumentHandler.startElement(element, attributes, augs);
                }
            }
        }
        else if (getState() == STATE_NORMAL_PROCESSING) {
            if (fResultDepth++ == 0) {
                checkMultipleRootElements();
            }
            if (fDocumentHandler != null) {
                augs = modifyAugmentations(augs);
                attributes = processAttributes(attributes);
                fDocumentHandler.startElement(element, attributes, augs);
            }
        }
</source>
    </clone>
    <clone nlines="33" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="536" startcolumn="21" endline="568" endcolumn="21">
if ( _xhtml ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( tagName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( tagName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="284" startcolumn="21" endline="316" endcolumn="21">
if ( _xhtml || hasNamespaceURI ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( rawName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( rawName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
</source>
    </clone>
    <clone nlines="33" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="761" startcolumn="21" endline="793" endcolumn="21">
if ( _xhtml ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( tagName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( tagName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="284" startcolumn="21" endline="316" endcolumn="21">
if ( _xhtml || hasNamespaceURI ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( rawName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( rawName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
</source>
    </clone>
    <clone nlines="22" distance="3">
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="571" startcolumn="13" endline="592" endcolumn="13">
if (this == Token.token_not_0to9)
                ret = "\\D";
            else if (this == Token.token_not_wordchars)
                ret = "\\W";
            else if (this == Token.token_not_spaces)
                ret = "\\S";
            else {
                StringBuffer sb = new StringBuffer();
                sb.append("[^");
                for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append('-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
                sb.append("]");
                ret = sb.toString();
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xpath/regex/RangeToken.java" startline="548" startcolumn="18" endline="569" endcolumn="13">
if (this == Token.token_0to9)
                ret = "\\d";
            else if (this == Token.token_wordchars)
                ret = "\\w";
            else if (this == Token.token_spaces)
                ret = "\\s";
            else {
                StringBuffer sb = new StringBuffer();
                sb.append("[");
                for (int i = 0;  i &lt; this.ranges.length;  i += 2) {
                    if ((options &amp; RegularExpression.SPECIAL_COMMA) != 0 &amp;&amp; i &gt; 0)  sb.append(",");
                    if (this.ranges[i] == this.ranges[i+1]) {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                    } else {
                        sb.append(escapeCharInCharClass(this.ranges[i]));
                        sb.append((char)'-');
                        sb.append(escapeCharInCharClass(this.ranges[i+1]));
                    }
                }
                sb.append("]");
                ret = sb.toString();
            }
</source>
    </clone>
    <clone nlines="35" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1270" startcolumn="24" endline="1304" endcolumn="17">
while (fCurrentEntity.position &lt; fCurrentEntity.count) {
                    c = fCurrentEntity.ch[fCurrentEntity.position++];
                    if (c == charAt0) {
                        // looks like we just hit the delimiter
                        int delimOffset = fCurrentEntity.position - 1;
                        for (int i = 1; i &lt; delimLen; i++) {
                            if (fCurrentEntity.position == fCurrentEntity.count) {
                                fCurrentEntity.position -= i;
                                break OUTER;
                            }
                            c = fCurrentEntity.ch[fCurrentEntity.position++];
                            if (delimiter.charAt(i) != c) {
                                fCurrentEntity.position--;
                                break;
                            }
                        }
                        if (fCurrentEntity.position == delimOffset + delimLen) {
                            done = true;
                            break;
                        }
                    }
                    else if (c == '\n') {
                        fCurrentEntity.position--;
                        break;
                    }
                    // Control characters are allowed to appear as literals
                    // in internal entities.
                    else if (!XML11Char.isXML11Valid(c)) {
                        fCurrentEntity.position--;
                        int length = fCurrentEntity.position - offset;
                        fCurrentEntity.columnNumber += length - newlines;
                        buffer.append(fCurrentEntity.ch, offset, length);
                        return true;
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1270" startcolumn="17" endline="1304" endcolumn="17">
OUTER: while (fCurrentEntity.position &lt; fCurrentEntity.count) {
                    c = fCurrentEntity.ch[fCurrentEntity.position++];
                    if (c == charAt0) {
                        // looks like we just hit the delimiter
                        int delimOffset = fCurrentEntity.position - 1;
                        for (int i = 1; i &lt; delimLen; i++) {
                            if (fCurrentEntity.position == fCurrentEntity.count) {
                                fCurrentEntity.position -= i;
                                break OUTER;
                            }
                            c = fCurrentEntity.ch[fCurrentEntity.position++];
                            if (delimiter.charAt(i) != c) {
                                fCurrentEntity.position--;
                                break;
                            }
                        }
                        if (fCurrentEntity.position == delimOffset + delimLen) {
                            done = true;
                            break;
                        }
                    }
                    else if (c == '\n') {
                        fCurrentEntity.position--;
                        break;
                    }
                    // Control characters are allowed to appear as literals
                    // in internal entities.
                    else if (!XML11Char.isXML11Valid(c)) {
                        fCurrentEntity.position--;
                        int length = fCurrentEntity.position - offset;
                        fCurrentEntity.columnNumber += length - newlines;
                        buffer.append(fCurrentEntity.ch, offset, length);
                        return true;
                    }
                }
</source>
    </clone>
    <clone nlines="23" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3657" startcolumn="24" endline="3679" endcolumn="17">
for (int i = 0; i &lt; size1; i += fFieldCount) {
                    /** Check whether this set is contained in the value store. **/
                    INNER: for (int j = 0; j &lt; size2; j += fFieldCount) {
                        for (int k = 0; k &lt; fFieldCount; ++k) {
                            final Object value1 = values.elementAt(i+k);
                            final Object value2 = fValues.elementAt(j+k);
                            final short valueType1 = vsb.getValueTypeAt(i+k);
                            final short valueType2 = getValueTypeAt(j+k);
                            if (value1 != value2 &amp;&amp; (valueType1 != valueType2 || value1 == null || !value1.equals(value2))) {
                                continue INNER;
                            }
                            else if(valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {
                                ShortList list1 = vsb.getItemValueTypeAt(i+k);
                                ShortList list2 = getItemValueTypeAt(j+k);
                                if (list1 == null || list2 == null || !list1.equals(list2)) {
                                    continue INNER;
                                }
                            }
                        }
                        continue OUTER;
                    }
                    return i;
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java" startline="3657" startcolumn="17" endline="3679" endcolumn="17">
OUTER: for (int i = 0; i &lt; size1; i += fFieldCount) {
                    /** Check whether this set is contained in the value store. **/
                    INNER: for (int j = 0; j &lt; size2; j += fFieldCount) {
                        for (int k = 0; k &lt; fFieldCount; ++k) {
                            final Object value1 = values.elementAt(i+k);
                            final Object value2 = fValues.elementAt(j+k);
                            final short valueType1 = vsb.getValueTypeAt(i+k);
                            final short valueType2 = getValueTypeAt(j+k);
                            if (value1 != value2 &amp;&amp; (valueType1 != valueType2 || value1 == null || !value1.equals(value2))) {
                                continue INNER;
                            }
                            else if(valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {
                                ShortList list1 = vsb.getItemValueTypeAt(i+k);
                                ShortList list2 = getItemValueTypeAt(j+k);
                                if (list1 == null || list2 == null || !list1.equals(list2)) {
                                    continue INNER;
                                }
                            }
                        }
                        continue OUTER;
                    }
                    return i;
                }
</source>
    </clone>
    <clone nlines="31" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1342" startcolumn="20" endline="1372" endcolumn="13">
while (fCurrentEntity.position &lt; fCurrentEntity.count) {
                c = fCurrentEntity.ch[fCurrentEntity.position++];
                if (c == charAt0) {
                    // looks like we just hit the delimiter
                    int delimOffset = fCurrentEntity.position - 1;
                    for (int i = 1; i &lt; delimLen; i++) {
                        if (fCurrentEntity.position == fCurrentEntity.count) {
                            fCurrentEntity.position -= i;
                            break OUTER;
                        }
                        c = fCurrentEntity.ch[fCurrentEntity.position++];
                        if (delimiter.charAt(i) != c) {
                            fCurrentEntity.position -= i;
                            break;
                        }
                    }
                    if (fCurrentEntity.position == delimOffset + delimLen) {
                        done = true;
                        break;
                    }
                } else if (c == '\n' || (isExternal &amp;&amp; c == '\r')) {
                    fCurrentEntity.position--;
                    break;
                } else if (XMLChar.isInvalid(c)) {
                    fCurrentEntity.position--;
                    int length = fCurrentEntity.position - offset;
                    fCurrentEntity.columnNumber += length - newlines;
                    buffer.append(fCurrentEntity.ch, offset, length);
                    return true;
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLEntityScanner.java" startline="1342" startcolumn="13" endline="1372" endcolumn="13">
OUTER: while (fCurrentEntity.position &lt; fCurrentEntity.count) {
                c = fCurrentEntity.ch[fCurrentEntity.position++];
                if (c == charAt0) {
                    // looks like we just hit the delimiter
                    int delimOffset = fCurrentEntity.position - 1;
                    for (int i = 1; i &lt; delimLen; i++) {
                        if (fCurrentEntity.position == fCurrentEntity.count) {
                            fCurrentEntity.position -= i;
                            break OUTER;
                        }
                        c = fCurrentEntity.ch[fCurrentEntity.position++];
                        if (delimiter.charAt(i) != c) {
                            fCurrentEntity.position -= i;
                            break;
                        }
                    }
                    if (fCurrentEntity.position == delimOffset + delimLen) {
                        done = true;
                        break;
                    }
                } else if (c == '\n' || (isExternal &amp;&amp; c == '\r')) {
                    fCurrentEntity.position--;
                    break;
                } else if (XMLChar.isInvalid(c)) {
                    fCurrentEntity.position--;
                    int length = fCurrentEntity.position - offset;
                    fCurrentEntity.columnNumber += length - newlines;
                    buffer.append(fCurrentEntity.ch, offset, length);
                    return true;
                }
            }
</source>
    </clone>
    <clone nlines="35" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1988" startcolumn="9" endline="2022" endcolumn="9">
if (ws == WS_REPLACE) {
            char ch;
            // when it's replace, just replace #x9, #xa, #xd by #x20
            for (int i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd)
                    sb.append(ch);
                else
                    sb.append((char)0x20);
            }
        } else {
            char ch;
            int i;
            boolean isLeading = true;
            // when it's collapse
            for (i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                // append real characters, so we passed leading ws
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20) {
                    sb.append(ch);
                    isLeading = false;
                }
                else {
                    // for whitespaces, we skip all following ws
                    for (; i &lt; len-1; i++) {
                        ch = content.charAt(i+1);
                        if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20)
                            break;
                    }
                    // if it's not a leading or tailing ws, then append a space
                    if (i &lt; len - 1 &amp;&amp; !isLeading)
                        sb.append((char)0x20);
                }
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/xs/traversers/XSAttributeChecker.java" startline="1629" startcolumn="9" endline="1663" endcolumn="9">
if (ws == XSSimpleType.WS_REPLACE) {
            char ch;
            // when it's replace, just replace #x9, #xa, #xd by #x20
            for (int i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd)
                    sb.append(ch);
                else
                    sb.append((char)0x20);
            }
        } else {
            char ch;
            int i;
            boolean isLeading = true;
            // when it's collapse
            for (i = 0; i &lt; len; i++) {
                ch = content.charAt(i);
                // append real characters, so we passed leading ws
                if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20) {
                    sb.append(ch);
                    isLeading = false;
                }
                else {
                    // for whitespaces, we skip all following ws
                    for (; i &lt; len-1; i++) {
                        ch = content.charAt(i+1);
                        if (ch != 0x9 &amp;&amp; ch != 0xa &amp;&amp; ch != 0xd &amp;&amp; ch != 0x20)
                            break;
                    }
                    // if it's not a leading or tailing ws, then append a space
                    if (i &lt; len - 1 &amp;&amp; !isLeading)
                        sb.append((char)0x20);
                }
            }
        }
</source>
    </clone>
    <clone nlines="35" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1233" startcolumn="24" endline="1267" endcolumn="17">
while (fCurrentEntity.position &lt; fCurrentEntity.count) {
                    c = fCurrentEntity.ch[fCurrentEntity.position++];
                    if (c == charAt0) {
                        // looks like we just hit the delimiter
                        int delimOffset = fCurrentEntity.position - 1;
                        for (int i = 1; i &lt; delimLen; i++) {
                            if (fCurrentEntity.position == fCurrentEntity.count) {
                                fCurrentEntity.position -= i;
                                break OUTER;
                            }
                            c = fCurrentEntity.ch[fCurrentEntity.position++];
                            if (delimiter.charAt(i) != c) {
                                fCurrentEntity.position--;
                                break;
                            }
                         }
                         if (fCurrentEntity.position == delimOffset + delimLen) {
                            done = true;
                            break;
                         }
                    }
                    else if (c == '\n' || c == '\r' || c == 0x85 || c == 0x2028) {
                        fCurrentEntity.position--;
                        break;
                    }
                    // In external entities control characters cannot appear
                    // as literals so do not skip over them.
                    else if (!XML11Char.isXML11ValidLiteral(c)) {
                        fCurrentEntity.position--;
                        int length = fCurrentEntity.position - offset;
                        fCurrentEntity.columnNumber += length - newlines;
                        buffer.append(fCurrentEntity.ch, offset, length);
                        return true;
                    }
                }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XML11EntityScanner.java" startline="1233" startcolumn="17" endline="1267" endcolumn="17">
OUTER: while (fCurrentEntity.position &lt; fCurrentEntity.count) {
                    c = fCurrentEntity.ch[fCurrentEntity.position++];
                    if (c == charAt0) {
                        // looks like we just hit the delimiter
                        int delimOffset = fCurrentEntity.position - 1;
                        for (int i = 1; i &lt; delimLen; i++) {
                            if (fCurrentEntity.position == fCurrentEntity.count) {
                                fCurrentEntity.position -= i;
                                break OUTER;
                            }
                            c = fCurrentEntity.ch[fCurrentEntity.position++];
                            if (delimiter.charAt(i) != c) {
                                fCurrentEntity.position--;
                                break;
                            }
                         }
                         if (fCurrentEntity.position == delimOffset + delimLen) {
                            done = true;
                            break;
                         }
                    }
                    else if (c == '\n' || c == '\r' || c == 0x85 || c == 0x2028) {
                        fCurrentEntity.position--;
                        break;
                    }
                    // In external entities control characters cannot appear
                    // as literals so do not skip over them.
                    else if (!XML11Char.isXML11ValidLiteral(c)) {
                        fCurrentEntity.position--;
                        int length = fCurrentEntity.position - offset;
                        fCurrentEntity.columnNumber += length - newlines;
                        buffer.append(fCurrentEntity.ch, offset, length);
                        return true;
                    }
                }
</source>
    </clone>
    <clone nlines="47" distance="2">
        <source file="com/sun/org/apache/xpath/internal/XPath.java" startline="412" startcolumn="5" endline="459" endcolumn="5">
try
    {
      return m_mainExp.bool(xctxt);
    }
    catch (TransformerException te)
    {
      te.setLocator(this.getLocator());
      ErrorListener el = xctxt.getErrorListener();
      if(null != el) // defensive, should never happen.
      {
        el.error(te);
      }
      else
        throw te;
    }
    catch (Exception e)
    {
      while (e instanceof com.sun.org.apache.xml.internal.utils.WrappedRuntimeException)
      {
        e = ((com.sun.org.apache.xml.internal.utils.WrappedRuntimeException) e).getException();
      }
      // e.printStackTrace();

      String msg = e.getMessage();

      if (msg == null || msg.length() == 0) {
           msg = XSLMessages.createXPATHMessage(
               XPATHErrorResources.ER_XPATH_ERROR, null);

      }

      TransformerException te = new TransformerException(msg,
              getLocator(), e);
      ErrorListener el = xctxt.getErrorListener();
      // te.printStackTrace();
      if(null != el) // defensive, should never happen.
      {
        el.fatalError(te);
      }
      else
        throw te;
    }
    finally
    {
      xctxt.popNamespaceContext();

      xctxt.popCurrentNodeAndExpression();
    }
</source>
        <source file="com/sun/org/apache/xpath/internal/XPath.java" startline="337" startcolumn="5" endline="383" endcolumn="5">
try
    {
      xobj = m_mainExp.execute(xctxt);
    }
    catch (TransformerException te)
    {
      te.setLocator(this.getLocator());
      ErrorListener el = xctxt.getErrorListener();
      if(null != el) // defensive, should never happen.
      {
        el.error(te);
      }
      else
        throw te;
    }
    catch (Exception e)
    {
      while (e instanceof com.sun.org.apache.xml.internal.utils.WrappedRuntimeException)
      {
        e = ((com.sun.org.apache.xml.internal.utils.WrappedRuntimeException) e).getException();
      }
      // e.printStackTrace();

      String msg = e.getMessage();

      if (msg == null || msg.length() == 0) {
           msg = XSLMessages.createXPATHMessage(
               XPATHErrorResources.ER_XPATH_ERROR, null);

      }
      TransformerException te = new TransformerException(msg,
              getLocator(), e);
      ErrorListener el = xctxt.getErrorListener();
      // te.printStackTrace();
      if(null != el) // defensive, should never happen.
      {
        el.fatalError(te);
      }
      else
        throw te;
    }
    finally
    {
      xctxt.popNamespaceContext();

      xctxt.popCurrentNodeAndExpression();
    }
</source>
    </clone>
    <clone nlines="43" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/XML11DocumentScannerImpl.java" startline="290" startcolumn="30" endline="337" endcolumn="25">
if (entityName == fLtSymbol) {
                            fStringBuffer.append('&lt;');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** value9: \""
                                                   + fStringBuffer.toString()
                                                   + "\"");
                            }
                        }
                        else if (entityName == fGtSymbol) {
                            fStringBuffer.append('&gt;');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueB: \""
                                                   + fStringBuffer.toString()
                                                   + "\"");
                            }
                        }
                        else if (entityName == fQuotSymbol) {
                            fStringBuffer.append('"');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueD: \""
                                                   + fStringBuffer.toString()
                                                   + "\"");
                            }
                        }
                        else {
                            if (fEntityManager.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                                 new Object[] { entityName });
                            }
                            else {
                                if (!fEntityManager.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                                       "EntityNotDeclared",
                                                                       new Object[]{entityName},
                                                                       XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    }
                                    else {
                                        reportFatalError("EntityNotDeclared",
                                                         new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
                        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/XMLScanner.java" startline="910" startcolumn="32" endline="952" endcolumn="25">
if (entityName == fLtSymbol) {
                            stringBuffer.append('&lt;');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** value9: \""
                                        + stringBuffer.toString()
                                        + "\"");
                            }
                        } else if (entityName == fGtSymbol) {
                            stringBuffer.append('&gt;');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueB: \""
                                        + stringBuffer.toString()
                                        + "\"");
                            }
                        } else if (entityName == fQuotSymbol) {
                            stringBuffer.append('"');
                            if (DEBUG_ATTR_NORMALIZATION) {
                                System.out.println("** valueD: \""
                                        + stringBuffer.toString()
                                        + "\"");
                            }
                        } else {
                            if (fEntityStore.isExternalEntity(entityName)) {
                                reportFatalError("ReferenceToExternalEntity",
                                        new Object[] { entityName });
                            } else {
                                if (!fEntityStore.isDeclaredEntity(entityName)) {
                                    //WFC &amp; VC: Entity Declared
                                    if (checkEntities) {
                                        if (fValidation) {
                                            fErrorReporter.reportError(fEntityScanner,XMLMessageFormatter.XML_DOMAIN,
                                                    "EntityNotDeclared",
                                                    new Object[]{entityName},
                                                    XMLErrorReporter.SEVERITY_ERROR);
                                        }
                                    } else {
                                        reportFatalError("EntityNotDeclared",
                                                new Object[]{entityName});
                                    }
                                }
                                fEntityManager.startEntity(entityName, true);
                            }
                        }
</source>
    </clone>
    <clone nlines="39" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="581" startcolumn="17" endline="619" endcolumn="17">
if (_docTypeSystemId != null) {
                    // System identifier must be specified to print DOCTYPE.
                    // If public identifier is specified print 'PUBLIC
                    // &lt;public&gt; &lt;system&gt;', if not, print 'SYSTEM &lt;system&gt;'.
                    _printer.printText( "&lt;!DOCTYPE " );
                    _printer.printText( rootTagName );
                    if (_docTypePublicId != null) {
                        _printer.printText( " PUBLIC " );
                        printDoctypeURL( _docTypePublicId );
                        if (_indenting) {
                            _printer.breakLine();
                            for (i = 0 ; i &lt; 18 + rootTagName.length() ; ++i)
                                _printer.printText( " " );
                        } else
                            _printer.printText( " " );
                        printDoctypeURL( _docTypeSystemId );
                    } else {
                        _printer.printText( " SYSTEM " );
                        printDoctypeURL( _docTypeSystemId );
                    }

                    // If we accumulated any DTD contents while printing.
                    // this would be the place to print it.
                    if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                        _printer.printText( " [" );
                        printText( dtd, true, true );
                        _printer.printText( ']' );
                    }

                    _printer.printText( "&gt;" );
                    _printer.breakLine();
                } else if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                    _printer.printText( "&lt;!DOCTYPE " );
                    _printer.printText( rootTagName );
                    _printer.printText( " [" );
                    printText( dtd, true, true );
                    _printer.printText( "]&gt;" );
                    _printer.breakLine();
                }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1325" startcolumn="13" endline="1363" endcolumn="13">
if (_docTypeSystemId != null) {
                // System identifier must be specified to print DOCTYPE.
                // If public identifier is specified print 'PUBLIC
                // &lt;public&gt; &lt;system&gt;', if not, print 'SYSTEM &lt;system&gt;'.
                _printer.printText( "&lt;!DOCTYPE " );
                _printer.printText( name );
                if (_docTypePublicId != null) {
                    _printer.printText( " PUBLIC " );
                    printDoctypeURL( _docTypePublicId );
                    if (_indenting) {
                        _printer.breakLine();
                        for (int i = 0 ; i &lt; 18 + name.length() ; ++i)
                            _printer.printText( " " );
                    } else
                        _printer.printText( " " );
                    printDoctypeURL( _docTypeSystemId );
                } else {
                    _printer.printText( " SYSTEM " );
                    printDoctypeURL( _docTypeSystemId );
                }

                // If we accumulated any DTD contents while printing.
                // this would be the place to print it.
                if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                    _printer.printText( " [" );
                    printText( dtd, true, true );
                    _printer.printText( ']' );
                }

                _printer.printText( "&gt;" );
                _printer.breakLine();
            } else if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                _printer.printText( "&lt;!DOCTYPE " );
                _printer.printText( name );
                _printer.printText( " [" );
                printText( dtd, true, true );
                _printer.printText( "]&gt;" );
                _printer.breakLine();
            }
</source>
    </clone>
    <clone nlines="41" distance="1">
        <source file="com/sun/org/apache/xml/internal/serialize/XMLSerializer.java" startline="580" startcolumn="13" endline="620" endcolumn="13">
if (! _format.getOmitDocumentType()) {
                if (_docTypeSystemId != null) {
                    // System identifier must be specified to print DOCTYPE.
                    // If public identifier is specified print 'PUBLIC
                    // &lt;public&gt; &lt;system&gt;', if not, print 'SYSTEM &lt;system&gt;'.
                    _printer.printText( "&lt;!DOCTYPE " );
                    _printer.printText( rootTagName );
                    if (_docTypePublicId != null) {
                        _printer.printText( " PUBLIC " );
                        printDoctypeURL( _docTypePublicId );
                        if (_indenting) {
                            _printer.breakLine();
                            for (i = 0 ; i &lt; 18 + rootTagName.length() ; ++i)
                                _printer.printText( " " );
                        } else
                            _printer.printText( " " );
                        printDoctypeURL( _docTypeSystemId );
                    } else {
                        _printer.printText( " SYSTEM " );
                        printDoctypeURL( _docTypeSystemId );
                    }

                    // If we accumulated any DTD contents while printing.
                    // this would be the place to print it.
                    if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                        _printer.printText( " [" );
                        printText( dtd, true, true );
                        _printer.printText( ']' );
                    }

                    _printer.printText( "&gt;" );
                    _printer.breakLine();
                } else if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                    _printer.printText( "&lt;!DOCTYPE " );
                    _printer.printText( rootTagName );
                    _printer.printText( " [" );
                    printText( dtd, true, true );
                    _printer.printText( "]&gt;" );
                    _printer.breakLine();
                }
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/BaseMarkupSerializer.java" startline="1324" startcolumn="9" endline="1364" endcolumn="9">
if (! _format.getOmitDocumentType()) {
            if (_docTypeSystemId != null) {
                // System identifier must be specified to print DOCTYPE.
                // If public identifier is specified print 'PUBLIC
                // &lt;public&gt; &lt;system&gt;', if not, print 'SYSTEM &lt;system&gt;'.
                _printer.printText( "&lt;!DOCTYPE " );
                _printer.printText( name );
                if (_docTypePublicId != null) {
                    _printer.printText( " PUBLIC " );
                    printDoctypeURL( _docTypePublicId );
                    if (_indenting) {
                        _printer.breakLine();
                        for (int i = 0 ; i &lt; 18 + name.length() ; ++i)
                            _printer.printText( " " );
                    } else
                        _printer.printText( " " );
                    printDoctypeURL( _docTypeSystemId );
                } else {
                    _printer.printText( " SYSTEM " );
                    printDoctypeURL( _docTypeSystemId );
                }

                // If we accumulated any DTD contents while printing.
                // this would be the place to print it.
                if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                    _printer.printText( " [" );
                    printText( dtd, true, true );
                    _printer.printText( ']' );
                }

                _printer.printText( "&gt;" );
                _printer.breakLine();
            } else if (dtd != null &amp;&amp; dtd.length() &gt; 0) {
                _printer.printText( "&lt;!DOCTYPE " );
                _printer.printText( name );
                _printer.printText( " [" );
                printText( dtd, true, true );
                _printer.printText( "]&gt;" );
                _printer.breakLine();
            }
        }
</source>
    </clone>
    <clone nlines="38" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="532" startcolumn="17" endline="569" endcolumn="17">
for ( i = 0 ; i &lt; attrs.getLength() ; ++i ) {
                    _printer.printSpace();
                    name = attrs.getName( i ).toLowerCase(Locale.ENGLISH);
                    value = attrs.getValue( i );
                    if ( _xhtml ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( tagName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( tagName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
                }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="280" startcolumn="17" endline="317" endcolumn="17">
for ( i = 0 ; i &lt; attrs.getLength() ; ++i ) {
                    _printer.printSpace();
                    name = attrs.getQName( i ).toLowerCase(Locale.ENGLISH);
                    value = attrs.getValue( i );
                    if ( _xhtml || hasNamespaceURI ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( rawName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( rawName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
                }
</source>
    </clone>
    <clone nlines="40" distance="2">
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="531" startcolumn="13" endline="570" endcolumn="13">
if ( attrs != null ) {
                for ( i = 0 ; i &lt; attrs.getLength() ; ++i ) {
                    _printer.printSpace();
                    name = attrs.getName( i ).toLowerCase(Locale.ENGLISH);
                    value = attrs.getValue( i );
                    if ( _xhtml ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( tagName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( tagName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
                }
            }
</source>
        <source file="com/sun/org/apache/xml/internal/serialize/HTMLSerializer.java" startline="279" startcolumn="13" endline="318" endcolumn="13">
if ( attrs != null ) {
                for ( i = 0 ; i &lt; attrs.getLength() ; ++i ) {
                    _printer.printSpace();
                    name = attrs.getQName( i ).toLowerCase(Locale.ENGLISH);
                    value = attrs.getValue( i );
                    if ( _xhtml || hasNamespaceURI ) {
                        // XHTML: print empty string for null values.
                        if ( value == null ) {
                            _printer.printText( name );
                            _printer.printText( "=\"\"" );
                        } else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    } else {
                        // HTML: Empty values print as attribute name, no value.
                        // HTML: URI attributes will print unescaped
                        if ( value == null ) {
                            value = "";
                        }
                        if ( !_format.getPreserveEmptyAttributes() &amp;&amp; value.length() == 0 )
                            _printer.printText( name );
                        else if ( HTMLdtd.isURI( rawName, name ) ) {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            _printer.printText( escapeURI( value ) );
                            _printer.printText( '"' );
                        } else if ( HTMLdtd.isBoolean( rawName, name ) )
                            _printer.printText( name );
                        else {
                            _printer.printText( name );
                            _printer.printText( "=\"" );
                            printEscaped( value );
                            _printer.printText( '"' );
                        }
                    }
                }
            }
</source>
    </clone>
    <clone nlines="31" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="905" startcolumn="13" endline="935" endcolumn="13">
if ((allowedFacet &amp; FACET_MAXINCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"maxInclusive", fTypeName});
            } else {
                maxInclusiveAnnotation = facets.maxInclusiveAnnotation;
                try {
                    fMaxInclusive = fBase.getActualValue(facets.maxInclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MAXINCLUSIVE;
                    if ((fixedFacet &amp; FACET_MAXINCLUSIVE) != 0)
                        fFixedFacet |= FACET_MAXINCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxInclusive,
                            "maxInclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MAXINCLUSIVE) != 0)) {
                    if ((fBase.fFixedFacet &amp; FACET_MAXINCLUSIVE) != 0) {
                        if (fDVs[fValidationDV].compare(fMaxInclusive, fBase.fMaxInclusive) != 0)
                            reportError( "FixedFacetValue", new Object[]{"maxInclusive", fMaxInclusive, fBase.fMaxInclusive, fTypeName});
                    }
                }
                // maxInclusive from base
                try {
                    fBase.validate(context, tempInfo);
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxInclusive,
                            "maxInclusive", fBase.getName()});
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1034" startcolumn="13" endline="1064" endcolumn="13">
if ((allowedFacet &amp; FACET_MININCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"minInclusive", fTypeName});
            } else {
                minInclusiveAnnotation = facets.minInclusiveAnnotation;
                try {
                    fMinInclusive = fBase.getActualValue(facets.minInclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MININCLUSIVE;
                    if ((fixedFacet &amp; FACET_MININCLUSIVE) != 0)
                        fFixedFacet |= FACET_MININCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minInclusive,
                            "minInclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MININCLUSIVE) != 0)) {
                    if ((fBase.fFixedFacet &amp; FACET_MININCLUSIVE) != 0) {
                        if (fDVs[fValidationDV].compare(fMinInclusive, fBase.fMinInclusive) != 0)
                            reportError( "FixedFacetValue", new Object[]{"minInclusive", facets.minInclusive, fBase.fMinInclusive, fTypeName});
                    }
                }
                // minInclusive from base
                try {
                    fBase.validate(context, tempInfo);
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minInclusive,
                            "minInclusive", fBase.getName()});
                }
            }
</source>
    </clone>
    <clone nlines="33" distance="2">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="904" startcolumn="9" endline="936" endcolumn="9">
if ((presentFacet &amp; FACET_MAXINCLUSIVE) != 0) {
            if ((allowedFacet &amp; FACET_MAXINCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"maxInclusive", fTypeName});
            } else {
                maxInclusiveAnnotation = facets.maxInclusiveAnnotation;
                try {
                    fMaxInclusive = fBase.getActualValue(facets.maxInclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MAXINCLUSIVE;
                    if ((fixedFacet &amp; FACET_MAXINCLUSIVE) != 0)
                        fFixedFacet |= FACET_MAXINCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxInclusive,
                            "maxInclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MAXINCLUSIVE) != 0)) {
                    if ((fBase.fFixedFacet &amp; FACET_MAXINCLUSIVE) != 0) {
                        if (fDVs[fValidationDV].compare(fMaxInclusive, fBase.fMaxInclusive) != 0)
                            reportError( "FixedFacetValue", new Object[]{"maxInclusive", fMaxInclusive, fBase.fMaxInclusive, fTypeName});
                    }
                }
                // maxInclusive from base
                try {
                    fBase.validate(context, tempInfo);
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxInclusive,
                            "maxInclusive", fBase.getName()});
                }
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="1033" startcolumn="9" endline="1065" endcolumn="9">
if ((presentFacet &amp; FACET_MININCLUSIVE) != 0) {
            if ((allowedFacet &amp; FACET_MININCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"minInclusive", fTypeName});
            } else {
                minInclusiveAnnotation = facets.minInclusiveAnnotation;
                try {
                    fMinInclusive = fBase.getActualValue(facets.minInclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MININCLUSIVE;
                    if ((fixedFacet &amp; FACET_MININCLUSIVE) != 0)
                        fFixedFacet |= FACET_MININCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minInclusive,
                            "minInclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MININCLUSIVE) != 0)) {
                    if ((fBase.fFixedFacet &amp; FACET_MININCLUSIVE) != 0) {
                        if (fDVs[fValidationDV].compare(fMinInclusive, fBase.fMinInclusive) != 0)
                            reportError( "FixedFacetValue", new Object[]{"minInclusive", facets.minInclusive, fBase.fMinInclusive, fTypeName});
                    }
                }
                // minInclusive from base
                try {
                    fBase.validate(context, tempInfo);
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minInclusive,
                            "minInclusive", fBase.getName()});
                }
            }
        }
</source>
    </clone>
    <clone nlines="43" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="941" startcolumn="13" endline="983" endcolumn="13">
if ((allowedFacet &amp; FACET_MAXEXCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"maxExclusive", fTypeName});
            } else {
                maxExclusiveAnnotation = facets.maxExclusiveAnnotation;
                try {
                    fMaxExclusive = fBase.getActualValue(facets.maxExclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MAXEXCLUSIVE;
                    if ((fixedFacet &amp; FACET_MAXEXCLUSIVE) != 0)
                        fFixedFacet |= FACET_MAXEXCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxExclusive,
                            "maxExclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MAXEXCLUSIVE) != 0)) {
                    result = fDVs[fValidationDV].compare(fMaxExclusive, fBase.fMaxExclusive);
                    if ((fBase.fFixedFacet &amp; FACET_MAXEXCLUSIVE) != 0 &amp;&amp; result != 0) {
                        reportError( "FixedFacetValue", new Object[]{"maxExclusive", facets.maxExclusive, fBase.fMaxExclusive, fTypeName});
                    }
                    if (result == 0) {
                        needCheckBase = false;
                    }
                }
                // maxExclusive from base
                if (needCheckBase) {
                    try {
                        fBase.validate(context, tempInfo);
                    } catch (InvalidDatatypeValueException ide) {
                        reportError(ide.getKey(), ide.getArgs());
                        reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxExclusive,
                                "maxExclusive", fBase.getName()});
                    }
                }
                // If maxExclusive == base.maxExclusive, then we only need to check
                // maxExclusive &lt;= base.maxInclusive
                else if (((fBase.fFacetsDefined &amp; FACET_MAXINCLUSIVE) != 0)) {
                    if (fDVs[fValidationDV].compare(fMaxExclusive, fBase.fMaxInclusive) &gt; 0) {
                        reportError( "maxExclusive-valid-restriction.2", new Object[]{facets.maxExclusive, fBase.fMaxInclusive});
                    }
                }
            }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="988" startcolumn="13" endline="1030" endcolumn="13">
if ((allowedFacet &amp; FACET_MINEXCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"minExclusive", fTypeName});
            } else {
                minExclusiveAnnotation = facets.minExclusiveAnnotation;
                try {
                    fMinExclusive = fBase.getActualValue(facets.minExclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MINEXCLUSIVE;
                    if ((fixedFacet &amp; FACET_MINEXCLUSIVE) != 0)
                        fFixedFacet |= FACET_MINEXCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minExclusive,
                            "minExclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MINEXCLUSIVE) != 0)) {
                    result = fDVs[fValidationDV].compare(fMinExclusive, fBase.fMinExclusive);
                    if ((fBase.fFixedFacet &amp; FACET_MINEXCLUSIVE) != 0 &amp;&amp; result != 0) {
                        reportError( "FixedFacetValue", new Object[]{"minExclusive", facets.minExclusive, fBase.fMinExclusive, fTypeName});
                    }
                    if (result == 0) {
                        needCheckBase = false;
                    }
                }
                // minExclusive from base
                if (needCheckBase) {
                    try {
                        fBase.validate(context, tempInfo);
                    } catch (InvalidDatatypeValueException ide) {
                        reportError(ide.getKey(), ide.getArgs());
                        reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minExclusive,
                                "minExclusive", fBase.getName()});
                    }
                }
                // If minExclusive == base.minExclusive, then we only need to check
                // minExclusive &gt;= base.minInclusive
                else if (((fBase.fFacetsDefined &amp; FACET_MININCLUSIVE) != 0)) {
                    if (fDVs[fValidationDV].compare(fMinExclusive, fBase.fMinInclusive) &lt; 0) {
                        reportError( "minExclusive-valid-restriction.3", new Object[]{facets.minExclusive, fBase.fMinInclusive});
                    }
                }
            }
</source>
    </clone>
    <clone nlines="45" distance="1">
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="940" startcolumn="9" endline="984" endcolumn="9">
if ((presentFacet &amp; FACET_MAXEXCLUSIVE) != 0) {
            if ((allowedFacet &amp; FACET_MAXEXCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"maxExclusive", fTypeName});
            } else {
                maxExclusiveAnnotation = facets.maxExclusiveAnnotation;
                try {
                    fMaxExclusive = fBase.getActualValue(facets.maxExclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MAXEXCLUSIVE;
                    if ((fixedFacet &amp; FACET_MAXEXCLUSIVE) != 0)
                        fFixedFacet |= FACET_MAXEXCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxExclusive,
                            "maxExclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MAXEXCLUSIVE) != 0)) {
                    result = fDVs[fValidationDV].compare(fMaxExclusive, fBase.fMaxExclusive);
                    if ((fBase.fFixedFacet &amp; FACET_MAXEXCLUSIVE) != 0 &amp;&amp; result != 0) {
                        reportError( "FixedFacetValue", new Object[]{"maxExclusive", facets.maxExclusive, fBase.fMaxExclusive, fTypeName});
                    }
                    if (result == 0) {
                        needCheckBase = false;
                    }
                }
                // maxExclusive from base
                if (needCheckBase) {
                    try {
                        fBase.validate(context, tempInfo);
                    } catch (InvalidDatatypeValueException ide) {
                        reportError(ide.getKey(), ide.getArgs());
                        reportError("FacetValueFromBase", new Object[]{fTypeName, facets.maxExclusive,
                                "maxExclusive", fBase.getName()});
                    }
                }
                // If maxExclusive == base.maxExclusive, then we only need to check
                // maxExclusive &lt;= base.maxInclusive
                else if (((fBase.fFacetsDefined &amp; FACET_MAXINCLUSIVE) != 0)) {
                    if (fDVs[fValidationDV].compare(fMaxExclusive, fBase.fMaxInclusive) &gt; 0) {
                        reportError( "maxExclusive-valid-restriction.2", new Object[]{facets.maxExclusive, fBase.fMaxInclusive});
                    }
                }
            }
        }
</source>
        <source file="com/sun/org/apache/xerces/internal/impl/dv/xs/XSSimpleTypeDecl.java" startline="987" startcolumn="9" endline="1031" endcolumn="9">
if ((presentFacet &amp; FACET_MINEXCLUSIVE) != 0) {
            if ((allowedFacet &amp; FACET_MINEXCLUSIVE) == 0) {
                reportError("cos-applicable-facets", new Object[]{"minExclusive", fTypeName});
            } else {
                minExclusiveAnnotation = facets.minExclusiveAnnotation;
                try {
                    fMinExclusive = fBase.getActualValue(facets.minExclusive, context, tempInfo, true);
                    fFacetsDefined |= FACET_MINEXCLUSIVE;
                    if ((fixedFacet &amp; FACET_MINEXCLUSIVE) != 0)
                        fFixedFacet |= FACET_MINEXCLUSIVE;
                } catch (InvalidDatatypeValueException ide) {
                    reportError(ide.getKey(), ide.getArgs());
                    reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minExclusive,
                            "minExclusive", fBase.getName()});
                }

                // check against fixed value in base
                if (((fBase.fFacetsDefined &amp; FACET_MINEXCLUSIVE) != 0)) {
                    result = fDVs[fValidationDV].compare(fMinExclusive, fBase.fMinExclusive);
                    if ((fBase.fFixedFacet &amp; FACET_MINEXCLUSIVE) != 0 &amp;&amp; result != 0) {
                        reportError( "FixedFacetValue", new Object[]{"minExclusive", facets.minExclusive, fBase.fMinExclusive, fTypeName});
                    }
                    if (result == 0) {
                        needCheckBase = false;
                    }
                }
                // minExclusive from base
                if (needCheckBase) {
                    try {
                        fBase.validate(context, tempInfo);
                    } catch (InvalidDatatypeValueException ide) {
                        reportError(ide.getKey(), ide.getArgs());
                        reportError("FacetValueFromBase", new Object[]{fTypeName, facets.minExclusive,
                                "minExclusive", fBase.getName()});
                    }
                }
                // If minExclusive == base.minExclusive, then we only need to check
                // minExclusive &gt;= base.minInclusive
                else if (((fBase.fFacetsDefined &amp; FACET_MININCLUSIVE) != 0)) {
                    if (fDVs[fValidationDV].compare(fMinExclusive, fBase.fMinInclusive) &lt; 0) {
                        reportError( "minExclusive-valid-restriction.3", new Object[]{facets.minExclusive, fBase.fMinInclusive});
                    }
                }
            }
        }
</source>
    </clone>
</clones>
